{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"],"imports":1}},{"name":"../constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":20,"index":187},"end":{"line":5,"column":43,"index":210}}],"key":"zmjjtqoQxi2W71eIMIIaEi1mOpU=","exportNames":["*"],"imports":1}},{"name":"../fork/getPathFromState-forks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":33,"index":245},"end":{"line":6,"column":74,"index":286}}],"key":"Pwl2s8MefiXMrO7elNt6TT2k9Bo=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\").default;\n  var _toConsumableArray = require(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\").default;\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.defaultRouteInfo = void 0;\n  exports.getRouteInfoFromState = getRouteInfoFromState;\n  var constants_1 = require(_dependencyMap[2], \"../constants\");\n  var getPathFromState_forks_1 = require(_dependencyMap[3], \"../fork/getPathFromState-forks\");\n  exports.defaultRouteInfo = {\n    unstable_globalHref: '',\n    searchParams: new URLSearchParams(),\n    pathname: '/',\n    params: {},\n    segments: [],\n    pathnameWithParams: '/',\n    // TODO: Remove this, it is not used anywhere\n    isIndex: false\n  };\n  function getRouteInfoFromState(state) {\n    if (!state) return exports.defaultRouteInfo;\n    var route = state.routes[0];\n    if (route.name !== constants_1.INTERNAL_SLOT_NAME) {\n      throw new Error(`Expected the first route to be ${constants_1.INTERNAL_SLOT_NAME}, but got ${route.name}`);\n    }\n    state = route.state;\n    var segments = [];\n    var params = Object.create(null);\n    while (state) {\n      route = state.routes['index' in state && state.index ? state.index : 0];\n      Object.assign(params, route.params);\n      var routeName = route.name;\n      if (routeName.startsWith('/')) {\n        routeName = routeName.slice(1);\n      }\n      segments.push.apply(segments, _toConsumableArray(routeName.split('/')));\n      state = route.state;\n    }\n    params = Object.fromEntries(Object.entries(params).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n      if (typeof value === 'string') {\n        return [key, safeDecodeURIComponent(value)];\n      } else if (Array.isArray(value)) {\n        return [key, value.map(function (v) {\n          return safeDecodeURIComponent(v);\n        })];\n      } else {\n        return [key, value];\n      }\n    }));\n    /**\n     * If React Navigation didn't render the entire tree (e.g it was interrupted in a layout)\n     * then the state maybe incomplete. The reset of the path is in the params, instead of being a route\n     */\n    var routeParams = route.params;\n    while (routeParams && 'screen' in routeParams) {\n      if (typeof routeParams.screen === 'string') {\n        var screen = routeParams.screen.startsWith('/') ? routeParams.screen.slice(1) : routeParams.screen;\n        segments.push.apply(segments, _toConsumableArray(screen.split('/')));\n      }\n      if (typeof routeParams.params === 'object' && !Array.isArray(routeParams.params)) {\n        routeParams = routeParams.params;\n      } else {\n        routeParams = undefined;\n      }\n    }\n    if (route.params && 'screen' in route.params && route.params.screen === 'string') {\n      var _screen = route.params.screen.startsWith('/') ? route.params.screen.slice(1) : route.params.screen;\n      segments.push.apply(segments, _toConsumableArray(_screen.split('/')));\n    }\n    if (segments[segments.length - 1] === 'index') {\n      segments.pop();\n    }\n    delete params['screen'];\n    delete params['params'];\n    var pathParams = new Set();\n    var pathname = '/' + segments.filter(function (segment) {\n      return !(segment.startsWith('(') && segment.endsWith(')'));\n    }).flatMap(function (segment) {\n      if (segment === '+not-found') {\n        var notFoundPath = params['not-found'];\n        pathParams.add('not-found');\n        if (typeof notFoundPath === 'undefined') {\n          // Not founds are optional, do nothing if its not present\n          return [];\n        } else if (Array.isArray(notFoundPath)) {\n          return notFoundPath;\n        } else {\n          return [notFoundPath];\n        }\n      } else if (segment.startsWith('[...') && segment.endsWith(']')) {\n        var paramName = segment.slice(4, -1);\n        // Legacy for React Navigation optional params\n        if (paramName.endsWith('?')) {\n          paramName = paramName.slice(0, -1);\n        }\n        var values = params[paramName];\n        pathParams.add(paramName);\n        // Catchall params are optional\n        return values || [];\n      } else if (segment.startsWith('[') && segment.endsWith(']')) {\n        var _paramName = segment.slice(1, -1);\n        var value = params[_paramName];\n        pathParams.add(_paramName);\n        // Optional params are optional\n        return value ? [value] : [];\n      } else {\n        return [segment];\n      }\n    }).join('/');\n    var searchParams = new URLSearchParams(Object.entries(params).flatMap(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        key = _ref4[0],\n        value = _ref4[1];\n      // Search params should not include path params\n      if (pathParams.has(key)) {\n        return [];\n      } else if (Array.isArray(value)) {\n        return value.map(function (v) {\n          return [key, v];\n        });\n      }\n      return [[key, value]];\n    }));\n    var hash;\n    if (searchParams.has('#')) {\n      hash = searchParams.get('#') || undefined;\n      searchParams.delete('#');\n    }\n    // We cannot use searchParams.size because it is not included in the React Native polyfill\n    var searchParamString = searchParams.toString();\n    var pathnameWithParams = searchParamString ? pathname + '?' + searchParamString : pathname;\n    pathnameWithParams = hash ? pathnameWithParams + '#' + hash : pathnameWithParams;\n    return {\n      segments: segments,\n      pathname: pathname,\n      params: params,\n      unstable_globalHref: (0, getPathFromState_forks_1.appendBaseUrl)(pathnameWithParams),\n      searchParams: searchParams,\n      pathnameWithParams: pathnameWithParams,\n      // TODO: Remove this, it is not used anywhere\n      isIndex: false\n    };\n  }\n  function safeDecodeURIComponent(value) {\n    try {\n      return typeof value === 'string' ? decodeURIComponent(value) : value;\n    } catch (_unused) {\n      // If the value is not a valid URI component, return it as is\n      return value;\n    }\n  }\n});","lineCount":158,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[4,90,1,13,"default"],[4,97,1,13],[5,2,1,13],[5,6,1,13,"_toConsumableArray"],[5,24,1,13],[5,27,1,13,"require"],[5,34,1,13],[5,35,1,13,"_dependencyMap"],[5,49,1,13],[5,98,1,13,"default"],[5,105,1,13],[6,2,2,0,"Object"],[6,8,2,6],[6,9,2,7,"defineProperty"],[6,23,2,21],[6,24,2,22,"exports"],[6,31,2,29],[6,33,2,31],[6,45,2,43],[6,47,2,45],[7,4,2,47,"value"],[7,9,2,52],[7,11,2,54],[8,2,2,59],[8,3,2,60],[8,4,2,61],[9,2,3,0,"exports"],[9,9,3,7],[9,10,3,8,"defaultRouteInfo"],[9,26,3,24],[9,29,3,27],[9,34,3,32],[9,35,3,33],[10,2,4,0,"exports"],[10,9,4,7],[10,10,4,8,"getRouteInfoFromState"],[10,31,4,29],[10,34,4,32,"getRouteInfoFromState"],[10,55,4,53],[11,2,5,0],[11,6,5,6,"constants_1"],[11,17,5,17],[11,20,5,20,"require"],[11,27,5,27],[11,28,5,27,"_dependencyMap"],[11,42,5,27],[11,61,5,42],[11,62,5,43],[12,2,6,0],[12,6,6,6,"getPathFromState_forks_1"],[12,30,6,30],[12,33,6,33,"require"],[12,40,6,40],[12,41,6,40,"_dependencyMap"],[12,55,6,40],[12,92,6,73],[12,93,6,74],[13,2,7,0,"exports"],[13,9,7,7],[13,10,7,8,"defaultRouteInfo"],[13,26,7,24],[13,29,7,27],[14,4,8,4,"unstable_globalHref"],[14,23,8,23],[14,25,8,25],[14,27,8,27],[15,4,9,4,"searchParams"],[15,16,9,16],[15,18,9,18],[15,22,9,22,"URLSearchParams"],[15,37,9,37],[15,38,9,38],[15,39,9,39],[16,4,10,4,"pathname"],[16,12,10,12],[16,14,10,14],[16,17,10,17],[17,4,11,4,"params"],[17,10,11,10],[17,12,11,12],[17,13,11,13],[17,14,11,14],[18,4,12,4,"segments"],[18,12,12,12],[18,14,12,14],[18,16,12,16],[19,4,13,4,"pathnameWithParams"],[19,22,13,22],[19,24,13,24],[19,27,13,27],[20,4,14,4],[21,4,15,4,"isIndex"],[21,11,15,11],[21,13,15,13],[22,2,16,0],[22,3,16,1],[23,2,17,0],[23,11,17,9,"getRouteInfoFromState"],[23,32,17,30,"getRouteInfoFromState"],[23,33,17,31,"state"],[23,38,17,36],[23,40,17,38],[24,4,18,4],[24,8,18,8],[24,9,18,9,"state"],[24,14,18,14],[24,16,19,8],[24,23,19,15,"exports"],[24,30,19,22],[24,31,19,23,"defaultRouteInfo"],[24,47,19,39],[25,4,20,4],[25,8,20,8,"route"],[25,13,20,13],[25,16,20,16,"state"],[25,21,20,21],[25,22,20,22,"routes"],[25,28,20,28],[25,29,20,29],[25,30,20,30],[25,31,20,31],[26,4,21,4],[26,8,21,8,"route"],[26,13,21,13],[26,14,21,14,"name"],[26,18,21,18],[26,23,21,23,"constants_1"],[26,34,21,34],[26,35,21,35,"INTERNAL_SLOT_NAME"],[26,53,21,53],[26,55,21,55],[27,6,22,8],[27,12,22,14],[27,16,22,18,"Error"],[27,21,22,23],[27,22,22,24],[27,56,22,58,"constants_1"],[27,67,22,69],[27,68,22,70,"INTERNAL_SLOT_NAME"],[27,86,22,88],[27,99,22,101,"route"],[27,104,22,106],[27,105,22,107,"name"],[27,109,22,111],[27,111,22,113],[27,112,22,114],[28,4,23,4],[29,4,24,4,"state"],[29,9,24,9],[29,12,24,12,"route"],[29,17,24,17],[29,18,24,18,"state"],[29,23,24,23],[30,4,25,4],[30,8,25,10,"segments"],[30,16,25,18],[30,19,25,21],[30,21,25,23],[31,4,26,4],[31,8,26,8,"params"],[31,14,26,14],[31,17,26,17,"Object"],[31,23,26,23],[31,24,26,24,"create"],[31,30,26,30],[31,31,26,31],[31,35,26,35],[31,36,26,36],[32,4,27,4],[32,11,27,11,"state"],[32,16,27,16],[32,18,27,18],[33,6,28,8,"route"],[33,11,28,13],[33,14,28,16,"state"],[33,19,28,21],[33,20,28,22,"routes"],[33,26,28,28],[33,27,28,29],[33,34,28,36],[33,38,28,40,"state"],[33,43,28,45],[33,47,28,49,"state"],[33,52,28,54],[33,53,28,55,"index"],[33,58,28,60],[33,61,28,63,"state"],[33,66,28,68],[33,67,28,69,"index"],[33,72,28,74],[33,75,28,77],[33,76,28,78],[33,77,28,79],[34,6,29,8,"Object"],[34,12,29,14],[34,13,29,15,"assign"],[34,19,29,21],[34,20,29,22,"params"],[34,26,29,28],[34,28,29,30,"route"],[34,33,29,35],[34,34,29,36,"params"],[34,40,29,42],[34,41,29,43],[35,6,30,8],[35,10,30,12,"routeName"],[35,19,30,21],[35,22,30,24,"route"],[35,27,30,29],[35,28,30,30,"name"],[35,32,30,34],[36,6,31,8],[36,10,31,12,"routeName"],[36,19,31,21],[36,20,31,22,"startsWith"],[36,30,31,32],[36,31,31,33],[36,34,31,36],[36,35,31,37],[36,37,31,39],[37,8,32,12,"routeName"],[37,17,32,21],[37,20,32,24,"routeName"],[37,29,32,33],[37,30,32,34,"slice"],[37,35,32,39],[37,36,32,40],[37,37,32,41],[37,38,32,42],[38,6,33,8],[39,6,34,8,"segments"],[39,14,34,16],[39,15,34,17,"push"],[39,19,34,21],[39,20,34,21,"apply"],[39,25,34,21],[39,26,34,8,"segments"],[39,34,34,16],[39,36,34,16,"_toConsumableArray"],[39,54,34,16],[39,55,34,25,"routeName"],[39,64,34,34],[39,65,34,35,"split"],[39,70,34,40],[39,71,34,41],[39,74,34,44],[39,75,34,45],[39,77,34,46],[40,6,35,8,"state"],[40,11,35,13],[40,14,35,16,"route"],[40,19,35,21],[40,20,35,22,"state"],[40,25,35,27],[41,4,36,4],[42,4,37,4,"params"],[42,10,37,10],[42,13,37,13,"Object"],[42,19,37,19],[42,20,37,20,"fromEntries"],[42,31,37,31],[42,32,37,32,"Object"],[42,38,37,38],[42,39,37,39,"entries"],[42,46,37,46],[42,47,37,47,"params"],[42,53,37,53],[42,54,37,54],[42,55,37,55,"map"],[42,58,37,58],[42,59,37,59],[42,69,37,59,"_ref"],[42,73,37,59],[42,75,37,77],[43,6,37,77],[43,10,37,77,"_ref2"],[43,15,37,77],[43,18,37,77,"_slicedToArray"],[43,32,37,77],[43,33,37,77,"_ref"],[43,37,37,77],[44,8,37,61,"key"],[44,11,37,64],[44,14,37,64,"_ref2"],[44,19,37,64],[45,8,37,66,"value"],[45,13,37,71],[45,16,37,71,"_ref2"],[45,21,37,71],[46,6,38,8],[46,10,38,12],[46,17,38,19,"value"],[46,22,38,24],[46,27,38,29],[46,35,38,37],[46,37,38,39],[47,8,39,12],[47,15,39,19],[47,16,39,20,"key"],[47,19,39,23],[47,21,39,25,"safeDecodeURIComponent"],[47,43,39,47],[47,44,39,48,"value"],[47,49,39,53],[47,50,39,54],[47,51,39,55],[48,6,40,8],[48,7,40,9],[48,13,41,13],[48,17,41,17,"Array"],[48,22,41,22],[48,23,41,23,"isArray"],[48,30,41,30],[48,31,41,31,"value"],[48,36,41,36],[48,37,41,37],[48,39,41,39],[49,8,42,12],[49,15,42,19],[49,16,42,20,"key"],[49,19,42,23],[49,21,42,25,"value"],[49,26,42,30],[49,27,42,31,"map"],[49,30,42,34],[49,31,42,35],[49,41,42,36,"v"],[49,42,42,37],[50,10,42,37],[50,17,42,42,"safeDecodeURIComponent"],[50,39,42,64],[50,40,42,65,"v"],[50,41,42,66],[50,42,42,67],[51,8,42,67],[51,10,42,68],[51,11,42,69],[52,6,43,8],[52,7,43,9],[52,13,44,13],[53,8,45,12],[53,15,45,19],[53,16,45,20,"key"],[53,19,45,23],[53,21,45,25,"value"],[53,26,45,30],[53,27,45,31],[54,6,46,8],[55,4,47,4],[55,5,47,5],[55,6,47,6],[55,7,47,7],[56,4,48,4],[57,0,49,0],[58,0,50,0],[59,0,51,0],[60,4,52,4],[60,8,52,8,"routeParams"],[60,19,52,19],[60,22,52,22,"route"],[60,27,52,27],[60,28,52,28,"params"],[60,34,52,34],[61,4,53,4],[61,11,53,11,"routeParams"],[61,22,53,22],[61,26,53,26],[61,34,53,34],[61,38,53,38,"routeParams"],[61,49,53,49],[61,51,53,51],[62,6,54,8],[62,10,54,12],[62,17,54,19,"routeParams"],[62,28,54,30],[62,29,54,31,"screen"],[62,35,54,37],[62,40,54,42],[62,48,54,50],[62,50,54,52],[63,8,55,12],[63,12,55,18,"screen"],[63,18,55,24],[63,21,55,27,"routeParams"],[63,32,55,38],[63,33,55,39,"screen"],[63,39,55,45],[63,40,55,46,"startsWith"],[63,50,55,56],[63,51,55,57],[63,54,55,60],[63,55,55,61],[63,58,56,18,"routeParams"],[63,69,56,29],[63,70,56,30,"screen"],[63,76,56,36],[63,77,56,37,"slice"],[63,82,56,42],[63,83,56,43],[63,84,56,44],[63,85,56,45],[63,88,57,18,"routeParams"],[63,99,57,29],[63,100,57,30,"screen"],[63,106,57,36],[64,8,58,12,"segments"],[64,16,58,20],[64,17,58,21,"push"],[64,21,58,25],[64,22,58,25,"apply"],[64,27,58,25],[64,28,58,12,"segments"],[64,36,58,20],[64,38,58,20,"_toConsumableArray"],[64,56,58,20],[64,57,58,29,"screen"],[64,63,58,35],[64,64,58,36,"split"],[64,69,58,41],[64,70,58,42],[64,73,58,45],[64,74,58,46],[64,76,58,47],[65,6,59,8],[66,6,60,8],[66,10,60,12],[66,17,60,19,"routeParams"],[66,28,60,30],[66,29,60,31,"params"],[66,35,60,37],[66,40,60,42],[66,48,60,50],[66,52,60,54],[66,53,60,55,"Array"],[66,58,60,60],[66,59,60,61,"isArray"],[66,66,60,68],[66,67,60,69,"routeParams"],[66,78,60,80],[66,79,60,81,"params"],[66,85,60,87],[66,86,60,88],[66,88,60,90],[67,8,61,12,"routeParams"],[67,19,61,23],[67,22,61,26,"routeParams"],[67,33,61,37],[67,34,61,38,"params"],[67,40,61,44],[68,6,62,8],[68,7,62,9],[68,13,63,13],[69,8,64,12,"routeParams"],[69,19,64,23],[69,22,64,26,"undefined"],[69,31,64,35],[70,6,65,8],[71,4,66,4],[72,4,67,4],[72,8,67,8,"route"],[72,13,67,13],[72,14,67,14,"params"],[72,20,67,20],[72,24,67,24],[72,32,67,32],[72,36,67,36,"route"],[72,41,67,41],[72,42,67,42,"params"],[72,48,67,48],[72,52,67,52,"route"],[72,57,67,57],[72,58,67,58,"params"],[72,64,67,64],[72,65,67,65,"screen"],[72,71,67,71],[72,76,67,76],[72,84,67,84],[72,86,67,86],[73,6,68,8],[73,10,68,14,"screen"],[73,17,68,20],[73,20,68,23,"route"],[73,25,68,28],[73,26,68,29,"params"],[73,32,68,35],[73,33,68,36,"screen"],[73,39,68,42],[73,40,68,43,"startsWith"],[73,50,68,53],[73,51,68,54],[73,54,68,57],[73,55,68,58],[73,58,69,14,"route"],[73,63,69,19],[73,64,69,20,"params"],[73,70,69,26],[73,71,69,27,"screen"],[73,77,69,33],[73,78,69,34,"slice"],[73,83,69,39],[73,84,69,40],[73,85,69,41],[73,86,69,42],[73,89,70,14,"route"],[73,94,70,19],[73,95,70,20,"params"],[73,101,70,26],[73,102,70,27,"screen"],[73,108,70,33],[74,6,71,8,"segments"],[74,14,71,16],[74,15,71,17,"push"],[74,19,71,21],[74,20,71,21,"apply"],[74,25,71,21],[74,26,71,8,"segments"],[74,34,71,16],[74,36,71,16,"_toConsumableArray"],[74,54,71,16],[74,55,71,25,"screen"],[74,62,71,31],[74,63,71,32,"split"],[74,68,71,37],[74,69,71,38],[74,72,71,41],[74,73,71,42],[74,75,71,43],[75,4,72,4],[76,4,73,4],[76,8,73,8,"segments"],[76,16,73,16],[76,17,73,17,"segments"],[76,25,73,25],[76,26,73,26,"length"],[76,32,73,32],[76,35,73,35],[76,36,73,36],[76,37,73,37],[76,42,73,42],[76,49,73,49],[76,51,73,51],[77,6,74,8,"segments"],[77,14,74,16],[77,15,74,17,"pop"],[77,18,74,20],[77,19,74,21],[77,20,74,22],[78,4,75,4],[79,4,76,4],[79,11,76,11,"params"],[79,17,76,17],[79,18,76,18],[79,26,76,26],[79,27,76,27],[80,4,77,4],[80,11,77,11,"params"],[80,17,77,17],[80,18,77,18],[80,26,77,26],[80,27,77,27],[81,4,78,4],[81,8,78,10,"pathParams"],[81,18,78,20],[81,21,78,23],[81,25,78,27,"Set"],[81,28,78,30],[81,29,78,31],[81,30,78,32],[82,4,79,4],[82,8,79,10,"pathname"],[82,16,79,18],[82,19,79,21],[82,22,79,24],[82,25,80,8,"segments"],[82,33,80,16],[82,34,81,13,"filter"],[82,40,81,19],[82,41,81,20],[82,51,81,21,"segment"],[82,58,81,28],[82,60,81,33],[83,6,82,12],[83,13,82,19],[83,15,82,21,"segment"],[83,22,82,28],[83,23,82,29,"startsWith"],[83,33,82,39],[83,34,82,40],[83,37,82,43],[83,38,82,44],[83,42,82,48,"segment"],[83,49,82,55],[83,50,82,56,"endsWith"],[83,58,82,64],[83,59,82,65],[83,62,82,68],[83,63,82,69],[83,64,82,70],[84,4,83,8],[84,5,83,9],[84,6,83,10],[84,7,84,13,"flatMap"],[84,14,84,20],[84,15,84,21],[84,25,84,22,"segment"],[84,32,84,29],[84,34,84,34],[85,6,85,12],[85,10,85,16,"segment"],[85,17,85,23],[85,22,85,28],[85,34,85,40],[85,36,85,42],[86,8,86,16],[86,12,86,22,"notFoundPath"],[86,24,86,34],[86,27,86,37,"params"],[86,33,86,43],[86,34,86,44],[86,45,86,55],[86,46,86,56],[87,8,87,16,"pathParams"],[87,18,87,26],[87,19,87,27,"add"],[87,22,87,30],[87,23,87,31],[87,34,87,42],[87,35,87,43],[88,8,88,16],[88,12,88,20],[88,19,88,27,"notFoundPath"],[88,31,88,39],[88,36,88,44],[88,47,88,55],[88,49,88,57],[89,10,89,20],[90,10,90,20],[90,17,90,27],[90,19,90,29],[91,8,91,16],[91,9,91,17],[91,15,92,21],[91,19,92,25,"Array"],[91,24,92,30],[91,25,92,31,"isArray"],[91,32,92,38],[91,33,92,39,"notFoundPath"],[91,45,92,51],[91,46,92,52],[91,48,92,54],[92,10,93,20],[92,17,93,27,"notFoundPath"],[92,29,93,39],[93,8,94,16],[93,9,94,17],[93,15,95,21],[94,10,96,20],[94,17,96,27],[94,18,96,28,"notFoundPath"],[94,30,96,40],[94,31,96,41],[95,8,97,16],[96,6,98,12],[96,7,98,13],[96,13,99,17],[96,17,99,21,"segment"],[96,24,99,28],[96,25,99,29,"startsWith"],[96,35,99,39],[96,36,99,40],[96,42,99,46],[96,43,99,47],[96,47,99,51,"segment"],[96,54,99,58],[96,55,99,59,"endsWith"],[96,63,99,67],[96,64,99,68],[96,67,99,71],[96,68,99,72],[96,70,99,74],[97,8,100,16],[97,12,100,20,"paramName"],[97,21,100,29],[97,24,100,32,"segment"],[97,31,100,39],[97,32,100,40,"slice"],[97,37,100,45],[97,38,100,46],[97,39,100,47],[97,41,100,49],[97,42,100,50],[97,43,100,51],[97,44,100,52],[98,8,101,16],[99,8,102,16],[99,12,102,20,"paramName"],[99,21,102,29],[99,22,102,30,"endsWith"],[99,30,102,38],[99,31,102,39],[99,34,102,42],[99,35,102,43],[99,37,102,45],[100,10,103,20,"paramName"],[100,19,103,29],[100,22,103,32,"paramName"],[100,31,103,41],[100,32,103,42,"slice"],[100,37,103,47],[100,38,103,48],[100,39,103,49],[100,41,103,51],[100,42,103,52],[100,43,103,53],[100,44,103,54],[101,8,104,16],[102,8,105,16],[102,12,105,22,"values"],[102,18,105,28],[102,21,105,31,"params"],[102,27,105,37],[102,28,105,38,"paramName"],[102,37,105,47],[102,38,105,48],[103,8,106,16,"pathParams"],[103,18,106,26],[103,19,106,27,"add"],[103,22,106,30],[103,23,106,31,"paramName"],[103,32,106,40],[103,33,106,41],[104,8,107,16],[105,8,108,16],[105,15,108,23,"values"],[105,21,108,29],[105,25,108,33],[105,27,108,35],[106,6,109,12],[106,7,109,13],[106,13,110,17],[106,17,110,21,"segment"],[106,24,110,28],[106,25,110,29,"startsWith"],[106,35,110,39],[106,36,110,40],[106,39,110,43],[106,40,110,44],[106,44,110,48,"segment"],[106,51,110,55],[106,52,110,56,"endsWith"],[106,60,110,64],[106,61,110,65],[106,64,110,68],[106,65,110,69],[106,67,110,71],[107,8,111,16],[107,12,111,22,"paramName"],[107,22,111,31],[107,25,111,34,"segment"],[107,32,111,41],[107,33,111,42,"slice"],[107,38,111,47],[107,39,111,48],[107,40,111,49],[107,42,111,51],[107,43,111,52],[107,44,111,53],[107,45,111,54],[108,8,112,16],[108,12,112,22,"value"],[108,17,112,27],[108,20,112,30,"params"],[108,26,112,36],[108,27,112,37,"paramName"],[108,37,112,46],[108,38,112,47],[109,8,113,16,"pathParams"],[109,18,113,26],[109,19,113,27,"add"],[109,22,113,30],[109,23,113,31,"paramName"],[109,33,113,40],[109,34,113,41],[110,8,114,16],[111,8,115,16],[111,15,115,23,"value"],[111,20,115,28],[111,23,115,31],[111,24,115,32,"value"],[111,29,115,37],[111,30,115,38],[111,33,115,41],[111,35,115,43],[112,6,116,12],[112,7,116,13],[112,13,117,17],[113,8,118,16],[113,15,118,23],[113,16,118,24,"segment"],[113,23,118,31],[113,24,118,32],[114,6,119,12],[115,4,120,8],[115,5,120,9],[115,6,120,10],[115,7,121,13,"join"],[115,11,121,17],[115,12,121,18],[115,15,121,21],[115,16,121,22],[116,4,122,4],[116,8,122,10,"searchParams"],[116,20,122,22],[116,23,122,25],[116,27,122,29,"URLSearchParams"],[116,42,122,44],[116,43,122,45,"Object"],[116,49,122,51],[116,50,122,52,"entries"],[116,57,122,59],[116,58,122,60,"params"],[116,64,122,66],[116,65,122,67],[116,66,122,68,"flatMap"],[116,73,122,75],[116,74,122,76],[116,84,122,76,"_ref3"],[116,89,122,76],[116,91,122,94],[117,6,122,94],[117,10,122,94,"_ref4"],[117,15,122,94],[117,18,122,94,"_slicedToArray"],[117,32,122,94],[117,33,122,94,"_ref3"],[117,38,122,94],[118,8,122,78,"key"],[118,11,122,81],[118,14,122,81,"_ref4"],[118,19,122,81],[119,8,122,83,"value"],[119,13,122,88],[119,16,122,88,"_ref4"],[119,21,122,88],[120,6,123,8],[121,6,124,8],[121,10,124,12,"pathParams"],[121,20,124,22],[121,21,124,23,"has"],[121,24,124,26],[121,25,124,27,"key"],[121,28,124,30],[121,29,124,31],[121,31,124,33],[122,8,125,12],[122,15,125,19],[122,17,125,21],[123,6,126,8],[123,7,126,9],[123,13,127,13],[123,17,127,17,"Array"],[123,22,127,22],[123,23,127,23,"isArray"],[123,30,127,30],[123,31,127,31,"value"],[123,36,127,36],[123,37,127,37],[123,39,127,39],[124,8,128,12],[124,15,128,19,"value"],[124,20,128,24],[124,21,128,25,"map"],[124,24,128,28],[124,25,128,29],[124,35,128,30,"v"],[124,36,128,31],[125,10,128,31],[125,17,128,36],[125,18,128,37,"key"],[125,21,128,40],[125,23,128,42,"v"],[125,24,128,43],[125,25,128,44],[126,8,128,44],[126,10,128,45],[127,6,129,8],[128,6,130,8],[128,13,130,15],[128,14,130,16],[128,15,130,17,"key"],[128,18,130,20],[128,20,130,22,"value"],[128,25,130,27],[128,26,130,28],[128,27,130,29],[129,4,131,4],[129,5,131,5],[129,6,131,6],[129,7,131,7],[130,4,132,4],[130,8,132,8,"hash"],[130,12,132,12],[131,4,133,4],[131,8,133,8,"searchParams"],[131,20,133,20],[131,21,133,21,"has"],[131,24,133,24],[131,25,133,25],[131,28,133,28],[131,29,133,29],[131,31,133,31],[132,6,134,8,"hash"],[132,10,134,12],[132,13,134,15,"searchParams"],[132,25,134,27],[132,26,134,28,"get"],[132,29,134,31],[132,30,134,32],[132,33,134,35],[132,34,134,36],[132,38,134,40,"undefined"],[132,47,134,49],[133,6,135,8,"searchParams"],[133,18,135,20],[133,19,135,21,"delete"],[133,25,135,27],[133,26,135,28],[133,29,135,31],[133,30,135,32],[134,4,136,4],[135,4,137,4],[136,4,138,4],[136,8,138,10,"searchParamString"],[136,25,138,27],[136,28,138,30,"searchParams"],[136,40,138,42],[136,41,138,43,"toString"],[136,49,138,51],[136,50,138,52],[136,51,138,53],[137,4,139,4],[137,8,139,8,"pathnameWithParams"],[137,26,139,26],[137,29,139,29,"searchParamString"],[137,46,139,46],[137,49,139,49,"pathname"],[137,57,139,57],[137,60,139,60],[137,63,139,63],[137,66,139,66,"searchParamString"],[137,83,139,83],[137,86,139,86,"pathname"],[137,94,139,94],[138,4,140,4,"pathnameWithParams"],[138,22,140,22],[138,25,140,25,"hash"],[138,29,140,29],[138,32,140,32,"pathnameWithParams"],[138,50,140,50],[138,53,140,53],[138,56,140,56],[138,59,140,59,"hash"],[138,63,140,63],[138,66,140,66,"pathnameWithParams"],[138,84,140,84],[139,4,141,4],[139,11,141,11],[140,6,142,8,"segments"],[140,14,142,16],[140,16,142,8,"segments"],[140,24,142,16],[141,6,143,8,"pathname"],[141,14,143,16],[141,16,143,8,"pathname"],[141,24,143,16],[142,6,144,8,"params"],[142,12,144,14],[142,14,144,8,"params"],[142,20,144,14],[143,6,145,8,"unstable_globalHref"],[143,25,145,27],[143,27,145,29],[143,28,145,30],[143,29,145,31],[143,31,145,33,"getPathFromState_forks_1"],[143,55,145,57],[143,56,145,58,"appendBaseUrl"],[143,69,145,71],[143,71,145,73,"pathnameWithParams"],[143,89,145,91],[143,90,145,92],[144,6,146,8,"searchParams"],[144,18,146,20],[144,20,146,8,"searchParams"],[144,32,146,20],[145,6,147,8,"pathnameWithParams"],[145,24,147,26],[145,26,147,8,"pathnameWithParams"],[145,44,147,26],[146,6,148,8],[147,6,149,8,"isIndex"],[147,13,149,15],[147,15,149,17],[148,4,150,4],[148,5,150,5],[149,2,151,0],[150,2,152,0],[150,11,152,9,"safeDecodeURIComponent"],[150,33,152,31,"safeDecodeURIComponent"],[150,34,152,32,"value"],[150,39,152,37],[150,41,152,39],[151,4,153,4],[151,8,153,8],[152,6,154,8],[152,13,154,15],[152,20,154,22,"value"],[152,25,154,27],[152,30,154,32],[152,38,154,40],[152,41,154,43,"decodeURIComponent"],[152,59,154,61],[152,60,154,62,"value"],[152,65,154,67],[152,66,154,68],[152,69,154,71,"value"],[152,74,154,76],[153,4,155,4],[153,5,155,5],[153,6,156,4],[153,13,156,4,"_unused"],[153,20,156,4],[153,22,156,10],[154,6,157,8],[155,6,158,8],[155,13,158,15,"value"],[155,18,158,20],[156,4,159,4],[157,2,160,0],[158,0,160,1],[158,3]],"functionMap":{"names":["<global>","getRouteInfoFromState","Object.entries.map$argument_0","value.map$argument_0","segments.filter$argument_0","segments.filter.flatMap$argument_0","Object.entries.flatMap$argument_0","safeDecodeURIComponent"],"mappings":"AAA;ACgB;2DCoB;mCCK,gCD;KDK;oBGkC;SHE;qBIC;SJoC;4EKE;6BHM,eG;KLG;CDoB;AOC;CPQ"},"hasCjsExports":true},"type":"js/module"}]}