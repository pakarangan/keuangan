{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\").default;\n  var _toConsumableArray = require(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\").default;\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.parsePathAndParamsFromExpoGoLink = parsePathAndParamsFromExpoGoLink;\n  exports.parsePathFromExpoGoLink = parsePathFromExpoGoLink;\n  exports.extractExpoPathFromURL = extractExpoPathFromURL;\n  function parsePathAndParamsFromExpoGoLink(url) {\n    var _results$, _results$2;\n    // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n    // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n    var href = parsePathFromExpoGoLink(url);\n    var results = href.match(/([^?]*)(\\?.*)?/);\n    return {\n      pathname: (_results$ = results == null ? void 0 : results[1]) != null ? _results$ : '',\n      queryString: (_results$2 = results == null ? void 0 : results[2]) != null ? _results$2 : ''\n    };\n  }\n  function parsePathFromExpoGoLink(url) {\n    var _url$match$, _url$match;\n    // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n    // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n    return (_url$match$ = (_url$match = url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)) == null ? void 0 : _url$match[1]) != null ? _url$match$ : '';\n  }\n  // This is only run on native.\n  function extractExactPathFromURL(url) {\n    var _globalThis$expo;\n    if (\n    // If a universal link / app link / web URL is used, we should use the path\n    // from the URL, while stripping the origin.\n    url.match(/^https?:\\/\\//)) {\n      var _URL = new URL(url),\n        origin = _URL.origin,\n        href = _URL.href,\n        hostname = _URL.hostname;\n      if (hostname === 'exp.host' || hostname === 'u.expo.dev') {\n        // These are QR code generate deep-link that always like to the '/' path\n        // TODO: In the future, QR code may link to a specific path and this logic will need to be udpated\n        return '';\n      }\n      return href.replace(origin, '');\n    }\n    var isExpoGo = typeof expo !== 'undefined' && ((_globalThis$expo = globalThis.expo) == null || (_globalThis$expo = _globalThis$expo.modules) == null ? void 0 : _globalThis$expo.ExpoGo);\n    // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\n    if (isExpoGo &&\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\n    // are passed through to other apps in Expo Go.\n    url.match(/^exp(s)?:\\/\\//)) {\n      var _url$match2;\n      var pathname = parsePathFromExpoGoLink(url);\n      if (pathname) {\n        return fromDeepLink('a://' + pathname);\n      }\n      // Match the `?.*` segment of the URL.\n      var queryParams = (_url$match2 = url.match(/exps?:\\/\\/.*\\?(.*)/)) == null ? void 0 : _url$match2[1];\n      if (queryParams) {\n        return fromDeepLink('a://?' + queryParams);\n      }\n      return '';\n    }\n    // TODO: Support dev client URLs\n    return fromDeepLink(url);\n  }\n  /** Major hack to support the makeshift expo-development-client system. */\n  function isExpoDevelopmentClient(url) {\n    return url.hostname === 'expo-development-client';\n  }\n  function fromDeepLink(url) {\n    var res;\n    try {\n      // This is for all standard deep links, e.g. `foobar://` where everything\n      // after the `://` is the path.\n      res = new URL(url);\n    } catch (_unused) {\n      /**\n       * We failed to parse the URL. This can occur for a variety of reasons, including:\n       * - Its a partial URL (e.g. `/route?query=param`).\n       * - It has a valid App scheme, but the scheme isn't a valid URL scheme (e.g. `my_app://`)\n       */\n      /**\n       * App schemes are not valid URL schemes, so they will fail to parse.\n       * We need to strip the scheme from these URLs\n       */\n      return url.replace(/^[^:]+:\\/\\//, '');\n    }\n    if (isExpoDevelopmentClient(res)) {\n      if (!res.searchParams.get('url')) {\n        return '';\n      }\n      var incomingUrl = res.searchParams.get('url');\n      return extractExactPathFromURL(decodeURI(incomingUrl));\n    }\n    var results = '';\n    if (res.host) {\n      results += res.host;\n    }\n    if (res.pathname) {\n      results += res.pathname;\n    }\n    var qs = !res.search ? '' :\n    // @ts-ignore: `entries` is not on `URLSearchParams` in some typechecks.\n    _toConsumableArray(res.searchParams.entries()).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        k = _ref2[0],\n        v = _ref2[1];\n      return `${k}=${decodeURIComponent(v)}`;\n    }).join('&');\n    if (qs) {\n      results += '?' + qs;\n    }\n    return results;\n  }\n  function extractExpoPathFromURL(_prefixes) {\n    var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    return extractExactPathFromURL(url)\n    // TODO: We should get rid of this, dropping specificities is not good\n    .replace(/^\\//, '');\n  }\n});","lineCount":123,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[4,90,1,13,"default"],[4,97,1,13],[5,2,1,13],[5,6,1,13,"_toConsumableArray"],[5,24,1,13],[5,27,1,13,"require"],[5,34,1,13],[5,35,1,13,"_dependencyMap"],[5,49,1,13],[5,98,1,13,"default"],[5,105,1,13],[6,2,2,0,"Object"],[6,8,2,6],[6,9,2,7,"defineProperty"],[6,23,2,21],[6,24,2,22,"exports"],[6,31,2,29],[6,33,2,31],[6,45,2,43],[6,47,2,45],[7,4,2,47,"value"],[7,9,2,52],[7,11,2,54],[8,2,2,59],[8,3,2,60],[8,4,2,61],[9,2,3,0,"exports"],[9,9,3,7],[9,10,3,8,"parsePathAndParamsFromExpoGoLink"],[9,42,3,40],[9,45,3,43,"parsePathAndParamsFromExpoGoLink"],[9,77,3,75],[10,2,4,0,"exports"],[10,9,4,7],[10,10,4,8,"parsePathFromExpoGoLink"],[10,33,4,31],[10,36,4,34,"parsePathFromExpoGoLink"],[10,59,4,57],[11,2,5,0,"exports"],[11,9,5,7],[11,10,5,8,"extractExpoPathFromURL"],[11,32,5,30],[11,35,5,33,"extractExpoPathFromURL"],[11,57,5,55],[12,2,6,0],[12,11,6,9,"parsePathAndParamsFromExpoGoLink"],[12,43,6,41,"parsePathAndParamsFromExpoGoLink"],[12,44,6,42,"url"],[12,47,6,45],[12,49,6,47],[13,4,6,47],[13,8,6,47,"_results$"],[13,17,6,47],[13,19,6,47,"_results$2"],[13,29,6,47],[14,4,7,4],[15,4,8,4],[16,4,9,4],[16,8,9,10,"href"],[16,12,9,14],[16,15,9,17,"parsePathFromExpoGoLink"],[16,38,9,40],[16,39,9,41,"url"],[16,42,9,44],[16,43,9,45],[17,4,10,4],[17,8,10,10,"results"],[17,15,10,17],[17,18,10,20,"href"],[17,22,10,24],[17,23,10,25,"match"],[17,28,10,30],[17,29,10,31],[17,45,10,47],[17,46,10,48],[18,4,11,4],[18,11,11,11],[19,6,12,8,"pathname"],[19,14,12,16],[19,17,12,16,"_results$"],[19,26,12,16],[19,29,12,18,"results"],[19,36,12,25],[19,56,12,18,"results"],[19,63,12,25],[19,64,12,28],[19,65,12,29],[19,66,12,30],[19,78,12,30,"_results$"],[19,87,12,30],[19,90,12,34],[19,92,12,36],[20,6,13,8,"queryString"],[20,17,13,19],[20,20,13,19,"_results$2"],[20,30,13,19],[20,33,13,21,"results"],[20,40,13,28],[20,60,13,21,"results"],[20,67,13,28],[20,68,13,31],[20,69,13,32],[20,70,13,33],[20,82,13,33,"_results$2"],[20,92,13,33],[20,95,13,37],[21,4,14,4],[21,5,14,5],[22,2,15,0],[23,2,16,0],[23,11,16,9,"parsePathFromExpoGoLink"],[23,34,16,32,"parsePathFromExpoGoLink"],[23,35,16,33,"url"],[23,38,16,36],[23,40,16,38],[24,4,16,38],[24,8,16,38,"_url$match$"],[24,19,16,38],[24,21,16,38,"_url$match"],[24,31,16,38],[25,4,17,4],[26,4,18,4],[27,4,19,4],[27,12,19,4,"_url$match$"],[27,23,19,4],[27,27,19,4,"_url$match"],[27,37,19,4],[27,40,19,11,"url"],[27,43,19,14],[27,44,19,15,"match"],[27,49,19,20],[27,50,19,21],[27,75,19,46],[27,76,19,47],[27,97,19,11,"_url$match"],[27,107,19,11],[27,108,19,50],[27,109,19,51],[27,110,19,52],[27,122,19,52,"_url$match$"],[27,133,19,52],[27,136,19,56],[27,138,19,58],[28,2,20,0],[29,2,21,0],[30,2,22,0],[30,11,22,9,"extractExactPathFromURL"],[30,34,22,32,"extractExactPathFromURL"],[30,35,22,33,"url"],[30,38,22,36],[30,40,22,38],[31,4,22,38],[31,8,22,38,"_globalThis$expo"],[31,24,22,38],[32,4,23,4],[33,4,24,4],[34,4,25,4],[35,4,26,4,"url"],[35,7,26,7],[35,8,26,8,"match"],[35,13,26,13],[35,14,26,14],[35,28,26,28],[35,29,26,29],[35,31,26,31],[36,6,27,8],[36,10,27,8,"_URL"],[36,14,27,8],[36,17,27,43],[36,21,27,47,"URL"],[36,24,27,50],[36,25,27,51,"url"],[36,28,27,54],[36,29,27,55],[37,8,27,16,"origin"],[37,14,27,22],[37,17,27,22,"_URL"],[37,21,27,22],[37,22,27,16,"origin"],[37,28,27,22],[38,8,27,24,"href"],[38,12,27,28],[38,15,27,28,"_URL"],[38,19,27,28],[38,20,27,24,"href"],[38,24,27,28],[39,8,27,30,"hostname"],[39,16,27,38],[39,19,27,38,"_URL"],[39,23,27,38],[39,24,27,30,"hostname"],[39,32,27,38],[40,6,28,8],[40,10,28,12,"hostname"],[40,18,28,20],[40,23,28,25],[40,33,28,35],[40,37,28,39,"hostname"],[40,45,28,47],[40,50,28,52],[40,62,28,64],[40,64,28,66],[41,8,29,12],[42,8,30,12],[43,8,31,12],[43,15,31,19],[43,17,31,21],[44,6,32,8],[45,6,33,8],[45,13,33,15,"href"],[45,17,33,19],[45,18,33,20,"replace"],[45,25,33,27],[45,26,33,28,"origin"],[45,32,33,34],[45,34,33,36],[45,36,33,38],[45,37,33,39],[46,4,34,4],[47,4,35,4],[47,8,35,10,"isExpoGo"],[47,16,35,18],[47,19,35,21],[47,26,35,28,"expo"],[47,30,35,32],[47,35,35,37],[47,46,35,48],[47,52,35,48,"_globalThis$expo"],[47,68,35,48],[47,71,35,52,"globalThis"],[47,81,35,62],[47,82,35,63,"expo"],[47,86,35,67],[47,100,35,67,"_globalThis$expo"],[47,116,35,67],[47,119,35,52,"_globalThis$expo"],[47,135,35,52],[47,136,35,69,"modules"],[47,143,35,76],[47,164,35,52,"_globalThis$expo"],[47,180,35,52],[47,181,35,78,"ExpoGo"],[47,187,35,84],[48,4,36,4],[49,4,37,4],[49,8,37,8,"isExpoGo"],[49,16,37,16],[50,4,38,8],[51,4,39,8],[52,4,40,8,"url"],[52,7,40,11],[52,8,40,12,"match"],[52,13,40,17],[52,14,40,18],[52,29,40,33],[52,30,40,34],[52,32,40,36],[53,6,40,36],[53,10,40,36,"_url$match2"],[53,21,40,36],[54,6,41,8],[54,10,41,14,"pathname"],[54,18,41,22],[54,21,41,25,"parsePathFromExpoGoLink"],[54,44,41,48],[54,45,41,49,"url"],[54,48,41,52],[54,49,41,53],[55,6,42,8],[55,10,42,12,"pathname"],[55,18,42,20],[55,20,42,22],[56,8,43,12],[56,15,43,19,"fromDeepLink"],[56,27,43,31],[56,28,43,32],[56,34,43,38],[56,37,43,41,"pathname"],[56,45,43,49],[56,46,43,50],[57,6,44,8],[58,6,45,8],[59,6,46,8],[59,10,46,14,"queryParams"],[59,21,46,25],[59,25,46,25,"_url$match2"],[59,36,46,25],[59,39,46,28,"url"],[59,42,46,31],[59,43,46,32,"match"],[59,48,46,37],[59,49,46,38],[59,69,46,58],[59,70,46,59],[59,91,46,28,"_url$match2"],[59,102,46,28],[59,103,46,62],[59,104,46,63],[59,105,46,64],[60,6,47,8],[60,10,47,12,"queryParams"],[60,21,47,23],[60,23,47,25],[61,8,48,12],[61,15,48,19,"fromDeepLink"],[61,27,48,31],[61,28,48,32],[61,35,48,39],[61,38,48,42,"queryParams"],[61,49,48,53],[61,50,48,54],[62,6,49,8],[63,6,50,8],[63,13,50,15],[63,15,50,17],[64,4,51,4],[65,4,52,4],[66,4,53,4],[66,11,53,11,"fromDeepLink"],[66,23,53,23],[66,24,53,24,"url"],[66,27,53,27],[66,28,53,28],[67,2,54,0],[68,2,55,0],[69,2,56,0],[69,11,56,9,"isExpoDevelopmentClient"],[69,34,56,32,"isExpoDevelopmentClient"],[69,35,56,33,"url"],[69,38,56,36],[69,40,56,38],[70,4,57,4],[70,11,57,11,"url"],[70,14,57,14],[70,15,57,15,"hostname"],[70,23,57,23],[70,28,57,28],[70,53,57,53],[71,2,58,0],[72,2,59,0],[72,11,59,9,"fromDeepLink"],[72,23,59,21,"fromDeepLink"],[72,24,59,22,"url"],[72,27,59,25],[72,29,59,27],[73,4,60,4],[73,8,60,8,"res"],[73,11,60,11],[74,4,61,4],[74,8,61,8],[75,6,62,8],[76,6,63,8],[77,6,64,8,"res"],[77,9,64,11],[77,12,64,14],[77,16,64,18,"URL"],[77,19,64,21],[77,20,64,22,"url"],[77,23,64,25],[77,24,64,26],[78,4,65,4],[78,5,65,5],[78,6,66,4],[78,13,66,4,"_unused"],[78,20,66,4],[78,22,66,10],[79,6,67,8],[80,0,68,0],[81,0,69,0],[82,0,70,0],[83,0,71,0],[84,6,72,8],[85,0,73,0],[86,0,74,0],[87,0,75,0],[88,6,76,8],[88,13,76,15,"url"],[88,16,76,18],[88,17,76,19,"replace"],[88,24,76,26],[88,25,76,27],[88,38,76,40],[88,40,76,42],[88,42,76,44],[88,43,76,45],[89,4,77,4],[90,4,78,4],[90,8,78,8,"isExpoDevelopmentClient"],[90,31,78,31],[90,32,78,32,"res"],[90,35,78,35],[90,36,78,36],[90,38,78,38],[91,6,79,8],[91,10,79,12],[91,11,79,13,"res"],[91,14,79,16],[91,15,79,17,"searchParams"],[91,27,79,29],[91,28,79,30,"get"],[91,31,79,33],[91,32,79,34],[91,37,79,39],[91,38,79,40],[91,40,79,42],[92,8,80,12],[92,15,80,19],[92,17,80,21],[93,6,81,8],[94,6,82,8],[94,10,82,14,"incomingUrl"],[94,21,82,25],[94,24,82,28,"res"],[94,27,82,31],[94,28,82,32,"searchParams"],[94,40,82,44],[94,41,82,45,"get"],[94,44,82,48],[94,45,82,49],[94,50,82,54],[94,51,82,55],[95,6,83,8],[95,13,83,15,"extractExactPathFromURL"],[95,36,83,38],[95,37,83,39,"decodeURI"],[95,46,83,48],[95,47,83,49,"incomingUrl"],[95,58,83,60],[95,59,83,61],[95,60,83,62],[96,4,84,4],[97,4,85,4],[97,8,85,8,"results"],[97,15,85,15],[97,18,85,18],[97,20,85,20],[98,4,86,4],[98,8,86,8,"res"],[98,11,86,11],[98,12,86,12,"host"],[98,16,86,16],[98,18,86,18],[99,6,87,8,"results"],[99,13,87,15],[99,17,87,19,"res"],[99,20,87,22],[99,21,87,23,"host"],[99,25,87,27],[100,4,88,4],[101,4,89,4],[101,8,89,8,"res"],[101,11,89,11],[101,12,89,12,"pathname"],[101,20,89,20],[101,22,89,22],[102,6,90,8,"results"],[102,13,90,15],[102,17,90,19,"res"],[102,20,90,22],[102,21,90,23,"pathname"],[102,29,90,31],[103,4,91,4],[104,4,92,4],[104,8,92,10,"qs"],[104,10,92,12],[104,13,92,15],[104,14,92,16,"res"],[104,17,92,19],[104,18,92,20,"search"],[104,24,92,26],[104,27,93,10],[104,29,93,12],[105,4,94,10],[106,4,95,12,"_toConsumableArray"],[106,22,95,12],[106,23,95,16,"res"],[106,26,95,19],[106,27,95,20,"searchParams"],[106,39,95,32],[106,40,95,33,"entries"],[106,47,95,40],[106,48,95,41],[106,49,95,42],[106,51,95,44,"map"],[106,54,95,47],[106,55,95,48],[106,65,95,48,"_ref"],[106,69,95,48],[107,6,95,48],[107,10,95,48,"_ref2"],[107,15,95,48],[107,18,95,48,"_slicedToArray"],[107,32,95,48],[107,33,95,48,"_ref"],[107,37,95,48],[108,8,95,50,"k"],[108,9,95,51],[108,12,95,51,"_ref2"],[108,17,95,51],[109,8,95,53,"v"],[109,9,95,54],[109,12,95,54,"_ref2"],[109,17,95,54],[110,6,95,54],[110,13,95,60],[110,16,95,63,"k"],[110,17,95,64],[110,21,95,68,"decodeURIComponent"],[110,39,95,86],[110,40,95,87,"v"],[110,41,95,88],[110,42,95,89],[110,44,95,91],[111,4,95,91],[111,6,95,92],[111,7,95,93,"join"],[111,11,95,97],[111,12,95,98],[111,15,95,101],[111,16,95,102],[112,4,96,4],[112,8,96,8,"qs"],[112,10,96,10],[112,12,96,12],[113,6,97,8,"results"],[113,13,97,15],[113,17,97,19],[113,20,97,22],[113,23,97,25,"qs"],[113,25,97,27],[114,4,98,4],[115,4,99,4],[115,11,99,11,"results"],[115,18,99,18],[116,2,100,0],[117,2,101,0],[117,11,101,9,"extractExpoPathFromURL"],[117,33,101,31,"extractExpoPathFromURL"],[117,34,101,32,"_prefixes"],[117,43,101,41],[117,45,101,53],[118,4,101,53],[118,8,101,43,"url"],[118,11,101,46],[118,14,101,46,"arguments"],[118,23,101,46],[118,24,101,46,"length"],[118,30,101,46],[118,38,101,46,"arguments"],[118,47,101,46],[118,55,101,46,"undefined"],[118,64,101,46],[118,67,101,46,"arguments"],[118,76,101,46],[118,82,101,49],[118,84,101,51],[119,4,102,4],[119,11,102,12,"extractExactPathFromURL"],[119,34,102,35],[119,35,102,36,"url"],[119,38,102,39],[120,4,103,8],[121,4,103,8],[121,5,104,9,"replace"],[121,12,104,16],[121,13,104,17],[121,18,104,22],[121,20,104,24],[121,22,104,26],[121,23,104,27],[122,2,105,0],[123,0,105,1],[123,3]],"functionMap":{"names":["<global>","parsePathAndParamsFromExpoGoLink","parsePathFromExpoGoLink","extractExactPathFromURL","isExpoDevelopmentClient","fromDeepLink","map$argument_0","extractExpoPathFromURL"],"mappings":"AAA;ACK;CDS;AEC;CFI;AGE;CHgC;AIE;CJE;AKC;gDCoC,2CD;CLK;AOC;CPI"},"hasCjsExports":true},"type":"js/module"}]}