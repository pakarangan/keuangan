{"dependencies":[{"name":"./getRoutesCore","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":24,"index":235},"end":{"line":6,"column":50,"index":261}},{"start":{"line":95,"column":22,"index":3984},"end":{"line":95,"column":48,"index":4010}}],"key":"gOO2v0sl1XvYI6QH2o9IVEEjbmQ=","exportNames":["*"],"imports":2}},{"name":"./views/Navigator","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":27,"column":33,"index":1282},"end":{"line":27,"column":61,"index":1310}}],"key":"PBpeZlMTHxnI1L+/mUlv77sLyo4=","exportNames":["*"],"imports":1}},{"name":"./views/Sitemap","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":59,"index":1874},"end":{"line":41,"column":85,"index":1900}}],"key":"G8ud5EPcJ8MF2dMhl1o+nfNHuTs=","exportNames":["*"],"imports":1}},{"name":"./views/Unmatched","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":56,"column":42,"index":2480},"end":{"line":56,"column":70,"index":2508}}],"key":"i1x8xpZw0K+kAMz1gUdMaXw0H74=","exportNames":["*"],"imports":1}},{"name":"./getRoutesRedirects","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":71,"column":31,"index":3113},"end":{"line":71,"column":62,"index":3144}},{"start":{"line":80,"column":31,"index":3492},"end":{"line":80,"column":62,"index":3523}}],"key":"E6xJvmMQ8Tg9oU66GfkFALUrP4w=","exportNames":["*"],"imports":2}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.extrapolateGroups = exports.generateDynamic = void 0;\n  exports.getRoutes = getRoutes;\n  exports.getExactRoutes = getExactRoutes;\n  var getRoutesCore_1 = require(_dependencyMap[0], \"./getRoutesCore\");\n  /**\n   * Given a Metro context module, return an array of nested routes.\n   *\n   * This is a two step process:\n   *  1. Convert the RequireContext keys (file paths) into a directory tree.\n   *      - This should extrapolate array syntax into multiple routes\n   *      - Routes are given a specificity score\n   *  2. Flatten the directory tree into routes\n   *      - Routes in directories without _layout files are hoisted to the nearest _layout\n   *      - The name of the route is relative to the nearest _layout\n   *      - If multiple routes have the same name, the most specific route is used\n   */\n  function getRoutes(contextModule) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return (0, getRoutesCore_1.getRoutes)(contextModule, Object.assign({\n      getSystemRoute: function getSystemRoute(_ref) {\n        var route = _ref.route,\n          type = _ref.type,\n          defaults = _ref.defaults,\n          redirectConfig = _ref.redirectConfig,\n          rewriteConfig = _ref.rewriteConfig;\n        if (route === '' && type === 'layout') {\n          // Root layout when no layout is defined.\n          return {\n            type: 'layout',\n            loadRoute: function loadRoute() {\n              return {\n                default: require(_dependencyMap[1], \"./views/Navigator\").DefaultNavigator\n              };\n            },\n            // Generate a fake file name for the directory\n            contextKey: 'expo-router/build/views/Navigator.js',\n            route: '',\n            generated: true,\n            dynamic: null,\n            children: []\n          };\n        } else if (route === '_sitemap' && type === 'route') {\n          return {\n            loadRoute: function loadRoute() {\n              var _require = require(_dependencyMap[2], \"./views/Sitemap\"),\n                Sitemap = _require.Sitemap,\n                getNavOptions = _require.getNavOptions;\n              return {\n                default: Sitemap,\n                getNavOptions: getNavOptions\n              };\n            },\n            route: '_sitemap',\n            type: 'route',\n            contextKey: 'expo-router/build/views/Sitemap.js',\n            generated: true,\n            internal: true,\n            dynamic: null,\n            children: []\n          };\n        } else if (route === '+not-found' && type === 'route') {\n          return {\n            loadRoute: function loadRoute() {\n              return {\n                default: require(_dependencyMap[3], \"./views/Unmatched\").Unmatched\n              };\n            },\n            type: 'route',\n            route: '+not-found',\n            contextKey: 'expo-router/build/views/Unmatched.js',\n            generated: true,\n            internal: true,\n            dynamic: [{\n              name: '+not-found',\n              deep: true,\n              notFound: true\n            }],\n            children: []\n          };\n        } else if (type === 'redirect' && redirectConfig && defaults) {\n          return Object.assign({}, defaults, {\n            loadRoute: function loadRoute() {\n              return require(_dependencyMap[4], \"./getRoutesRedirects\").getRedirectModule(redirectConfig);\n            }\n          });\n        } else if (type === 'rewrite' && rewriteConfig && defaults) {\n          return Object.assign({}, defaults, {\n            loadRoute: function loadRoute() {\n              // TODO: Replace with rewrite module\n              return require(_dependencyMap[4], \"./getRoutesRedirects\").getRedirectModule(rewriteConfig);\n            }\n          });\n        }\n        throw new Error(`Unknown system route: ${route} and type: ${type} and redirectConfig: ${redirectConfig} and rewriteConfig: ${rewriteConfig}`);\n      }\n    }, options));\n  }\n  function getExactRoutes(contextModule) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return getRoutes(contextModule, Object.assign({}, options, {\n      skipGenerated: true\n    }));\n  }\n  var getRoutesCore_2 = require(_dependencyMap[0], \"./getRoutesCore\");\n  Object.defineProperty(exports, \"generateDynamic\", {\n    enumerable: true,\n    get: function get() {\n      return getRoutesCore_2.generateDynamic;\n    }\n  });\n  Object.defineProperty(exports, \"extrapolateGroups\", {\n    enumerable: true,\n    get: function get() {\n      return getRoutesCore_2.extrapolateGroups;\n    }\n  });\n});","lineCount":123,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"extrapolateGroups"],[7,27,3,25],[7,30,3,28,"exports"],[7,37,3,35],[7,38,3,36,"generateDynamic"],[7,53,3,51],[7,56,3,54],[7,61,3,59],[7,62,3,60],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"getRoutes"],[8,19,4,17],[8,22,4,20,"getRoutes"],[8,31,4,29],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"getExactRoutes"],[9,24,5,22],[9,27,5,25,"getExactRoutes"],[9,41,5,39],[10,2,6,0],[10,6,6,6,"getRoutesCore_1"],[10,21,6,21],[10,24,6,24,"require"],[10,31,6,31],[10,32,6,31,"_dependencyMap"],[10,46,6,31],[10,68,6,49],[10,69,6,50],[11,2,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,2,19,0],[23,11,19,9,"getRoutes"],[23,20,19,18,"getRoutes"],[23,21,19,19,"contextModule"],[23,34,19,32],[23,36,19,48],[24,4,19,48],[24,8,19,34,"options"],[24,15,19,41],[24,18,19,41,"arguments"],[24,27,19,41],[24,28,19,41,"length"],[24,34,19,41],[24,42,19,41,"arguments"],[24,51,19,41],[24,59,19,41,"undefined"],[24,68,19,41],[24,71,19,41,"arguments"],[24,80,19,41],[24,86,19,44],[24,87,19,45],[24,88,19,46],[25,4,20,4],[25,11,20,11],[25,12,20,12],[25,13,20,13],[25,15,20,15,"getRoutesCore_1"],[25,30,20,30],[25,31,20,31,"getRoutes"],[25,40,20,40],[25,42,20,42,"contextModule"],[25,55,20,55],[25,57,20,55,"Object"],[25,63,20,55],[25,64,20,55,"assign"],[25,70,20,55],[26,6,21,8,"getSystemRoute"],[26,20,21,22],[26,31,21,8,"getSystemRoute"],[26,45,21,22,"getSystemRoute"],[26,46,21,22,"_ref"],[26,50,21,22],[26,52,21,81],[27,8,21,81],[27,12,21,25,"route"],[27,17,21,30],[27,20,21,30,"_ref"],[27,24,21,30],[27,25,21,25,"route"],[27,30,21,30],[28,10,21,32,"type"],[28,14,21,36],[28,17,21,36,"_ref"],[28,21,21,36],[28,22,21,32,"type"],[28,26,21,36],[29,10,21,38,"defaults"],[29,18,21,46],[29,21,21,46,"_ref"],[29,25,21,46],[29,26,21,38,"defaults"],[29,34,21,46],[30,10,21,48,"redirectConfig"],[30,24,21,62],[30,27,21,62,"_ref"],[30,31,21,62],[30,32,21,48,"redirectConfig"],[30,46,21,62],[31,10,21,64,"rewriteConfig"],[31,23,21,77],[31,26,21,77,"_ref"],[31,30,21,77],[31,31,21,64,"rewriteConfig"],[31,44,21,77],[32,8,22,12],[32,12,22,16,"route"],[32,17,22,21],[32,22,22,26],[32,24,22,28],[32,28,22,32,"type"],[32,32,22,36],[32,37,22,41],[32,45,22,49],[32,47,22,51],[33,10,23,16],[34,10,24,16],[34,17,24,23],[35,12,25,20,"type"],[35,16,25,24],[35,18,25,26],[35,26,25,34],[36,12,26,20,"loadRoute"],[36,21,26,29],[36,23,26,31],[36,32,26,20,"loadRoute"],[36,41,26,29,"loadRoute"],[36,42,26,29],[37,14,26,29],[37,21,26,38],[38,16,27,24,"default"],[38,23,27,31],[38,25,27,33,"require"],[38,32,27,40],[38,33,27,40,"_dependencyMap"],[38,47,27,40],[38,71,27,60],[38,72,27,61],[38,73,28,29,"DefaultNavigator"],[39,14,29,20],[39,15,29,21],[40,12,29,21],[40,13,29,22],[41,12,30,20],[42,12,31,20,"contextKey"],[42,22,31,30],[42,24,31,32],[42,62,31,70],[43,12,32,20,"route"],[43,17,32,25],[43,19,32,27],[43,21,32,29],[44,12,33,20,"generated"],[44,21,33,29],[44,23,33,31],[44,27,33,35],[45,12,34,20,"dynamic"],[45,19,34,27],[45,21,34,29],[45,25,34,33],[46,12,35,20,"children"],[46,20,35,28],[46,22,35,30],[47,10,36,16],[47,11,36,17],[48,8,37,12],[48,9,37,13],[48,15,38,17],[48,19,38,21,"route"],[48,24,38,26],[48,29,38,31],[48,39,38,41],[48,43,38,45,"type"],[48,47,38,49],[48,52,38,54],[48,59,38,61],[48,61,38,63],[49,10,39,16],[49,17,39,23],[50,12,40,20,"loadRoute"],[50,21,40,29],[50,32,40,20,"loadRoute"],[50,41,40,29,"loadRoute"],[50,42,40,29],[50,44,40,32],[51,14,41,24],[51,18,41,24,"_require"],[51,26,41,24],[51,29,41,59,"require"],[51,36,41,66],[51,37,41,66,"_dependencyMap"],[51,51,41,66],[51,73,41,84],[51,74,41,85],[52,16,41,32,"Sitemap"],[52,23,41,39],[52,26,41,39,"_require"],[52,34,41,39],[52,35,41,32,"Sitemap"],[52,42,41,39],[53,16,41,41,"getNavOptions"],[53,29,41,54],[53,32,41,54,"_require"],[53,40,41,54],[53,41,41,41,"getNavOptions"],[53,54,41,54],[54,14,42,24],[54,21,42,31],[55,16,42,33,"default"],[55,23,42,40],[55,25,42,42,"Sitemap"],[55,32,42,49],[56,16,42,51,"getNavOptions"],[56,29,42,64],[56,31,42,51,"getNavOptions"],[57,14,42,65],[57,15,42,66],[58,12,43,20],[58,13,43,21],[59,12,44,20,"route"],[59,17,44,25],[59,19,44,27],[59,29,44,37],[60,12,45,20,"type"],[60,16,45,24],[60,18,45,26],[60,25,45,33],[61,12,46,20,"contextKey"],[61,22,46,30],[61,24,46,32],[61,60,46,68],[62,12,47,20,"generated"],[62,21,47,29],[62,23,47,31],[62,27,47,35],[63,12,48,20,"internal"],[63,20,48,28],[63,22,48,30],[63,26,48,34],[64,12,49,20,"dynamic"],[64,19,49,27],[64,21,49,29],[64,25,49,33],[65,12,50,20,"children"],[65,20,50,28],[65,22,50,30],[66,10,51,16],[66,11,51,17],[67,8,52,12],[67,9,52,13],[67,15,53,17],[67,19,53,21,"route"],[67,24,53,26],[67,29,53,31],[67,41,53,43],[67,45,53,47,"type"],[67,49,53,51],[67,54,53,56],[67,61,53,63],[67,63,53,65],[68,10,54,16],[68,17,54,23],[69,12,55,20,"loadRoute"],[69,21,55,29],[69,32,55,20,"loadRoute"],[69,41,55,29,"loadRoute"],[69,42,55,29],[69,44,55,32],[70,14,56,24],[70,21,56,31],[71,16,56,33,"default"],[71,23,56,40],[71,25,56,42,"require"],[71,32,56,49],[71,33,56,49,"_dependencyMap"],[71,47,56,49],[71,71,56,69],[71,72,56,70],[71,73,56,71,"Unmatched"],[72,14,56,81],[72,15,56,82],[73,12,57,20],[73,13,57,21],[74,12,58,20,"type"],[74,16,58,24],[74,18,58,26],[74,25,58,33],[75,12,59,20,"route"],[75,17,59,25],[75,19,59,27],[75,31,59,39],[76,12,60,20,"contextKey"],[76,22,60,30],[76,24,60,32],[76,62,60,70],[77,12,61,20,"generated"],[77,21,61,29],[77,23,61,31],[77,27,61,35],[78,12,62,20,"internal"],[78,20,62,28],[78,22,62,30],[78,26,62,34],[79,12,63,20,"dynamic"],[79,19,63,27],[79,21,63,29],[79,22,63,30],[80,14,63,32,"name"],[80,18,63,36],[80,20,63,38],[80,32,63,50],[81,14,63,52,"deep"],[81,18,63,56],[81,20,63,58],[81,24,63,62],[82,14,63,64,"notFound"],[82,22,63,72],[82,24,63,74],[83,12,63,79],[83,13,63,80],[83,14,63,81],[84,12,64,20,"children"],[84,20,64,28],[84,22,64,30],[85,10,65,16],[85,11,65,17],[86,8,66,12],[86,9,66,13],[86,15,67,17],[86,19,67,21,"type"],[86,23,67,25],[86,28,67,30],[86,38,67,40],[86,42,67,44,"redirectConfig"],[86,56,67,58],[86,60,67,62,"defaults"],[86,68,67,70],[86,70,67,72],[87,10,68,16],[87,17,68,16,"Object"],[87,23,68,16],[87,24,68,16,"assign"],[87,30,68,16],[87,35,69,23,"defaults"],[87,43,69,31],[88,12,70,20,"loadRoute"],[88,21,70,29],[88,32,70,20,"loadRoute"],[88,41,70,29,"loadRoute"],[88,42,70,29],[88,44,70,32],[89,14,71,24],[89,21,71,31,"require"],[89,28,71,38],[89,29,71,38,"_dependencyMap"],[89,43,71,38],[89,70,71,61],[89,71,71,62],[89,72,71,63,"getRedirectModule"],[89,89,71,80],[89,90,71,81,"redirectConfig"],[89,104,71,95],[89,105,71,96],[90,12,72,20],[91,10,72,21],[92,8,74,12],[92,9,74,13],[92,15,75,17],[92,19,75,21,"type"],[92,23,75,25],[92,28,75,30],[92,37,75,39],[92,41,75,43,"rewriteConfig"],[92,54,75,56],[92,58,75,60,"defaults"],[92,66,75,68],[92,68,75,70],[93,10,76,16],[93,17,76,16,"Object"],[93,23,76,16],[93,24,76,16,"assign"],[93,30,76,16],[93,35,77,23,"defaults"],[93,43,77,31],[94,12,78,20,"loadRoute"],[94,21,78,29],[94,32,78,20,"loadRoute"],[94,41,78,29,"loadRoute"],[94,42,78,29],[94,44,78,32],[95,14,79,24],[96,14,80,24],[96,21,80,31,"require"],[96,28,80,38],[96,29,80,38,"_dependencyMap"],[96,43,80,38],[96,70,80,61],[96,71,80,62],[96,72,80,63,"getRedirectModule"],[96,89,80,80],[96,90,80,81,"rewriteConfig"],[96,103,80,94],[96,104,80,95],[97,12,81,20],[98,10,81,21],[99,8,83,12],[100,8,84,12],[100,14,84,18],[100,18,84,22,"Error"],[100,23,84,27],[100,24,84,28],[100,49,84,53,"route"],[100,54,84,58],[100,68,84,72,"type"],[100,72,84,76],[100,96,84,100,"redirectConfig"],[100,110,84,114],[100,133,84,137,"rewriteConfig"],[100,146,84,150],[100,148,84,152],[100,149,84,153],[101,6,85,8],[102,4,85,9],[102,7,86,11,"options"],[102,14,86,18],[102,15,87,5],[102,16,87,6],[103,2,88,0],[104,2,89,0],[104,11,89,9,"getExactRoutes"],[104,25,89,23,"getExactRoutes"],[104,26,89,24,"contextModule"],[104,39,89,37],[104,41,89,53],[105,4,89,53],[105,8,89,39,"options"],[105,15,89,46],[105,18,89,46,"arguments"],[105,27,89,46],[105,28,89,46,"length"],[105,34,89,46],[105,42,89,46,"arguments"],[105,51,89,46],[105,59,89,46,"undefined"],[105,68,89,46],[105,71,89,46,"arguments"],[105,80,89,46],[105,86,89,49],[105,87,89,50],[105,88,89,51],[106,4,90,4],[106,11,90,11,"getRoutes"],[106,20,90,20],[106,21,90,21,"contextModule"],[106,34,90,34],[106,36,90,34,"Object"],[106,42,90,34],[106,43,90,34,"assign"],[106,49,90,34],[106,54,91,11,"options"],[106,61,91,18],[107,6,92,8,"skipGenerated"],[107,19,92,21],[107,21,92,23],[108,4,92,27],[108,6,93,5],[108,7,93,6],[109,2,94,0],[110,2,95,0],[110,6,95,4,"getRoutesCore_2"],[110,21,95,19],[110,24,95,22,"require"],[110,31,95,29],[110,32,95,29,"_dependencyMap"],[110,46,95,29],[110,68,95,47],[110,69,95,48],[111,2,96,0,"Object"],[111,8,96,6],[111,9,96,7,"defineProperty"],[111,23,96,21],[111,24,96,22,"exports"],[111,31,96,29],[111,33,96,31],[111,50,96,48],[111,52,96,50],[112,4,96,52,"enumerable"],[112,14,96,62],[112,16,96,64],[112,20,96,68],[113,4,96,70,"get"],[113,7,96,73],[113,9,96,75],[113,18,96,70,"get"],[113,21,96,73,"get"],[113,22,96,73],[113,24,96,87],[114,6,96,89],[114,13,96,96,"getRoutesCore_2"],[114,28,96,111],[114,29,96,112,"generateDynamic"],[114,44,96,127],[115,4,96,129],[116,2,96,131],[116,3,96,132],[116,4,96,133],[117,2,97,0,"Object"],[117,8,97,6],[117,9,97,7,"defineProperty"],[117,23,97,21],[117,24,97,22,"exports"],[117,31,97,29],[117,33,97,31],[117,52,97,50],[117,54,97,52],[118,4,97,54,"enumerable"],[118,14,97,64],[118,16,97,66],[118,20,97,70],[119,4,97,72,"get"],[119,7,97,75],[119,9,97,77],[119,18,97,72,"get"],[119,21,97,75,"get"],[119,22,97,75],[119,24,97,89],[120,6,97,91],[120,13,97,98,"getRoutesCore_2"],[120,28,97,113],[120,29,97,114,"extrapolateGroups"],[120,46,97,131],[121,4,97,133],[122,2,97,135],[122,3,97,136],[122,4,97,137],[123,0,97,138],[123,3]],"functionMap":{"names":["<global>","getRoutes","getSystemRoute","loadRoute","getExactRoutes","Object.defineProperty$argument_2.get"],"mappings":"AAA;ACkB;QCE;+BCK;sBDG;oBCW;qBDG;oBCY;qBDE;oBCa;qBDE;oBCM;qBDG;SDI;CDG;AIC;CJK;2EKE,uDL;6EKC,yDL"},"hasCjsExports":true},"type":"js/module"}]}