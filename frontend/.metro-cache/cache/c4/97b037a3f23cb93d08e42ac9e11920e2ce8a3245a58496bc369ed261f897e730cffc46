{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var safeIsNaN = Number.isNaN || function ponyfill(value) {\n    return typeof value === 'number' && value !== value;\n  };\n  function isEqual(first, second) {\n    if (first === second) {\n      return true;\n    }\n    if (safeIsNaN(first) && safeIsNaN(second)) {\n      return true;\n    }\n    return false;\n  }\n  function areInputsEqual(newInputs, lastInputs) {\n    if (newInputs.length !== lastInputs.length) {\n      return false;\n    }\n    for (var i = 0; i < newInputs.length; i++) {\n      if (!isEqual(newInputs[i], lastInputs[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function memoizeOne(resultFn, isEqual) {\n    if (isEqual === void 0) {\n      isEqual = areInputsEqual;\n    }\n    var cache = null;\n    function memoized() {\n      var newArgs = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        newArgs[_i] = arguments[_i];\n      }\n      if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {\n        return cache.lastResult;\n      }\n      var lastResult = resultFn.apply(this, newArgs);\n      cache = {\n        lastResult: lastResult,\n        lastArgs: newArgs,\n        lastThis: this\n      };\n      return lastResult;\n    }\n    memoized.clear = function clear() {\n      cache = null;\n    };\n    return memoized;\n  }\n  module.exports = memoizeOne;\n});","lineCount":54,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"safeIsNaN"],[4,15,3,13],[4,18,3,16,"Number"],[4,24,3,22],[4,25,3,23,"isNaN"],[4,30,3,28],[4,34,4,4],[4,43,4,13,"ponyfill"],[4,51,4,21,"ponyfill"],[4,52,4,22,"value"],[4,57,4,27],[4,59,4,29],[5,4,5,8],[5,11,5,15],[5,18,5,22,"value"],[5,23,5,27],[5,28,5,32],[5,36,5,40],[5,40,5,44,"value"],[5,45,5,49],[5,50,5,54,"value"],[5,55,5,59],[6,2,6,4],[6,3,6,5],[7,2,7,0],[7,11,7,9,"isEqual"],[7,18,7,16,"isEqual"],[7,19,7,17,"first"],[7,24,7,22],[7,26,7,24,"second"],[7,32,7,30],[7,34,7,32],[8,4,8,4],[8,8,8,8,"first"],[8,13,8,13],[8,18,8,18,"second"],[8,24,8,24],[8,26,8,26],[9,6,9,8],[9,13,9,15],[9,17,9,19],[10,4,10,4],[11,4,11,4],[11,8,11,8,"safeIsNaN"],[11,17,11,17],[11,18,11,18,"first"],[11,23,11,23],[11,24,11,24],[11,28,11,28,"safeIsNaN"],[11,37,11,37],[11,38,11,38,"second"],[11,44,11,44],[11,45,11,45],[11,47,11,47],[12,6,12,8],[12,13,12,15],[12,17,12,19],[13,4,13,4],[14,4,14,4],[14,11,14,11],[14,16,14,16],[15,2,15,0],[16,2,16,0],[16,11,16,9,"areInputsEqual"],[16,25,16,23,"areInputsEqual"],[16,26,16,24,"newInputs"],[16,35,16,33],[16,37,16,35,"lastInputs"],[16,47,16,45],[16,49,16,47],[17,4,17,4],[17,8,17,8,"newInputs"],[17,17,17,17],[17,18,17,18,"length"],[17,24,17,24],[17,29,17,29,"lastInputs"],[17,39,17,39],[17,40,17,40,"length"],[17,46,17,46],[17,48,17,48],[18,6,18,8],[18,13,18,15],[18,18,18,20],[19,4,19,4],[20,4,20,4],[20,9,20,9],[20,13,20,13,"i"],[20,14,20,14],[20,17,20,17],[20,18,20,18],[20,20,20,20,"i"],[20,21,20,21],[20,24,20,24,"newInputs"],[20,33,20,33],[20,34,20,34,"length"],[20,40,20,40],[20,42,20,42,"i"],[20,43,20,43],[20,45,20,45],[20,47,20,47],[21,6,21,8],[21,10,21,12],[21,11,21,13,"isEqual"],[21,18,21,20],[21,19,21,21,"newInputs"],[21,28,21,30],[21,29,21,31,"i"],[21,30,21,32],[21,31,21,33],[21,33,21,35,"lastInputs"],[21,43,21,45],[21,44,21,46,"i"],[21,45,21,47],[21,46,21,48],[21,47,21,49],[21,49,21,51],[22,8,22,12],[22,15,22,19],[22,20,22,24],[23,6,23,8],[24,4,24,4],[25,4,25,4],[25,11,25,11],[25,15,25,15],[26,2,26,0],[27,2,28,0],[27,11,28,9,"memoizeOne"],[27,21,28,19,"memoizeOne"],[27,22,28,20,"resultFn"],[27,30,28,28],[27,32,28,30,"isEqual"],[27,39,28,37],[27,41,28,39],[28,4,29,4],[28,8,29,8,"isEqual"],[28,15,29,15],[28,20,29,20],[28,25,29,25],[28,26,29,26],[28,28,29,28],[29,6,29,30,"isEqual"],[29,13,29,37],[29,16,29,40,"areInputsEqual"],[29,30,29,54],[30,4,29,56],[31,4,30,4],[31,8,30,8,"cache"],[31,13,30,13],[31,16,30,16],[31,20,30,20],[32,4,31,4],[32,13,31,13,"memoized"],[32,21,31,21,"memoized"],[32,22,31,21],[32,24,31,24],[33,6,32,8],[33,10,32,12,"newArgs"],[33,17,32,19],[33,20,32,22],[33,22,32,24],[34,6,33,8],[34,11,33,13],[34,15,33,17,"_i"],[34,17,33,19],[34,20,33,22],[34,21,33,23],[34,23,33,25,"_i"],[34,25,33,27],[34,28,33,30,"arguments"],[34,37,33,39],[34,38,33,40,"length"],[34,44,33,46],[34,46,33,48,"_i"],[34,48,33,50],[34,50,33,52],[34,52,33,54],[35,8,34,12,"newArgs"],[35,15,34,19],[35,16,34,20,"_i"],[35,18,34,22],[35,19,34,23],[35,22,34,26,"arguments"],[35,31,34,35],[35,32,34,36,"_i"],[35,34,34,38],[35,35,34,39],[36,6,35,8],[37,6,36,8],[37,10,36,12,"cache"],[37,15,36,17],[37,19,36,21,"cache"],[37,24,36,26],[37,25,36,27,"lastThis"],[37,33,36,35],[37,38,36,40],[37,42,36,44],[37,46,36,48,"isEqual"],[37,53,36,55],[37,54,36,56,"newArgs"],[37,61,36,63],[37,63,36,65,"cache"],[37,68,36,70],[37,69,36,71,"lastArgs"],[37,77,36,79],[37,78,36,80],[37,80,36,82],[38,8,37,12],[38,15,37,19,"cache"],[38,20,37,24],[38,21,37,25,"lastResult"],[38,31,37,35],[39,6,38,8],[40,6,39,8],[40,10,39,12,"lastResult"],[40,20,39,22],[40,23,39,25,"resultFn"],[40,31,39,33],[40,32,39,34,"apply"],[40,37,39,39],[40,38,39,40],[40,42,39,44],[40,44,39,46,"newArgs"],[40,51,39,53],[40,52,39,54],[41,6,40,8,"cache"],[41,11,40,13],[41,14,40,16],[42,8,41,12,"lastResult"],[42,18,41,22],[42,20,41,24,"lastResult"],[42,30,41,34],[43,8,42,12,"lastArgs"],[43,16,42,20],[43,18,42,22,"newArgs"],[43,25,42,29],[44,8,43,12,"lastThis"],[44,16,43,20],[44,18,43,22],[45,6,44,8],[45,7,44,9],[46,6,45,8],[46,13,45,15,"lastResult"],[46,23,45,25],[47,4,46,4],[48,4,47,4,"memoized"],[48,12,47,12],[48,13,47,13,"clear"],[48,18,47,18],[48,21,47,21],[48,30,47,30,"clear"],[48,35,47,35,"clear"],[48,36,47,35],[48,38,47,38],[49,6,48,8,"cache"],[49,11,48,13],[49,14,48,16],[49,18,48,20],[50,4,49,4],[50,5,49,5],[51,4,50,4],[51,11,50,11,"memoized"],[51,19,50,19],[52,2,51,0],[53,2,53,0,"module"],[53,8,53,6],[53,9,53,7,"exports"],[53,16,53,14],[53,19,53,17,"memoizeOne"],[53,29,53,27],[54,0,53,28],[54,3]],"functionMap":{"names":["<global>","ponyfill","isEqual","areInputsEqual","memoizeOne","memoized","clear"],"mappings":"AAA;ICG;KDE;AEC;CFQ;AGC;CHU;AIE;ICG;KDe;qBEC;KFE;CJE"},"hasCjsExports":true},"type":"js/module"}]}