{"dependencies":[{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":21,"index":149},"end":{"line":4,"column":49,"index":177}}],"key":"JdWyQHWvvi7kws4n0MhZWUpiB2c=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createMemoryHistory = createMemoryHistory;\n  var non_secure_1 = require(_dependencyMap[0], \"nanoid/non-secure\");\n  function createMemoryHistory() {\n    var index = 0;\n    var items = [];\n    // Pending callbacks for `history.go(n)`\n    // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n    var pending = [];\n    var interrupt = function interrupt() {\n      // If another history operation was performed we need to interrupt existing ones\n      // This makes sure that calls such as `history.replace` after `history.go` don't happen\n      // Since otherwise it won't be correct if something else has changed\n      pending.forEach(function (it) {\n        var cb = it.cb;\n        it.cb = function () {\n          return cb(true);\n        };\n      });\n    };\n    var history = {\n      get index() {\n        var _window$history$state;\n        // We store an id in the state instead of an index\n        // Index could get out of sync with in-memory values if page reloads\n        var id = (_window$history$state = window.history.state) == null ? void 0 : _window$history$state.id;\n        if (id) {\n          var _index = items.findIndex(function (item) {\n            return item.id === id;\n          });\n          return _index > -1 ? _index : 0;\n        }\n        return 0;\n      },\n      get: function get(index) {\n        return items[index];\n      },\n      backIndex: function backIndex(_ref) {\n        var path = _ref.path;\n        // We need to find the index from the element before current to get closest path to go back to\n        for (var i = index - 1; i >= 0; i--) {\n          var item = items[i];\n          if (item.path === path) {\n            return i;\n          }\n        }\n        return -1;\n      },\n      push: function push(_ref2) {\n        var path = _ref2.path,\n          state = _ref2.state;\n        interrupt();\n        var id = (0, non_secure_1.nanoid)();\n        // When a new entry is pushed, all the existing entries after index will be inaccessible\n        // So we remove any existing entries after the current index to clean them up\n        items = items.slice(0, index + 1);\n        items.push({\n          path: path,\n          state: state,\n          id: id\n        });\n        index = items.length - 1;\n        // We pass empty string for title because it's ignored in all browsers except safari\n        // We don't store state object in history.state because:\n        // - browsers have limits on how big it can be, and we don't control the size\n        // - while not recommended, there could be non-serializable data in state\n        window.history.pushState({\n          id: id\n        }, '', path);\n      },\n      replace: function replace(_ref3) {\n        var _window$history$state2, _window$history$state3;\n        var path = _ref3.path,\n          state = _ref3.state;\n        interrupt();\n        var id = (_window$history$state2 = (_window$history$state3 = window.history.state) == null ? void 0 : _window$history$state3.id) != null ? _window$history$state2 : (0, non_secure_1.nanoid)();\n        // Need to keep the hash part of the path if there was no previous history entry\n        // or the previous history entry had the same path\n        var pathWithHash = path;\n        var hash = pathWithHash.includes('#') ? '' : location.hash;\n        if (!items.length || items.findIndex(function (item) {\n          return item.id === id;\n        }) < 0) {\n          // There are two scenarios for creating an array with only one history record:\n          // - When loaded id not found in the items array, this function by default will replace\n          //   the first item. We need to keep only the new updated object, otherwise it will break\n          //   the page when navigating forward in history.\n          // - This is the first time any state modifications are done\n          //   So we need to push the entry as there's nothing to replace\n          pathWithHash = pathWithHash + hash;\n          items = [{\n            path: pathWithHash,\n            state: state,\n            id: id\n          }];\n          index = 0;\n        } else {\n          if (items[index].path === path) {\n            pathWithHash = pathWithHash + hash;\n          }\n          items[index] = {\n            path: path,\n            state: state,\n            id: id\n          };\n        }\n        window.history.replaceState({\n          id: id\n        }, '', pathWithHash);\n      },\n      // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n      // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n      // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n      // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n      // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n      go: function go(n) {\n        interrupt();\n        // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n        // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n        var nextIndex = index + n;\n        var lastItemIndex = items.length - 1;\n        if (n < 0 && !items[nextIndex]) {\n          // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n          n = -index;\n          index = 0;\n        } else if (n > 0 && nextIndex > lastItemIndex) {\n          // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n          n = lastItemIndex - index;\n          index = lastItemIndex;\n        } else {\n          index = nextIndex;\n        }\n        if (n === 0) {\n          return;\n        }\n        // When we call `history.go`, `popstate` will fire when there's history to go back to\n        // So we need to somehow handle following cases:\n        // - There's history to go back, `history.go` is called, and `popstate` fires\n        // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n        // - No history to go back, but `history.go` was called, browser has no API to detect it\n        return new Promise(function (resolve, reject) {\n          var done = function done(interrupted) {\n            clearTimeout(timer);\n            if (interrupted) {\n              reject(new Error('History was changed during navigation.'));\n              return;\n            }\n            // There seems to be a bug in Chrome regarding updating the title\n            // If we set a title just before calling `history.go`, the title gets lost\n            // However the value of `document.title` is still what we set it to\n            // It's just not displayed in the tab bar\n            // To update the tab bar, we need to reset the title to something else first (e.g. '')\n            // And set the title to what it was before so it gets applied\n            // It won't work without setting it to empty string coz otherwise title isn't changing\n            // Which means that the browser won't do anything after setting the title\n            var title = window.document.title;\n            window.document.title = '';\n            window.document.title = title;\n            resolve();\n          };\n          pending.push({\n            ref: done,\n            cb: done\n          });\n          // If navigation didn't happen within 100ms, assume that it won't happen\n          // This may not be accurate, but hopefully it won't take so much time\n          // In Chrome, navigation seems to happen instantly in next microtask\n          // But on Firefox, it seems to take much longer, around 50ms from our testing\n          // We're using a hacky timeout since there doesn't seem to be way to know for sure\n          var timer = setTimeout(function () {\n            var index = pending.findIndex(function (it) {\n              return it.ref === done;\n            });\n            if (index > -1) {\n              pending[index].cb();\n              pending.splice(index, 1);\n            }\n          }, 100);\n          var _onPopState = function onPopState() {\n            var _window$history$state4;\n            var id = (_window$history$state4 = window.history.state) == null ? void 0 : _window$history$state4.id;\n            var currentIndex = items.findIndex(function (item) {\n              return item.id === id;\n            });\n            // Fix createMemoryHistory.index variable's value\n            // as it may go out of sync when navigating in the browser.\n            index = Math.max(currentIndex, 0);\n            var last = pending.pop();\n            window.removeEventListener('popstate', _onPopState);\n            last == null || last.cb();\n          };\n          window.addEventListener('popstate', _onPopState);\n          window.history.go(n);\n        });\n      },\n      // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n      // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n      // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n      listen: function listen(listener) {\n        var onPopState = function onPopState() {\n          if (pending.length) {\n            // This was triggered by `history.go(n)`, we shouldn't call the listener\n            return;\n          }\n          listener();\n        };\n        window.addEventListener('popstate', onPopState);\n        return function () {\n          return window.removeEventListener('popstate', onPopState);\n        };\n      }\n    };\n    return history;\n  }\n});","lineCount":220,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"createMemoryHistory"],[7,29,3,27],[7,32,3,30,"createMemoryHistory"],[7,51,3,49],[8,2,4,0],[8,6,4,6,"non_secure_1"],[8,18,4,18],[8,21,4,21,"require"],[8,28,4,28],[8,29,4,28,"_dependencyMap"],[8,43,4,28],[8,67,4,48],[8,68,4,49],[9,2,5,0],[9,11,5,9,"createMemoryHistory"],[9,30,5,28,"createMemoryHistory"],[9,31,5,28],[9,33,5,31],[10,4,6,4],[10,8,6,8,"index"],[10,13,6,13],[10,16,6,16],[10,17,6,17],[11,4,7,4],[11,8,7,8,"items"],[11,13,7,13],[11,16,7,16],[11,18,7,18],[12,4,8,4],[13,4,9,4],[14,4,10,4],[14,8,10,10,"pending"],[14,15,10,17],[14,18,10,20],[14,20,10,22],[15,4,11,4],[15,8,11,10,"interrupt"],[15,17,11,19],[15,20,11,22],[15,29,11,10,"interrupt"],[15,38,11,19,"interrupt"],[15,39,11,19],[15,41,11,28],[16,6,12,8],[17,6,13,8],[18,6,14,8],[19,6,15,8,"pending"],[19,13,15,15],[19,14,15,16,"forEach"],[19,21,15,23],[19,22,15,24],[19,32,15,25,"it"],[19,34,15,27],[19,36,15,32],[20,8,16,12],[20,12,16,18,"cb"],[20,14,16,20],[20,17,16,23,"it"],[20,19,16,25],[20,20,16,26,"cb"],[20,22,16,28],[21,8,17,12,"it"],[21,10,17,14],[21,11,17,15,"cb"],[21,13,17,17],[21,16,17,20],[22,10,17,20],[22,17,17,26,"cb"],[22,19,17,28],[22,20,17,29],[22,24,17,33],[22,25,17,34],[23,8,17,34],[24,6,18,8],[24,7,18,9],[24,8,18,10],[25,4,19,4],[25,5,19,5],[26,4,20,4],[26,8,20,10,"history"],[26,15,20,17],[26,18,20,20],[27,6,21,8],[27,10,21,12,"index"],[27,15,21,17,"index"],[27,16,21,17],[27,18,21,20],[28,8,21,20],[28,12,21,20,"_window$history$state"],[28,33,21,20],[29,8,22,12],[30,8,23,12],[31,8,24,12],[31,12,24,18,"id"],[31,14,24,20],[31,18,24,20,"_window$history$state"],[31,39,24,20],[31,42,24,23,"window"],[31,48,24,29],[31,49,24,30,"history"],[31,56,24,37],[31,57,24,38,"state"],[31,62,24,43],[31,83,24,23,"_window$history$state"],[31,104,24,23],[31,105,24,45,"id"],[31,107,24,47],[32,8,25,12],[32,12,25,16,"id"],[32,14,25,18],[32,16,25,20],[33,10,26,16],[33,14,26,22,"index"],[33,20,26,27],[33,23,26,30,"items"],[33,28,26,35],[33,29,26,36,"findIndex"],[33,38,26,45],[33,39,26,46],[33,49,26,47,"item"],[33,53,26,51],[34,12,26,51],[34,19,26,56,"item"],[34,23,26,60],[34,24,26,61,"id"],[34,26,26,63],[34,31,26,68,"id"],[34,33,26,70],[35,10,26,70],[35,12,26,71],[36,10,27,16],[36,17,27,23,"index"],[36,23,27,28],[36,26,27,31],[36,27,27,32],[36,28,27,33],[36,31,27,36,"index"],[36,37,27,41],[36,40,27,44],[36,41,27,45],[37,8,28,12],[38,8,29,12],[38,15,29,19],[38,16,29,20],[39,6,30,8],[39,7,30,9],[40,6,31,8,"get"],[40,9,31,11],[40,20,31,8,"get"],[40,23,31,11,"get"],[40,24,31,12,"index"],[40,29,31,17],[40,31,31,19],[41,8,32,12],[41,15,32,19,"items"],[41,20,32,24],[41,21,32,25,"index"],[41,26,32,30],[41,27,32,31],[42,6,33,8],[42,7,33,9],[43,6,34,8,"backIndex"],[43,15,34,17],[43,26,34,8,"backIndex"],[43,35,34,17,"backIndex"],[43,36,34,17,"_ref"],[43,40,34,17],[43,42,34,28],[44,8,34,28],[44,12,34,20,"path"],[44,16,34,24],[44,19,34,24,"_ref"],[44,23,34,24],[44,24,34,20,"path"],[44,28,34,24],[45,8,35,12],[46,8,36,12],[46,13,36,17],[46,17,36,21,"i"],[46,18,36,22],[46,21,36,25,"index"],[46,26,36,30],[46,29,36,33],[46,30,36,34],[46,32,36,36,"i"],[46,33,36,37],[46,37,36,41],[46,38,36,42],[46,40,36,44,"i"],[46,41,36,45],[46,43,36,47],[46,45,36,49],[47,10,37,16],[47,14,37,22,"item"],[47,18,37,26],[47,21,37,29,"items"],[47,26,37,34],[47,27,37,35,"i"],[47,28,37,36],[47,29,37,37],[48,10,38,16],[48,14,38,20,"item"],[48,18,38,24],[48,19,38,25,"path"],[48,23,38,29],[48,28,38,34,"path"],[48,32,38,38],[48,34,38,40],[49,12,39,20],[49,19,39,27,"i"],[49,20,39,28],[50,10,40,16],[51,8,41,12],[52,8,42,12],[52,15,42,19],[52,16,42,20],[52,17,42,21],[53,6,43,8],[53,7,43,9],[54,6,44,8,"push"],[54,10,44,12],[54,21,44,8,"push"],[54,25,44,12,"push"],[54,26,44,12,"_ref2"],[54,31,44,12],[54,33,44,30],[55,8,44,30],[55,12,44,15,"path"],[55,16,44,19],[55,19,44,19,"_ref2"],[55,24,44,19],[55,25,44,15,"path"],[55,29,44,19],[56,10,44,21,"state"],[56,15,44,26],[56,18,44,26,"_ref2"],[56,23,44,26],[56,24,44,21,"state"],[56,29,44,26],[57,8,45,12,"interrupt"],[57,17,45,21],[57,18,45,22],[57,19,45,23],[58,8,46,12],[58,12,46,18,"id"],[58,14,46,20],[58,17,46,23],[58,18,46,24],[58,19,46,25],[58,21,46,27,"non_secure_1"],[58,33,46,39],[58,34,46,40,"nanoid"],[58,40,46,46],[58,42,46,48],[58,43,46,49],[59,8,47,12],[60,8,48,12],[61,8,49,12,"items"],[61,13,49,17],[61,16,49,20,"items"],[61,21,49,25],[61,22,49,26,"slice"],[61,27,49,31],[61,28,49,32],[61,29,49,33],[61,31,49,35,"index"],[61,36,49,40],[61,39,49,43],[61,40,49,44],[61,41,49,45],[62,8,50,12,"items"],[62,13,50,17],[62,14,50,18,"push"],[62,18,50,22],[62,19,50,23],[63,10,50,25,"path"],[63,14,50,29],[63,16,50,25,"path"],[63,20,50,29],[64,10,50,31,"state"],[64,15,50,36],[64,17,50,31,"state"],[64,22,50,36],[65,10,50,38,"id"],[65,12,50,40],[65,14,50,38,"id"],[66,8,50,41],[66,9,50,42],[66,10,50,43],[67,8,51,12,"index"],[67,13,51,17],[67,16,51,20,"items"],[67,21,51,25],[67,22,51,26,"length"],[67,28,51,32],[67,31,51,35],[67,32,51,36],[68,8,52,12],[69,8,53,12],[70,8,54,12],[71,8,55,12],[72,8,56,12,"window"],[72,14,56,18],[72,15,56,19,"history"],[72,22,56,26],[72,23,56,27,"pushState"],[72,32,56,36],[72,33,56,37],[73,10,56,39,"id"],[73,12,56,41],[73,14,56,39,"id"],[74,8,56,42],[74,9,56,43],[74,11,56,45],[74,13,56,47],[74,15,56,49,"path"],[74,19,56,53],[74,20,56,54],[75,6,57,8],[75,7,57,9],[76,6,58,8,"replace"],[76,13,58,15],[76,24,58,8,"replace"],[76,31,58,15,"replace"],[76,32,58,15,"_ref3"],[76,37,58,15],[76,39,58,33],[77,8,58,33],[77,12,58,33,"_window$history$state2"],[77,34,58,33],[77,36,58,33,"_window$history$state3"],[77,58,58,33],[78,8,58,33],[78,12,58,18,"path"],[78,16,58,22],[78,19,58,22,"_ref3"],[78,24,58,22],[78,25,58,18,"path"],[78,29,58,22],[79,10,58,24,"state"],[79,15,58,29],[79,18,58,29,"_ref3"],[79,23,58,29],[79,24,58,24,"state"],[79,29,58,29],[80,8,59,12,"interrupt"],[80,17,59,21],[80,18,59,22],[80,19,59,23],[81,8,60,12],[81,12,60,18,"id"],[81,14,60,20],[81,18,60,20,"_window$history$state2"],[81,40,60,20],[81,44,60,20,"_window$history$state3"],[81,66,60,20],[81,69,60,23,"window"],[81,75,60,29],[81,76,60,30,"history"],[81,83,60,37],[81,84,60,38,"state"],[81,89,60,43],[81,110,60,23,"_window$history$state3"],[81,132,60,23],[81,133,60,45,"id"],[81,135,60,47],[81,147,60,47,"_window$history$state2"],[81,169,60,47],[81,172,60,51],[81,173,60,52],[81,174,60,53],[81,176,60,55,"non_secure_1"],[81,188,60,67],[81,189,60,68,"nanoid"],[81,195,60,74],[81,197,60,76],[81,198,60,77],[82,8,61,12],[83,8,62,12],[84,8,63,12],[84,12,63,16,"pathWithHash"],[84,24,63,28],[84,27,63,31,"path"],[84,31,63,35],[85,8,64,12],[85,12,64,18,"hash"],[85,16,64,22],[85,19,64,25,"pathWithHash"],[85,31,64,37],[85,32,64,38,"includes"],[85,40,64,46],[85,41,64,47],[85,44,64,50],[85,45,64,51],[85,48,64,54],[85,50,64,56],[85,53,64,59,"location"],[85,61,64,67],[85,62,64,68,"hash"],[85,66,64,72],[86,8,65,12],[86,12,65,16],[86,13,65,17,"items"],[86,18,65,22],[86,19,65,23,"length"],[86,25,65,29],[86,29,65,33,"items"],[86,34,65,38],[86,35,65,39,"findIndex"],[86,44,65,48],[86,45,65,49],[86,55,65,50,"item"],[86,59,65,54],[87,10,65,54],[87,17,65,59,"item"],[87,21,65,63],[87,22,65,64,"id"],[87,24,65,66],[87,29,65,71,"id"],[87,31,65,73],[88,8,65,73],[88,10,65,74],[88,13,65,77],[88,14,65,78],[88,16,65,80],[89,10,66,16],[90,10,67,16],[91,10,68,16],[92,10,69,16],[93,10,70,16],[94,10,71,16],[95,10,72,16,"pathWithHash"],[95,22,72,28],[95,25,72,31,"pathWithHash"],[95,37,72,43],[95,40,72,46,"hash"],[95,44,72,50],[96,10,73,16,"items"],[96,15,73,21],[96,18,73,24],[96,19,73,25],[97,12,73,27,"path"],[97,16,73,31],[97,18,73,33,"pathWithHash"],[97,30,73,45],[98,12,73,47,"state"],[98,17,73,52],[98,19,73,47,"state"],[98,24,73,52],[99,12,73,54,"id"],[99,14,73,56],[99,16,73,54,"id"],[100,10,73,57],[100,11,73,58],[100,12,73,59],[101,10,74,16,"index"],[101,15,74,21],[101,18,74,24],[101,19,74,25],[102,8,75,12],[102,9,75,13],[102,15,76,17],[103,10,77,16],[103,14,77,20,"items"],[103,19,77,25],[103,20,77,26,"index"],[103,25,77,31],[103,26,77,32],[103,27,77,33,"path"],[103,31,77,37],[103,36,77,42,"path"],[103,40,77,46],[103,42,77,48],[104,12,78,20,"pathWithHash"],[104,24,78,32],[104,27,78,35,"pathWithHash"],[104,39,78,47],[104,42,78,50,"hash"],[104,46,78,54],[105,10,79,16],[106,10,80,16,"items"],[106,15,80,21],[106,16,80,22,"index"],[106,21,80,27],[106,22,80,28],[106,25,80,31],[107,12,80,33,"path"],[107,16,80,37],[107,18,80,33,"path"],[107,22,80,37],[108,12,80,39,"state"],[108,17,80,44],[108,19,80,39,"state"],[108,24,80,44],[109,12,80,46,"id"],[109,14,80,48],[109,16,80,46,"id"],[110,10,80,49],[110,11,80,50],[111,8,81,12],[112,8,82,12,"window"],[112,14,82,18],[112,15,82,19,"history"],[112,22,82,26],[112,23,82,27,"replaceState"],[112,35,82,39],[112,36,82,40],[113,10,82,42,"id"],[113,12,82,44],[113,14,82,42,"id"],[114,8,82,45],[114,9,82,46],[114,11,82,48],[114,13,82,50],[114,15,82,52,"pathWithHash"],[114,27,82,64],[114,28,82,65],[115,6,83,8],[115,7,83,9],[116,6,84,8],[117,6,85,8],[118,6,86,8],[119,6,87,8],[120,6,88,8],[121,6,89,8,"go"],[121,8,89,10],[121,19,89,8,"go"],[121,21,89,10,"go"],[121,22,89,11,"n"],[121,23,89,12],[121,25,89,14],[122,8,90,12,"interrupt"],[122,17,90,21],[122,18,90,22],[122,19,90,23],[123,8,91,12],[124,8,92,12],[125,8,93,12],[125,12,93,18,"nextIndex"],[125,21,93,27],[125,24,93,30,"index"],[125,29,93,35],[125,32,93,38,"n"],[125,33,93,39],[126,8,94,12],[126,12,94,18,"lastItemIndex"],[126,25,94,31],[126,28,94,34,"items"],[126,33,94,39],[126,34,94,40,"length"],[126,40,94,46],[126,43,94,49],[126,44,94,50],[127,8,95,12],[127,12,95,16,"n"],[127,13,95,17],[127,16,95,20],[127,17,95,21],[127,21,95,25],[127,22,95,26,"items"],[127,27,95,31],[127,28,95,32,"nextIndex"],[127,37,95,41],[127,38,95,42],[127,40,95,44],[128,10,96,16],[129,10,97,16,"n"],[129,11,97,17],[129,14,97,20],[129,15,97,21,"index"],[129,20,97,26],[130,10,98,16,"index"],[130,15,98,21],[130,18,98,24],[130,19,98,25],[131,8,99,12],[131,9,99,13],[131,15,100,17],[131,19,100,21,"n"],[131,20,100,22],[131,23,100,25],[131,24,100,26],[131,28,100,30,"nextIndex"],[131,37,100,39],[131,40,100,42,"lastItemIndex"],[131,53,100,55],[131,55,100,57],[132,10,101,16],[133,10,102,16,"n"],[133,11,102,17],[133,14,102,20,"lastItemIndex"],[133,27,102,33],[133,30,102,36,"index"],[133,35,102,41],[134,10,103,16,"index"],[134,15,103,21],[134,18,103,24,"lastItemIndex"],[134,31,103,37],[135,8,104,12],[135,9,104,13],[135,15,105,17],[136,10,106,16,"index"],[136,15,106,21],[136,18,106,24,"nextIndex"],[136,27,106,33],[137,8,107,12],[138,8,108,12],[138,12,108,16,"n"],[138,13,108,17],[138,18,108,22],[138,19,108,23],[138,21,108,25],[139,10,109,16],[140,8,110,12],[141,8,111,12],[142,8,112,12],[143,8,113,12],[144,8,114,12],[145,8,115,12],[146,8,116,12],[146,15,116,19],[146,19,116,23,"Promise"],[146,26,116,30],[146,27,116,31],[146,37,116,32,"resolve"],[146,44,116,39],[146,46,116,41,"reject"],[146,52,116,47],[146,54,116,52],[147,10,117,16],[147,14,117,22,"done"],[147,18,117,26],[147,21,117,29],[147,30,117,22,"done"],[147,34,117,26,"done"],[147,35,117,30,"interrupted"],[147,46,117,41],[147,48,117,46],[148,12,118,20,"clearTimeout"],[148,24,118,32],[148,25,118,33,"timer"],[148,30,118,38],[148,31,118,39],[149,12,119,20],[149,16,119,24,"interrupted"],[149,27,119,35],[149,29,119,37],[150,14,120,24,"reject"],[150,20,120,30],[150,21,120,31],[150,25,120,35,"Error"],[150,30,120,40],[150,31,120,41],[150,71,120,81],[150,72,120,82],[150,73,120,83],[151,14,121,24],[152,12,122,20],[153,12,123,20],[154,12,124,20],[155,12,125,20],[156,12,126,20],[157,12,127,20],[158,12,128,20],[159,12,129,20],[160,12,130,20],[161,12,131,20],[161,16,131,28,"title"],[161,21,131,33],[161,24,131,38,"window"],[161,30,131,44],[161,31,131,45,"document"],[161,39,131,53],[161,40,131,28,"title"],[161,45,131,33],[162,12,132,20,"window"],[162,18,132,26],[162,19,132,27,"document"],[162,27,132,35],[162,28,132,36,"title"],[162,33,132,41],[162,36,132,44],[162,38,132,46],[163,12,133,20,"window"],[163,18,133,26],[163,19,133,27,"document"],[163,27,133,35],[163,28,133,36,"title"],[163,33,133,41],[163,36,133,44,"title"],[163,41,133,49],[164,12,134,20,"resolve"],[164,19,134,27],[164,20,134,28],[164,21,134,29],[165,10,135,16],[165,11,135,17],[166,10,136,16,"pending"],[166,17,136,23],[166,18,136,24,"push"],[166,22,136,28],[166,23,136,29],[167,12,136,31,"ref"],[167,15,136,34],[167,17,136,36,"done"],[167,21,136,40],[168,12,136,42,"cb"],[168,14,136,44],[168,16,136,46,"done"],[169,10,136,51],[169,11,136,52],[169,12,136,53],[170,10,137,16],[171,10,138,16],[172,10,139,16],[173,10,140,16],[174,10,141,16],[175,10,142,16],[175,14,142,22,"timer"],[175,19,142,27],[175,22,142,30,"setTimeout"],[175,32,142,40],[175,33,142,41],[175,45,142,47],[176,12,143,20],[176,16,143,26,"index"],[176,21,143,31],[176,24,143,34,"pending"],[176,31,143,41],[176,32,143,42,"findIndex"],[176,41,143,51],[176,42,143,52],[176,52,143,53,"it"],[176,54,143,55],[177,14,143,55],[177,21,143,60,"it"],[177,23,143,62],[177,24,143,63,"ref"],[177,27,143,66],[177,32,143,71,"done"],[177,36,143,75],[178,12,143,75],[178,14,143,76],[179,12,144,20],[179,16,144,24,"index"],[179,21,144,29],[179,24,144,32],[179,25,144,33],[179,26,144,34],[179,28,144,36],[180,14,145,24,"pending"],[180,21,145,31],[180,22,145,32,"index"],[180,27,145,37],[180,28,145,38],[180,29,145,39,"cb"],[180,31,145,41],[180,32,145,42],[180,33,145,43],[181,14,146,24,"pending"],[181,21,146,31],[181,22,146,32,"splice"],[181,28,146,38],[181,29,146,39,"index"],[181,34,146,44],[181,36,146,46],[181,37,146,47],[181,38,146,48],[182,12,147,20],[183,10,148,16],[183,11,148,17],[183,13,148,19],[183,16,148,22],[183,17,148,23],[184,10,149,16],[184,14,149,22,"onPopState"],[184,25,149,32],[184,28,149,35],[184,37,149,22,"onPopState"],[184,47,149,32,"onPopState"],[184,48,149,32],[184,50,149,41],[185,12,149,41],[185,16,149,41,"_window$history$state4"],[185,38,149,41],[186,12,150,20],[186,16,150,26,"id"],[186,18,150,28],[186,22,150,28,"_window$history$state4"],[186,44,150,28],[186,47,150,31,"window"],[186,53,150,37],[186,54,150,38,"history"],[186,61,150,45],[186,62,150,46,"state"],[186,67,150,51],[186,88,150,31,"_window$history$state4"],[186,110,150,31],[186,111,150,53,"id"],[186,113,150,55],[187,12,151,20],[187,16,151,26,"currentIndex"],[187,28,151,38],[187,31,151,41,"items"],[187,36,151,46],[187,37,151,47,"findIndex"],[187,46,151,56],[187,47,151,57],[187,57,151,58,"item"],[187,61,151,62],[188,14,151,62],[188,21,151,67,"item"],[188,25,151,71],[188,26,151,72,"id"],[188,28,151,74],[188,33,151,79,"id"],[188,35,151,81],[189,12,151,81],[189,14,151,82],[190,12,152,20],[191,12,153,20],[192,12,154,20,"index"],[192,17,154,25],[192,20,154,28,"Math"],[192,24,154,32],[192,25,154,33,"max"],[192,28,154,36],[192,29,154,37,"currentIndex"],[192,41,154,49],[192,43,154,51],[192,44,154,52],[192,45,154,53],[193,12,155,20],[193,16,155,26,"last"],[193,20,155,30],[193,23,155,33,"pending"],[193,30,155,40],[193,31,155,41,"pop"],[193,34,155,44],[193,35,155,45],[193,36,155,46],[194,12,156,20,"window"],[194,18,156,26],[194,19,156,27,"removeEventListener"],[194,38,156,46],[194,39,156,47],[194,49,156,57],[194,51,156,59,"onPopState"],[194,62,156,69],[194,63,156,70],[195,12,157,20,"last"],[195,16,157,24],[195,28,157,20,"last"],[195,32,157,24],[195,33,157,26,"cb"],[195,35,157,28],[195,36,157,29],[195,37,157,30],[196,10,158,16],[196,11,158,17],[197,10,159,16,"window"],[197,16,159,22],[197,17,159,23,"addEventListener"],[197,33,159,39],[197,34,159,40],[197,44,159,50],[197,46,159,52,"onPopState"],[197,57,159,62],[197,58,159,63],[198,10,160,16,"window"],[198,16,160,22],[198,17,160,23,"history"],[198,24,160,30],[198,25,160,31,"go"],[198,27,160,33],[198,28,160,34,"n"],[198,29,160,35],[198,30,160,36],[199,8,161,12],[199,9,161,13],[199,10,161,14],[200,6,162,8],[200,7,162,9],[201,6,163,8],[202,6,164,8],[203,6,165,8],[204,6,166,8,"listen"],[204,12,166,14],[204,23,166,8,"listen"],[204,29,166,14,"listen"],[204,30,166,15,"listener"],[204,38,166,23],[204,40,166,25],[205,8,167,12],[205,12,167,18,"onPopState"],[205,22,167,28],[205,25,167,31],[205,34,167,18,"onPopState"],[205,44,167,28,"onPopState"],[205,45,167,28],[205,47,167,37],[206,10,168,16],[206,14,168,20,"pending"],[206,21,168,27],[206,22,168,28,"length"],[206,28,168,34],[206,30,168,36],[207,12,169,20],[208,12,170,20],[209,10,171,16],[210,10,172,16,"listener"],[210,18,172,24],[210,19,172,25],[210,20,172,26],[211,8,173,12],[211,9,173,13],[212,8,174,12,"window"],[212,14,174,18],[212,15,174,19,"addEventListener"],[212,31,174,35],[212,32,174,36],[212,42,174,46],[212,44,174,48,"onPopState"],[212,54,174,58],[212,55,174,59],[213,8,175,12],[213,15,175,19],[214,10,175,19],[214,17,175,25,"window"],[214,23,175,31],[214,24,175,32,"removeEventListener"],[214,43,175,51],[214,44,175,52],[214,54,175,62],[214,56,175,64,"onPopState"],[214,66,175,74],[214,67,175,75],[215,8,175,75],[216,6,176,8],[217,4,177,4],[217,5,177,5],[218,4,178,4],[218,11,178,11,"history"],[218,18,178,18],[219,2,179,0],[220,0,179,1],[220,3]],"functionMap":{"names":["<global>","createMemoryHistory","interrupt","pending.forEach$argument_0","it.cb","history.get__index","items.findIndex$argument_0","history.get","history.backIndex","history.push","history.replace","history.go","Promise$argument_0","done","setTimeout$argument_0","pending.findIndex$argument_0","onPopState","history.listen","<anonymous>"],"mappings":"AAA;ACI;sBCM;wBCI;oBCE,cD;SDC;KDC;QIE;8CCK,wBD;SJI;QMC;SNE;QOC;SPS;QQC;SRa;QSC;iDJO,wBI;STkB;QUM;+BC2B;6BCC;iBDkB;yCEO;oDCC,uBD;iBFK;mCIC;yDVE,wBU;iBJO;aDG;SVC;QgBI;+BDC;aCM;mBCE,wDD;ShBC;CDG"},"hasCjsExports":true},"type":"js/module"}]}