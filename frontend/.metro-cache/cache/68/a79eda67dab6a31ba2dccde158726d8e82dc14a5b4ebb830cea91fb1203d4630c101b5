{"dependencies":[{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":43,"index":58}}],"key":"SN8WVal79eAEDQEpzmVqVAy5JJs=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.createMemoryHistory = createMemoryHistory;\n  var _nanoidNonSecure = require(_dependencyMap[0], \"nanoid/non-secure\");\n  function createMemoryHistory() {\n    var index = 0;\n    var items = [];\n\n    // Pending callbacks for `history.go(n)`\n    // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n    var pending = [];\n    var interrupt = function interrupt() {\n      // If another history operation was performed we need to interrupt existing ones\n      // This makes sure that calls such as `history.replace` after `history.go` don't happen\n      // Since otherwise it won't be correct if something else has changed\n      pending.forEach(function (it) {\n        var cb = it.cb;\n        it.cb = function () {\n          return cb(true);\n        };\n      });\n    };\n    var history = {\n      get index() {\n        var _window$history$state;\n        // We store an id in the state instead of an index\n        // Index could get out of sync with in-memory values if page reloads\n        var id = (_window$history$state = window.history.state) == null ? void 0 : _window$history$state.id;\n        if (id) {\n          var _index = items.findIndex(function (item) {\n            return item.id === id;\n          });\n          return _index > -1 ? _index : 0;\n        }\n        return 0;\n      },\n      get: function get(index) {\n        return items[index];\n      },\n      backIndex: function backIndex(_ref) {\n        var path = _ref.path;\n        // We need to find the index from the element before current to get closest path to go back to\n        for (var i = index - 1; i >= 0; i--) {\n          var item = items[i];\n          if (item.path === path) {\n            return i;\n          }\n        }\n        return -1;\n      },\n      push: function push(_ref2) {\n        var path = _ref2.path,\n          state = _ref2.state;\n        interrupt();\n        var id = (0, _nanoidNonSecure.nanoid)();\n\n        // When a new entry is pushed, all the existing entries after index will be inaccessible\n        // So we remove any existing entries after the current index to clean them up\n        items = items.slice(0, index + 1);\n        items.push({\n          path: path,\n          state: state,\n          id: id\n        });\n        index = items.length - 1;\n\n        // We pass empty string for title because it's ignored in all browsers except safari\n        // We don't store state object in history.state because:\n        // - browsers have limits on how big it can be, and we don't control the size\n        // - while not recommended, there could be non-serializable data in state\n        window.history.pushState({\n          id: id\n        }, '', path);\n      },\n      replace: function replace(_ref3) {\n        var _window$history$state2, _window$history$state3;\n        var path = _ref3.path,\n          state = _ref3.state;\n        interrupt();\n        var id = (_window$history$state2 = (_window$history$state3 = window.history.state) == null ? void 0 : _window$history$state3.id) != null ? _window$history$state2 : (0, _nanoidNonSecure.nanoid)();\n\n        // Need to keep the hash part of the path if there was no previous history entry\n        // or the previous history entry had the same path\n        var pathWithHash = path;\n        var hash = pathWithHash.includes('#') ? '' : location.hash;\n        if (!items.length || items.findIndex(function (item) {\n          return item.id === id;\n        }) < 0) {\n          // There are two scenarios for creating an array with only one history record:\n          // - When loaded id not found in the items array, this function by default will replace\n          //   the first item. We need to keep only the new updated object, otherwise it will break\n          //   the page when navigating forward in history.\n          // - This is the first time any state modifications are done\n          //   So we need to push the entry as there's nothing to replace\n\n          pathWithHash = pathWithHash + hash;\n          items = [{\n            path: pathWithHash,\n            state: state,\n            id: id\n          }];\n          index = 0;\n        } else {\n          if (items[index].path === path) {\n            pathWithHash = pathWithHash + hash;\n          }\n          items[index] = {\n            path: path,\n            state: state,\n            id: id\n          };\n        }\n        window.history.replaceState({\n          id: id\n        }, '', pathWithHash);\n      },\n      // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n      // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n      // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n      // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n      // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n      go: function go(n) {\n        var _this = this;\n        interrupt();\n\n        // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n        // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n        var nextIndex = index + n;\n        var lastItemIndex = items.length - 1;\n        if (n < 0 && !items[nextIndex]) {\n          // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n          n = -index;\n          index = 0;\n        } else if (n > 0 && nextIndex > lastItemIndex) {\n          // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n          n = lastItemIndex - index;\n          index = lastItemIndex;\n        } else {\n          index = nextIndex;\n        }\n        if (n === 0) {\n          return;\n        }\n\n        // When we call `history.go`, `popstate` will fire when there's history to go back to\n        // So we need to somehow handle following cases:\n        // - There's history to go back, `history.go` is called, and `popstate` fires\n        // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n        // - No history to go back, but `history.go` was called, browser has no API to detect it\n        return new Promise(function (resolve, reject) {\n          var done = function done(interrupted) {\n            clearTimeout(timer);\n            if (interrupted) {\n              reject(new Error('History was changed during navigation.'));\n              return;\n            }\n\n            // There seems to be a bug in Chrome regarding updating the title\n            // If we set a title just before calling `history.go`, the title gets lost\n            // However the value of `document.title` is still what we set it to\n            // It's just not displayed in the tab bar\n            // To update the tab bar, we need to reset the title to something else first (e.g. '')\n            // And set the title to what it was before so it gets applied\n            // It won't work without setting it to empty string coz otherwise title isn't changing\n            // Which means that the browser won't do anything after setting the title\n            var title = window.document.title;\n            window.document.title = '';\n            window.document.title = title;\n            resolve();\n          };\n          pending.push({\n            ref: done,\n            cb: done\n          });\n\n          // If navigation didn't happen within 100ms, assume that it won't happen\n          // This may not be accurate, but hopefully it won't take so much time\n          // In Chrome, navigation seems to happen instantly in next microtask\n          // But on Firefox, it seems to take much longer, around 50ms from our testing\n          // We're using a hacky timeout since there doesn't seem to be way to know for sure\n          var timer = setTimeout(function () {\n            var foundIndex = pending.findIndex(function (it) {\n              return it.ref === done;\n            });\n            if (foundIndex > -1) {\n              pending[foundIndex].cb();\n              pending.splice(foundIndex, 1);\n            }\n            index = _this.index;\n          }, 100);\n          var _onPopState = function onPopState() {\n            // Fix createMemoryHistory.index variable's value\n            // as it may go out of sync when navigating in the browser.\n            index = _this.index;\n            var last = pending.pop();\n            window.removeEventListener('popstate', _onPopState);\n            last == null || last.cb();\n          };\n          window.addEventListener('popstate', _onPopState);\n          window.history.go(n);\n        });\n      },\n      // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n      // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n      // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n      listen: function listen(listener) {\n        var _this2 = this;\n        var onPopState = function onPopState() {\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = _this2.index;\n          if (pending.length) {\n            // This was triggered by `history.go(n)`, we shouldn't call the listener\n            return;\n          }\n          listener();\n        };\n        window.addEventListener('popstate', onPopState);\n        return function () {\n          return window.removeEventListener('popstate', onPopState);\n        };\n      }\n    };\n    return history;\n  }\n});","lineCount":230,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,4,0,"exports"],[7,9,4,0],[7,10,4,0,"createMemoryHistory"],[7,29,4,0],[7,32,4,0,"createMemoryHistory"],[7,51,4,0],[8,2,3,0],[8,6,3,0,"_nanoidNonSecure"],[8,22,3,0],[8,25,3,0,"require"],[8,32,3,0],[8,33,3,0,"_dependencyMap"],[8,47,3,0],[9,2,4,7],[9,11,4,16,"createMemoryHistory"],[9,30,4,35,"createMemoryHistory"],[9,31,4,35],[9,33,4,38],[10,4,5,2],[10,8,5,6,"index"],[10,13,5,11],[10,16,5,14],[10,17,5,15],[11,4,6,2],[11,8,6,6,"items"],[11,13,6,11],[11,16,6,14],[11,18,6,16],[13,4,8,2],[14,4,9,2],[15,4,10,2],[15,8,10,8,"pending"],[15,15,10,15],[15,18,10,18],[15,20,10,20],[16,4,11,2],[16,8,11,8,"interrupt"],[16,17,11,17],[16,20,11,20],[16,29,11,8,"interrupt"],[16,38,11,17,"interrupt"],[16,39,11,17],[16,41,11,26],[17,6,12,4],[18,6,13,4],[19,6,14,4],[20,6,15,4,"pending"],[20,13,15,11],[20,14,15,12,"forEach"],[20,21,15,19],[20,22,15,20],[20,32,15,20,"it"],[20,34,15,22],[20,36,15,26],[21,8,16,6],[21,12,16,12,"cb"],[21,14,16,14],[21,17,16,17,"it"],[21,19,16,19],[21,20,16,20,"cb"],[21,22,16,22],[22,8,17,6,"it"],[22,10,17,8],[22,11,17,9,"cb"],[22,13,17,11],[22,16,17,14],[23,10,17,14],[23,17,17,20,"cb"],[23,19,17,22],[23,20,17,23],[23,24,17,27],[23,25,17,28],[24,8,17,28],[25,6,18,4],[25,7,18,5],[25,8,18,6],[26,4,19,2],[26,5,19,3],[27,4,20,2],[27,8,20,8,"history"],[27,15,20,15],[27,18,20,18],[28,6,21,4],[28,10,21,8,"index"],[28,15,21,13,"index"],[28,16,21,13],[28,18,21,16],[29,8,21,16],[29,12,21,16,"_window$history$state"],[29,33,21,16],[30,8,22,6],[31,8,23,6],[32,8,24,6],[32,12,24,12,"id"],[32,14,24,14],[32,18,24,14,"_window$history$state"],[32,39,24,14],[32,42,24,17,"window"],[32,48,24,23],[32,49,24,24,"history"],[32,56,24,31],[32,57,24,32,"state"],[32,62,24,37],[32,83,24,17,"_window$history$state"],[32,104,24,17],[32,105,24,39,"id"],[32,107,24,41],[33,8,25,6],[33,12,25,10,"id"],[33,14,25,12],[33,16,25,14],[34,10,26,8],[34,14,26,14,"index"],[34,20,26,19],[34,23,26,22,"items"],[34,28,26,27],[34,29,26,28,"findIndex"],[34,38,26,37],[34,39,26,38],[34,49,26,38,"item"],[34,53,26,42],[35,12,26,42],[35,19,26,46,"item"],[35,23,26,50],[35,24,26,51,"id"],[35,26,26,53],[35,31,26,58,"id"],[35,33,26,60],[36,10,26,60],[36,12,26,61],[37,10,27,8],[37,17,27,15,"index"],[37,23,27,20],[37,26,27,23],[37,27,27,24],[37,28,27,25],[37,31,27,28,"index"],[37,37,27,33],[37,40,27,36],[37,41,27,37],[38,8,28,6],[39,8,29,6],[39,15,29,13],[39,16,29,14],[40,6,30,4],[40,7,30,5],[41,6,31,4,"get"],[41,9,31,7],[41,20,31,4,"get"],[41,23,31,7,"get"],[41,24,31,8,"index"],[41,29,31,13],[41,31,31,15],[42,8,32,6],[42,15,32,13,"items"],[42,20,32,18],[42,21,32,19,"index"],[42,26,32,24],[42,27,32,25],[43,6,33,4],[43,7,33,5],[44,6,34,4,"backIndex"],[44,15,34,13],[44,26,34,4,"backIndex"],[44,35,34,13,"backIndex"],[44,36,34,13,"_ref"],[44,40,34,13],[44,42,36,7],[45,8,36,7],[45,12,35,6,"path"],[45,16,35,10],[45,19,35,10,"_ref"],[45,23,35,10],[45,24,35,6,"path"],[45,28,35,10],[46,8,37,6],[47,8,38,6],[47,13,38,11],[47,17,38,15,"i"],[47,18,38,16],[47,21,38,19,"index"],[47,26,38,24],[47,29,38,27],[47,30,38,28],[47,32,38,30,"i"],[47,33,38,31],[47,37,38,35],[47,38,38,36],[47,40,38,38,"i"],[47,41,38,39],[47,43,38,41],[47,45,38,43],[48,10,39,8],[48,14,39,14,"item"],[48,18,39,18],[48,21,39,21,"items"],[48,26,39,26],[48,27,39,27,"i"],[48,28,39,28],[48,29,39,29],[49,10,40,8],[49,14,40,12,"item"],[49,18,40,16],[49,19,40,17,"path"],[49,23,40,21],[49,28,40,26,"path"],[49,32,40,30],[49,34,40,32],[50,12,41,10],[50,19,41,17,"i"],[50,20,41,18],[51,10,42,8],[52,8,43,6],[53,8,44,6],[53,15,44,13],[53,16,44,14],[53,17,44,15],[54,6,45,4],[54,7,45,5],[55,6,46,4,"push"],[55,10,46,8],[55,21,46,4,"push"],[55,25,46,8,"push"],[55,26,46,8,"_ref2"],[55,31,46,8],[55,33,49,7],[56,8,49,7],[56,12,47,6,"path"],[56,16,47,10],[56,19,47,10,"_ref2"],[56,24,47,10],[56,25,47,6,"path"],[56,29,47,10],[57,10,48,6,"state"],[57,15,48,11],[57,18,48,11,"_ref2"],[57,23,48,11],[57,24,48,6,"state"],[57,29,48,11],[58,8,50,6,"interrupt"],[58,17,50,15],[58,18,50,16],[58,19,50,17],[59,8,51,6],[59,12,51,12,"id"],[59,14,51,14],[59,17,51,17],[59,21,51,17,"nanoid"],[59,37,51,23],[59,38,51,23,"nanoid"],[59,44,51,23],[59,46,51,24],[59,47,51,25],[61,8,53,6],[62,8,54,6],[63,8,55,6,"items"],[63,13,55,11],[63,16,55,14,"items"],[63,21,55,19],[63,22,55,20,"slice"],[63,27,55,25],[63,28,55,26],[63,29,55,27],[63,31,55,29,"index"],[63,36,55,34],[63,39,55,37],[63,40,55,38],[63,41,55,39],[64,8,56,6,"items"],[64,13,56,11],[64,14,56,12,"push"],[64,18,56,16],[64,19,56,17],[65,10,57,8,"path"],[65,14,57,12],[65,16,57,8,"path"],[65,20,57,12],[66,10,58,8,"state"],[66,15,58,13],[66,17,58,8,"state"],[66,22,58,13],[67,10,59,8,"id"],[67,12,59,10],[67,14,59,8,"id"],[68,8,60,6],[68,9,60,7],[68,10,60,8],[69,8,61,6,"index"],[69,13,61,11],[69,16,61,14,"items"],[69,21,61,19],[69,22,61,20,"length"],[69,28,61,26],[69,31,61,29],[69,32,61,30],[71,8,63,6],[72,8,64,6],[73,8,65,6],[74,8,66,6],[75,8,67,6,"window"],[75,14,67,12],[75,15,67,13,"history"],[75,22,67,20],[75,23,67,21,"pushState"],[75,32,67,30],[75,33,67,31],[76,10,68,8,"id"],[76,12,68,10],[76,14,68,8,"id"],[77,8,69,6],[77,9,69,7],[77,11,69,9],[77,13,69,11],[77,15,69,13,"path"],[77,19,69,17],[77,20,69,18],[78,6,70,4],[78,7,70,5],[79,6,71,4,"replace"],[79,13,71,11],[79,24,71,4,"replace"],[79,31,71,11,"replace"],[79,32,71,11,"_ref3"],[79,37,71,11],[79,39,74,7],[80,8,74,7],[80,12,74,7,"_window$history$state2"],[80,34,74,7],[80,36,74,7,"_window$history$state3"],[80,58,74,7],[81,8,74,7],[81,12,72,6,"path"],[81,16,72,10],[81,19,72,10,"_ref3"],[81,24,72,10],[81,25,72,6,"path"],[81,29,72,10],[82,10,73,6,"state"],[82,15,73,11],[82,18,73,11,"_ref3"],[82,23,73,11],[82,24,73,6,"state"],[82,29,73,11],[83,8,75,6,"interrupt"],[83,17,75,15],[83,18,75,16],[83,19,75,17],[84,8,76,6],[84,12,76,12,"id"],[84,14,76,14],[84,18,76,14,"_window$history$state2"],[84,40,76,14],[84,44,76,14,"_window$history$state3"],[84,66,76,14],[84,69,76,17,"window"],[84,75,76,23],[84,76,76,24,"history"],[84,83,76,31],[84,84,76,32,"state"],[84,89,76,37],[84,110,76,17,"_window$history$state3"],[84,132,76,17],[84,133,76,39,"id"],[84,135,76,41],[84,147,76,41,"_window$history$state2"],[84,169,76,41],[84,172,76,45],[84,176,76,45,"nanoid"],[84,192,76,51],[84,193,76,51,"nanoid"],[84,199,76,51],[84,201,76,52],[84,202,76,53],[86,8,78,6],[87,8,79,6],[88,8,80,6],[88,12,80,10,"pathWithHash"],[88,24,80,22],[88,27,80,25,"path"],[88,31,80,29],[89,8,81,6],[89,12,81,12,"hash"],[89,16,81,16],[89,19,81,19,"pathWithHash"],[89,31,81,31],[89,32,81,32,"includes"],[89,40,81,40],[89,41,81,41],[89,44,81,44],[89,45,81,45],[89,48,81,48],[89,50,81,50],[89,53,81,53,"location"],[89,61,81,61],[89,62,81,62,"hash"],[89,66,81,66],[90,8,82,6],[90,12,82,10],[90,13,82,11,"items"],[90,18,82,16],[90,19,82,17,"length"],[90,25,82,23],[90,29,82,27,"items"],[90,34,82,32],[90,35,82,33,"findIndex"],[90,44,82,42],[90,45,82,43],[90,55,82,43,"item"],[90,59,82,47],[91,10,82,47],[91,17,82,51,"item"],[91,21,82,55],[91,22,82,56,"id"],[91,24,82,58],[91,29,82,63,"id"],[91,31,82,65],[92,8,82,65],[92,10,82,66],[92,13,82,69],[92,14,82,70],[92,16,82,72],[93,10,83,8],[94,10,84,8],[95,10,85,8],[96,10,86,8],[97,10,87,8],[98,10,88,8],[100,10,90,8,"pathWithHash"],[100,22,90,20],[100,25,90,23,"pathWithHash"],[100,37,90,35],[100,40,90,38,"hash"],[100,44,90,42],[101,10,91,8,"items"],[101,15,91,13],[101,18,91,16],[101,19,91,17],[102,12,92,10,"path"],[102,16,92,14],[102,18,92,16,"pathWithHash"],[102,30,92,28],[103,12,93,10,"state"],[103,17,93,15],[103,19,93,10,"state"],[103,24,93,15],[104,12,94,10,"id"],[104,14,94,12],[104,16,94,10,"id"],[105,10,95,8],[105,11,95,9],[105,12,95,10],[106,10,96,8,"index"],[106,15,96,13],[106,18,96,16],[106,19,96,17],[107,8,97,6],[107,9,97,7],[107,15,97,13],[108,10,98,8],[108,14,98,12,"items"],[108,19,98,17],[108,20,98,18,"index"],[108,25,98,23],[108,26,98,24],[108,27,98,25,"path"],[108,31,98,29],[108,36,98,34,"path"],[108,40,98,38],[108,42,98,40],[109,12,99,10,"pathWithHash"],[109,24,99,22],[109,27,99,25,"pathWithHash"],[109,39,99,37],[109,42,99,40,"hash"],[109,46,99,44],[110,10,100,8],[111,10,101,8,"items"],[111,15,101,13],[111,16,101,14,"index"],[111,21,101,19],[111,22,101,20],[111,25,101,23],[112,12,102,10,"path"],[112,16,102,14],[112,18,102,10,"path"],[112,22,102,14],[113,12,103,10,"state"],[113,17,103,15],[113,19,103,10,"state"],[113,24,103,15],[114,12,104,10,"id"],[114,14,104,12],[114,16,104,10,"id"],[115,10,105,8],[115,11,105,9],[116,8,106,6],[117,8,107,6,"window"],[117,14,107,12],[117,15,107,13,"history"],[117,22,107,20],[117,23,107,21,"replaceState"],[117,35,107,33],[117,36,107,34],[118,10,108,8,"id"],[118,12,108,10],[118,14,108,8,"id"],[119,8,109,6],[119,9,109,7],[119,11,109,9],[119,13,109,11],[119,15,109,13,"pathWithHash"],[119,27,109,25],[119,28,109,26],[120,6,110,4],[120,7,110,5],[121,6,111,4],[122,6,112,4],[123,6,113,4],[124,6,114,4],[125,6,115,4],[126,6,116,4,"go"],[126,8,116,6],[126,19,116,4,"go"],[126,21,116,6,"go"],[126,22,116,7,"n"],[126,23,116,8],[126,25,116,10],[127,8,116,10],[127,12,116,10,"_this"],[127,17,116,10],[128,8,117,6,"interrupt"],[128,17,117,15],[128,18,117,16],[128,19,117,17],[130,8,119,6],[131,8,120,6],[132,8,121,6],[132,12,121,12,"nextIndex"],[132,21,121,21],[132,24,121,24,"index"],[132,29,121,29],[132,32,121,32,"n"],[132,33,121,33],[133,8,122,6],[133,12,122,12,"lastItemIndex"],[133,25,122,25],[133,28,122,28,"items"],[133,33,122,33],[133,34,122,34,"length"],[133,40,122,40],[133,43,122,43],[133,44,122,44],[134,8,123,6],[134,12,123,10,"n"],[134,13,123,11],[134,16,123,14],[134,17,123,15],[134,21,123,19],[134,22,123,20,"items"],[134,27,123,25],[134,28,123,26,"nextIndex"],[134,37,123,35],[134,38,123,36],[134,40,123,38],[135,10,124,8],[136,10,125,8,"n"],[136,11,125,9],[136,14,125,12],[136,15,125,13,"index"],[136,20,125,18],[137,10,126,8,"index"],[137,15,126,13],[137,18,126,16],[137,19,126,17],[138,8,127,6],[138,9,127,7],[138,15,127,13],[138,19,127,17,"n"],[138,20,127,18],[138,23,127,21],[138,24,127,22],[138,28,127,26,"nextIndex"],[138,37,127,35],[138,40,127,38,"lastItemIndex"],[138,53,127,51],[138,55,127,53],[139,10,128,8],[140,10,129,8,"n"],[140,11,129,9],[140,14,129,12,"lastItemIndex"],[140,27,129,25],[140,30,129,28,"index"],[140,35,129,33],[141,10,130,8,"index"],[141,15,130,13],[141,18,130,16,"lastItemIndex"],[141,31,130,29],[142,8,131,6],[142,9,131,7],[142,15,131,13],[143,10,132,8,"index"],[143,15,132,13],[143,18,132,16,"nextIndex"],[143,27,132,25],[144,8,133,6],[145,8,134,6],[145,12,134,10,"n"],[145,13,134,11],[145,18,134,16],[145,19,134,17],[145,21,134,19],[146,10,135,8],[147,8,136,6],[149,8,138,6],[150,8,139,6],[151,8,140,6],[152,8,141,6],[153,8,142,6],[154,8,143,6],[154,15,143,13],[154,19,143,17,"Promise"],[154,26,143,24],[154,27,143,25],[154,37,143,26,"resolve"],[154,44,143,33],[154,46,143,35,"reject"],[154,52,143,41],[154,54,143,46],[155,10,144,8],[155,14,144,14,"done"],[155,18,144,18],[155,21,144,21],[155,30,144,14,"done"],[155,34,144,18,"done"],[155,35,144,21,"interrupted"],[155,46,144,32],[155,48,144,36],[156,12,145,10,"clearTimeout"],[156,24,145,22],[156,25,145,23,"timer"],[156,30,145,28],[156,31,145,29],[157,12,146,10],[157,16,146,14,"interrupted"],[157,27,146,25],[157,29,146,27],[158,14,147,12,"reject"],[158,20,147,18],[158,21,147,19],[158,25,147,23,"Error"],[158,30,147,28],[158,31,147,29],[158,71,147,69],[158,72,147,70],[158,73,147,71],[159,14,148,12],[160,12,149,10],[162,12,151,10],[163,12,152,10],[164,12,153,10],[165,12,154,10],[166,12,155,10],[167,12,156,10],[168,12,157,10],[169,12,158,10],[170,12,159,10],[170,16,160,12,"title"],[170,21,160,17],[170,24,161,14,"window"],[170,30,161,20],[170,31,161,21,"document"],[170,39,161,29],[170,40,160,12,"title"],[170,45,160,17],[171,12,162,10,"window"],[171,18,162,16],[171,19,162,17,"document"],[171,27,162,25],[171,28,162,26,"title"],[171,33,162,31],[171,36,162,34],[171,38,162,36],[172,12,163,10,"window"],[172,18,163,16],[172,19,163,17,"document"],[172,27,163,25],[172,28,163,26,"title"],[172,33,163,31],[172,36,163,34,"title"],[172,41,163,39],[173,12,164,10,"resolve"],[173,19,164,17],[173,20,164,18],[173,21,164,19],[174,10,165,8],[174,11,165,9],[175,10,166,8,"pending"],[175,17,166,15],[175,18,166,16,"push"],[175,22,166,20],[175,23,166,21],[176,12,167,10,"ref"],[176,15,167,13],[176,17,167,15,"done"],[176,21,167,19],[177,12,168,10,"cb"],[177,14,168,12],[177,16,168,14,"done"],[178,10,169,8],[178,11,169,9],[178,12,169,10],[180,10,171,8],[181,10,172,8],[182,10,173,8],[183,10,174,8],[184,10,175,8],[185,10,176,8],[185,14,176,14,"timer"],[185,19,176,19],[185,22,176,22,"setTimeout"],[185,32,176,32],[185,33,176,33],[185,45,176,39],[186,12,177,10],[186,16,177,16,"foundIndex"],[186,26,177,26],[186,29,177,29,"pending"],[186,36,177,36],[186,37,177,37,"findIndex"],[186,46,177,46],[186,47,177,47],[186,57,177,47,"it"],[186,59,177,49],[187,14,177,49],[187,21,177,53,"it"],[187,23,177,55],[187,24,177,56,"ref"],[187,27,177,59],[187,32,177,64,"done"],[187,36,177,68],[188,12,177,68],[188,14,177,69],[189,12,178,10],[189,16,178,14,"foundIndex"],[189,26,178,24],[189,29,178,27],[189,30,178,28],[189,31,178,29],[189,33,178,31],[190,14,179,12,"pending"],[190,21,179,19],[190,22,179,20,"foundIndex"],[190,32,179,30],[190,33,179,31],[190,34,179,32,"cb"],[190,36,179,34],[190,37,179,35],[190,38,179,36],[191,14,180,12,"pending"],[191,21,180,19],[191,22,180,20,"splice"],[191,28,180,26],[191,29,180,27,"foundIndex"],[191,39,180,37],[191,41,180,39],[191,42,180,40],[191,43,180,41],[192,12,181,10],[193,12,182,10,"index"],[193,17,182,15],[193,20,182,18,"_this"],[193,25,182,22],[193,26,182,23,"index"],[193,31,182,28],[194,10,183,8],[194,11,183,9],[194,13,183,11],[194,16,183,14],[194,17,183,15],[195,10,184,8],[195,14,184,14,"onPopState"],[195,25,184,24],[195,28,184,27],[195,37,184,14,"onPopState"],[195,47,184,24,"onPopState"],[195,48,184,24],[195,50,184,33],[196,12,185,10],[197,12,186,10],[198,12,187,10,"index"],[198,17,187,15],[198,20,187,18,"_this"],[198,25,187,22],[198,26,187,23,"index"],[198,31,187,28],[199,12,188,10],[199,16,188,16,"last"],[199,20,188,20],[199,23,188,23,"pending"],[199,30,188,30],[199,31,188,31,"pop"],[199,34,188,34],[199,35,188,35],[199,36,188,36],[200,12,189,10,"window"],[200,18,189,16],[200,19,189,17,"removeEventListener"],[200,38,189,36],[200,39,189,37],[200,49,189,47],[200,51,189,49,"onPopState"],[200,62,189,59],[200,63,189,60],[201,12,190,10,"last"],[201,16,190,14],[201,28,190,10,"last"],[201,32,190,14],[201,33,190,16,"cb"],[201,35,190,18],[201,36,190,19],[201,37,190,20],[202,10,191,8],[202,11,191,9],[203,10,192,8,"window"],[203,16,192,14],[203,17,192,15,"addEventListener"],[203,33,192,31],[203,34,192,32],[203,44,192,42],[203,46,192,44,"onPopState"],[203,57,192,54],[203,58,192,55],[204,10,193,8,"window"],[204,16,193,14],[204,17,193,15,"history"],[204,24,193,22],[204,25,193,23,"go"],[204,27,193,25],[204,28,193,26,"n"],[204,29,193,27],[204,30,193,28],[205,8,194,6],[205,9,194,7],[205,10,194,8],[206,6,195,4],[206,7,195,5],[207,6,196,4],[208,6,197,4],[209,6,198,4],[210,6,199,4,"listen"],[210,12,199,10],[210,23,199,4,"listen"],[210,29,199,10,"listen"],[210,30,199,11,"listener"],[210,38,199,19],[210,40,199,21],[211,8,199,21],[211,12,199,21,"_this2"],[211,18,199,21],[212,8,200,6],[212,12,200,12,"onPopState"],[212,22,200,22],[212,25,200,25],[212,34,200,12,"onPopState"],[212,44,200,22,"onPopState"],[212,45,200,22],[212,47,200,31],[213,10,201,8],[214,10,202,8],[215,10,203,8,"index"],[215,15,203,13],[215,18,203,16,"_this2"],[215,24,203,20],[215,25,203,21,"index"],[215,30,203,26],[216,10,204,8],[216,14,204,12,"pending"],[216,21,204,19],[216,22,204,20,"length"],[216,28,204,26],[216,30,204,28],[217,12,205,10],[218,12,206,10],[219,10,207,8],[220,10,208,8,"listener"],[220,18,208,16],[220,19,208,17],[220,20,208,18],[221,8,209,6],[221,9,209,7],[222,8,210,6,"window"],[222,14,210,12],[222,15,210,13,"addEventListener"],[222,31,210,29],[222,32,210,30],[222,42,210,40],[222,44,210,42,"onPopState"],[222,54,210,52],[222,55,210,53],[223,8,211,6],[223,15,211,13],[224,10,211,13],[224,17,211,19,"window"],[224,23,211,25],[224,24,211,26,"removeEventListener"],[224,43,211,45],[224,44,211,46],[224,54,211,56],[224,56,211,58,"onPopState"],[224,66,211,68],[224,67,211,69],[225,8,211,69],[226,6,212,4],[227,4,213,2],[227,5,213,3],[228,4,214,2],[228,11,214,9,"history"],[228,18,214,16],[229,2,215,0],[230,0,215,1],[230,3]],"functionMap":{"names":["<global>","createMemoryHistory","interrupt","pending.forEach$argument_0","it.cb","history.get__index","items.findIndex$argument_0","history.get","history.backIndex","history.push","history.replace","history.go","Promise$argument_0","done","setTimeout$argument_0","pending.findIndex$argument_0","onPopState","history.listen","<anonymous>"],"mappings":"AAA;OCG;oBCO;oBCI;cCE,cD;KDC;GDC;IIE;sCCK,sBD;KJI;IMC;KNE;IOC;KPW;IQC;KRwB;ISC;2CJW,sBI;KT4B;IUM;yBC2B;qBCC;SDqB;iCEW;+CCC,qBD;SFM;2BIC;SJO;ODG;KVC;IgBI;yBDC;OCS;aCE,wDD;KhBC;CDG"},"hasCjsExports":false},"type":"js/module"}]}