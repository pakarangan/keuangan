{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":29,"index":254},"end":{"line":13,"column":84,"index":309}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"],"imports":1}},{"name":"../../../exports/InteractionManager","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":49,"index":421},"end":{"line":16,"column":95,"index":467}}],"key":"YEq8oxgDO+OiwzomPPrXw2nm8a0=","exportNames":["*"],"imports":1}},{"name":"../TouchHistoryMath","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":17,"column":47,"index":517},"end":{"line":17,"column":77,"index":547}}],"key":"wyElrgoqED92dP4NUkFC3c6JIVE=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  'use strict';\n\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\").default;\n  exports.__esModule = true;\n  exports.default = void 0;\n  var _InteractionManager = _interopRequireDefault(require(_dependencyMap[1], \"../../../exports/InteractionManager\"));\n  var _TouchHistoryMath = _interopRequireDefault(require(_dependencyMap[2], \"../TouchHistoryMath\"));\n  var currentCentroidXOfTouchesChangedAfter = _TouchHistoryMath.default.currentCentroidXOfTouchesChangedAfter;\n  var currentCentroidYOfTouchesChangedAfter = _TouchHistoryMath.default.currentCentroidYOfTouchesChangedAfter;\n  var previousCentroidXOfTouchesChangedAfter = _TouchHistoryMath.default.previousCentroidXOfTouchesChangedAfter;\n  var previousCentroidYOfTouchesChangedAfter = _TouchHistoryMath.default.previousCentroidYOfTouchesChangedAfter;\n  var currentCentroidX = _TouchHistoryMath.default.currentCentroidX;\n  var currentCentroidY = _TouchHistoryMath.default.currentCentroidY;\n\n  /**\n   * `PanResponder` reconciles several touches into a single gesture. It makes\n   * single-touch gestures resilient to extra touches, and can be used to\n   * recognize simple multi-touch gestures.\n   *\n   * By default, `PanResponder` holds an `InteractionManager` handle to block\n   * long-running JS events from interrupting active gestures.\n   *\n   * It provides a predictable wrapper of the responder handlers provided by the\n   * [gesture responder system](docs/gesture-responder-system.html).\n   * For each handler, it provides a new `gestureState` object alongside the\n   * native event object:\n   *\n   * ```\n   * onPanResponderMove: (event, gestureState) => {}\n   * ```\n   *\n   * A native event is a synthetic touch event with the following form:\n   *\n   *  - `nativeEvent`\n   *      + `changedTouches` - Array of all touch events that have changed since the last event\n   *      + `identifier` - The ID of the touch\n   *      + `locationX` - The X position of the touch, relative to the element\n   *      + `locationY` - The Y position of the touch, relative to the element\n   *      + `pageX` - The X position of the touch, relative to the root element\n   *      + `pageY` - The Y position of the touch, relative to the root element\n   *      + `target` - The node id of the element receiving the touch event\n   *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n   *      + `touches` - Array of all current touches on the screen\n   *\n   * A `gestureState` object has the following:\n   *\n   *  - `stateID` - ID of the gestureState- persisted as long as there at least\n   *     one touch on screen\n   *  - `moveX` - the latest screen coordinates of the recently-moved touch\n   *  - `moveY` - the latest screen coordinates of the recently-moved touch\n   *  - `x0` - the screen coordinates of the responder grant\n   *  - `y0` - the screen coordinates of the responder grant\n   *  - `dx` - accumulated distance of the gesture since the touch started\n   *  - `dy` - accumulated distance of the gesture since the touch started\n   *  - `vx` - current velocity of the gesture\n   *  - `vy` - current velocity of the gesture\n   *  - `numberActiveTouches` - Number of touches currently on screen\n   *\n   * ### Basic Usage\n   *\n   * ```\n   *   componentWillMount: function() {\n   *     this._panResponder = PanResponder.create({\n   *       // Ask to be the responder:\n   *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n   *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n   *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n   *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n   *\n   *       onPanResponderGrant: (evt, gestureState) => {\n   *         // The gesture has started. Show visual feedback so the user knows\n   *         // what is happening!\n   *\n   *         // gestureState.d{x,y} will be set to zero now\n   *       },\n   *       onPanResponderMove: (evt, gestureState) => {\n   *         // The most recent move distance is gestureState.move{X,Y}\n   *\n   *         // The accumulated gesture distance since becoming responder is\n   *         // gestureState.d{x,y}\n   *       },\n   *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n   *       onPanResponderRelease: (evt, gestureState) => {\n   *         // The user has released all touches while this view is the\n   *         // responder. This typically means a gesture has succeeded\n   *       },\n   *       onPanResponderTerminate: (evt, gestureState) => {\n   *         // Another component has become the responder, so this gesture\n   *         // should be cancelled\n   *       },\n   *       onShouldBlockNativeResponder: (evt, gestureState) => {\n   *         // Returns whether this component should block native components from becoming the JS\n   *         // responder. Returns true by default. Is currently only supported on android.\n   *         return true;\n   *       },\n   *     });\n   *   },\n   *\n   *   render: function() {\n   *     return (\n   *       <View {...this._panResponder.panHandlers} />\n   *     );\n   *   },\n   *\n   * ```\n   *\n   * ### Working Example\n   *\n   * To see it in action, try the\n   * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/master/RNTester/js/PanResponderExample.js)\n   */\n\n  var PanResponder = {\n    /**\n     *\n     * A graphical explanation of the touch data flow:\n     *\n     * +----------------------------+             +--------------------------------+\n     * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n     * +----------------------------+             +----------+---------------------+\n     * |Global store of touchHistory|             |Allocation-less math util       |\n     * |including activeness, start |             |on touch history (centroids     |\n     * |position, prev/cur position.|             |and multitouch movement etc)    |\n     * |                            |             |                                |\n     * +----^-----------------------+             +----^---------------------------+\n     *      |                                          |\n     *      | (records relevant history                |\n     *      |  of touches relevant for                 |\n     *      |  implementing higher level               |\n     *      |  gestures)                               |\n     *      |                                          |\n     * +----+-----------------------+             +----|---------------------------+\n     * | ResponderEventPlugin       |             |    |   Your App/Component      |\n     * +----------------------------+             +----|---------------------------+\n     * |Negotiates which view gets  | Low level   |    |             High level    |\n     * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n     * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n     * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n     * +----------------------------+ attached to |  |         |     distance and  |\n     *                                 each event |  +---------+     velocity.     |\n     *                                            |                                |\n     *                                            |                                |\n     *                                            +--------------------------------+\n     *\n     *\n     *\n     * Gesture that calculates cumulative movement over time in a way that just\n     * \"does the right thing\" for multiple touches. The \"right thing\" is very\n     * nuanced. When moving two touches in opposite directions, the cumulative\n     * distance is zero in each dimension. When two touches move in parallel five\n     * pixels in the same direction, the cumulative distance is five, not ten. If\n     * two touches start, one moves five in a direction, then stops and the other\n     * touch moves fives in the same direction, the cumulative distance is ten.\n     *\n     * This logic requires a kind of processing of time \"clusters\" of touch events\n     * so that two touch moves that essentially occur in parallel but move every\n     * other frame respectively, are considered part of the same movement.\n     *\n     * Explanation of some of the non-obvious fields:\n     *\n     * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n     *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n     *   centroid of the most recently moved \"cluster\" of active touches.\n     *   (Currently all move have the same timeStamp, but later we should add some\n     *   threshold for what is considered to be \"moving\"). If a palm is\n     *   accidentally counted as a touch, but a finger is moving greatly, the palm\n     *   will move slightly, but we only want to count the single moving touch.\n     * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n     *   responder.\n     * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n     *   distance. Accounts for touch moves that are clustered together in time,\n     *   moving the same direction. Only valid when currently responder (otherwise,\n     *   it only represents the drag distance below the threshold).\n     * - vx/vy: Velocity.\n     */\n    _initializeGestureState: function _initializeGestureState(gestureState) {\n      gestureState.moveX = 0;\n      gestureState.moveY = 0;\n      gestureState.x0 = 0;\n      gestureState.y0 = 0;\n      gestureState.dx = 0;\n      gestureState.dy = 0;\n      gestureState.vx = 0;\n      gestureState.vy = 0;\n      gestureState.numberActiveTouches = 0;\n      // All `gestureState` accounts for timeStamps up until:\n      gestureState._accountsForMovesUpTo = 0;\n    },\n    /**\n     * This is nuanced and is necessary. It is incorrect to continuously take all\n     * active *and* recently moved touches, find the centroid, and track how that\n     * result changes over time. Instead, we must take all recently moved\n     * touches, and calculate how the centroid has changed just for those\n     * recently moved touches, and append that change to an accumulator. This is\n     * to (at least) handle the case where the user is moving three fingers, and\n     * then one of the fingers stops but the other two continue.\n     *\n     * This is very different than taking all of the recently moved touches and\n     * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n     * changes* in the centroid of recently moved touches.\n     *\n     * There is also some nuance with how we handle multiple moved touches in a\n     * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n     * individual events, multiple touches generate two 'move' events, each of\n     * them triggering `onResponderMove`. But with the way `PanResponder` works,\n     * all of the gesture inference is performed on the first dispatch, since it\n     * looks at all of the touches (even the ones for which there hasn't been a\n     * native dispatch yet). Therefore, `PanResponder` does not call\n     * `onResponderMove` passed the first dispatch. This diverges from the\n     * typical responder callback pattern (without using `PanResponder`), but\n     * avoids more dispatches than necessary.\n     */\n    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n      gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n      gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n      var movedAfter = gestureState._accountsForMovesUpTo;\n      var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n      var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n      var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n      var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n      var nextDX = gestureState.dx + (x - prevX);\n      var nextDY = gestureState.dy + (y - prevY);\n\n      // TODO: This must be filtered intelligently.\n      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n      gestureState.vx = (nextDX - gestureState.dx) / dt;\n      gestureState.vy = (nextDY - gestureState.dy) / dt;\n      gestureState.dx = nextDX;\n      gestureState.dy = nextDY;\n      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n    },\n    /**\n     * @param {object} config Enhanced versions of all of the responder callbacks\n     * that provide not only the typical `ResponderSyntheticEvent`, but also the\n     * `PanResponder` gesture state.  Simply replace the word `Responder` with\n     * `PanResponder` in each of the typical `onResponder*` callbacks. For\n     * example, the `config` object would look like:\n     *\n     *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n     *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n     *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n     *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n     *  - `onPanResponderReject: (e, gestureState) => {...}`\n     *  - `onPanResponderGrant: (e, gestureState) => {...}`\n     *  - `onPanResponderStart: (e, gestureState) => {...}`\n     *  - `onPanResponderEnd: (e, gestureState) => {...}`\n     *  - `onPanResponderRelease: (e, gestureState) => {...}`\n     *  - `onPanResponderMove: (e, gestureState) => {...}`\n     *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n     *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n     *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n     *\n     *  In general, for events that have capture equivalents, we update the\n     *  gestureState once in the capture phase and can use it in the bubble phase\n     *  as well.\n     *\n     *  Be careful with onStartShould* callbacks. They only reflect updated\n     *  `gestureState` for start/end events that bubble/capture to the Node.\n     *  Once the node is the responder, you can rely on every start/end event\n     *  being processed by the gesture and `gestureState` being updated\n     *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n     *  are the responder.\n     */\n    create: function create(config) {\n      var interactionState = {\n        handle: null,\n        shouldCancelClick: false,\n        timeout: null\n      };\n      var gestureState = {\n        // Useful for debugging\n        stateID: Math.random(),\n        moveX: 0,\n        moveY: 0,\n        x0: 0,\n        y0: 0,\n        dx: 0,\n        dy: 0,\n        vx: 0,\n        vy: 0,\n        numberActiveTouches: 0,\n        _accountsForMovesUpTo: 0\n      };\n      var panHandlers = {\n        onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n          return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n        },\n        onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {\n          return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n        },\n        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(event) {\n          // TODO: Actually, we should reinitialize the state any time\n          // touches.length increases from 0 active to > 0 active.\n          if (event.nativeEvent.touches.length === 1) {\n            PanResponder._initializeGestureState(gestureState);\n          }\n          gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n          return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n        },\n        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(event) {\n          var touchHistory = event.touchHistory;\n          // Responder system incorrectly dispatches should* to current responder\n          // Filter out any touch moves past the first one - we would have\n          // already processed multi-touch geometry during the first event.\n          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n            return false;\n          }\n          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n        },\n        onResponderGrant: function onResponderGrant(event) {\n          if (!interactionState.handle) {\n            interactionState.handle = _InteractionManager.default.createInteractionHandle();\n          }\n          if (interactionState.timeout) {\n            clearInteractionTimeout(interactionState);\n          }\n          interactionState.shouldCancelClick = true;\n          gestureState.x0 = currentCentroidX(event.touchHistory);\n          gestureState.y0 = currentCentroidY(event.touchHistory);\n          gestureState.dx = 0;\n          gestureState.dy = 0;\n          if (config.onPanResponderGrant) {\n            config.onPanResponderGrant(event, gestureState);\n          }\n          // TODO: t7467124 investigate if this can be removed\n          return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n        },\n        onResponderReject: function onResponderReject(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n        },\n        onResponderRelease: function onResponderRelease(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n          setInteractionTimeout(interactionState);\n          PanResponder._initializeGestureState(gestureState);\n        },\n        onResponderStart: function onResponderStart(event) {\n          var touchHistory = event.touchHistory;\n          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n          if (config.onPanResponderStart) {\n            config.onPanResponderStart(event, gestureState);\n          }\n        },\n        onResponderMove: function onResponderMove(event) {\n          var touchHistory = event.touchHistory;\n          // Guard against the dispatch of two touch moves when there are two\n          // simultaneously changed touches.\n          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n            return;\n          }\n          // Filter out any touch moves past the first one - we would have\n          // already processed multi-touch geometry during the first event.\n          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n          if (config.onPanResponderMove) {\n            config.onPanResponderMove(event, gestureState);\n          }\n        },\n        onResponderEnd: function onResponderEnd(event) {\n          var touchHistory = event.touchHistory;\n          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n          clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n        },\n        onResponderTerminate: function onResponderTerminate(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n          setInteractionTimeout(interactionState);\n          PanResponder._initializeGestureState(gestureState);\n        },\n        onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n          return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n        },\n        // We do not want to trigger 'click' activated gestures or native behaviors\n        // on any pan target that is under a mouse cursor when it is released.\n        // Browsers will natively cancel 'click' events on a target if a non-mouse\n        // active pointer moves.\n        onClickCapture: function onClickCapture(event) {\n          if (interactionState.shouldCancelClick === true) {\n            event.stopPropagation();\n            event.preventDefault();\n          }\n        }\n      };\n      return {\n        panHandlers: panHandlers,\n        getInteractionHandle: function getInteractionHandle() {\n          return interactionState.handle;\n        }\n      };\n    }\n  };\n  function clearInteractionHandle(interactionState, callback, event, gestureState) {\n    if (interactionState.handle) {\n      _InteractionManager.default.clearInteractionHandle(interactionState.handle);\n      interactionState.handle = null;\n    }\n    if (callback) {\n      callback(event, gestureState);\n    }\n  }\n  function clearInteractionTimeout(interactionState) {\n    clearTimeout(interactionState.timeout);\n  }\n  function setInteractionTimeout(interactionState) {\n    interactionState.timeout = setTimeout(function () {\n      interactionState.shouldCancelClick = false;\n    }, 250);\n  }\n  var _default = exports.default = PanResponder;\n  module.exports = exports.default;\n});","lineCount":421,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,13,0],[14,6,13,4,"_interopRequireDefault"],[14,28,13,26],[14,31,13,29,"require"],[14,38,13,36],[14,39,13,36,"_dependencyMap"],[14,53,13,36],[14,104,13,83],[14,105,13,84],[14,106,13,85,"default"],[14,113,13,92],[15,2,14,0,"exports"],[15,9,14,7],[15,10,14,8,"__esModule"],[15,20,14,18],[15,23,14,21],[15,27,14,25],[16,2,15,0,"exports"],[16,9,15,7],[16,10,15,8,"default"],[16,17,15,15],[16,20,15,18],[16,25,15,23],[16,26,15,24],[17,2,16,0],[17,6,16,4,"_InteractionManager"],[17,25,16,23],[17,28,16,26,"_interopRequireDefault"],[17,50,16,48],[17,51,16,49,"require"],[17,58,16,56],[17,59,16,56,"_dependencyMap"],[17,73,16,56],[17,115,16,94],[17,116,16,95],[17,117,16,96],[18,2,17,0],[18,6,17,4,"_TouchHistoryMath"],[18,23,17,21],[18,26,17,24,"_interopRequireDefault"],[18,48,17,46],[18,49,17,47,"require"],[18,56,17,54],[18,57,17,54,"_dependencyMap"],[18,71,17,54],[18,97,17,76],[18,98,17,77],[18,99,17,78],[19,2,18,0],[19,6,18,4,"currentCentroidXOfTouchesChangedAfter"],[19,43,18,41],[19,46,18,44,"_TouchHistoryMath"],[19,63,18,61],[19,64,18,62,"default"],[19,71,18,69],[19,72,18,70,"currentCentroidXOfTouchesChangedAfter"],[19,109,18,107],[20,2,19,0],[20,6,19,4,"currentCentroidYOfTouchesChangedAfter"],[20,43,19,41],[20,46,19,44,"_TouchHistoryMath"],[20,63,19,61],[20,64,19,62,"default"],[20,71,19,69],[20,72,19,70,"currentCentroidYOfTouchesChangedAfter"],[20,109,19,107],[21,2,20,0],[21,6,20,4,"previousCentroidXOfTouchesChangedAfter"],[21,44,20,42],[21,47,20,45,"_TouchHistoryMath"],[21,64,20,62],[21,65,20,63,"default"],[21,72,20,70],[21,73,20,71,"previousCentroidXOfTouchesChangedAfter"],[21,111,20,109],[22,2,21,0],[22,6,21,4,"previousCentroidYOfTouchesChangedAfter"],[22,44,21,42],[22,47,21,45,"_TouchHistoryMath"],[22,64,21,62],[22,65,21,63,"default"],[22,72,21,70],[22,73,21,71,"previousCentroidYOfTouchesChangedAfter"],[22,111,21,109],[23,2,22,0],[23,6,22,4,"currentCentroidX"],[23,22,22,20],[23,25,22,23,"_TouchHistoryMath"],[23,42,22,40],[23,43,22,41,"default"],[23,50,22,48],[23,51,22,49,"currentCentroidX"],[23,67,22,65],[24,2,23,0],[24,6,23,4,"currentCentroidY"],[24,22,23,20],[24,25,23,23,"_TouchHistoryMath"],[24,42,23,40],[24,43,23,41,"default"],[24,50,23,48],[24,51,23,49,"currentCentroidY"],[24,67,23,65],[26,2,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,0,42,0],[44,0,43,0],[45,0,44,0],[46,0,45,0],[47,0,46,0],[48,0,47,0],[49,0,48,0],[50,0,49,0],[51,0,50,0],[52,0,51,0],[53,0,52,0],[54,0,53,0],[55,0,54,0],[56,0,55,0],[57,0,56,0],[58,0,57,0],[59,0,58,0],[60,0,59,0],[61,0,60,0],[62,0,61,0],[63,0,62,0],[64,0,63,0],[65,0,64,0],[66,0,65,0],[67,0,66,0],[68,0,67,0],[69,0,68,0],[70,0,69,0],[71,0,70,0],[72,0,71,0],[73,0,72,0],[74,0,73,0],[75,0,74,0],[76,0,75,0],[77,0,76,0],[78,0,77,0],[79,0,78,0],[80,0,79,0],[81,0,80,0],[82,0,81,0],[83,0,82,0],[84,0,83,0],[85,0,84,0],[86,0,85,0],[87,0,86,0],[88,0,87,0],[89,0,88,0],[90,0,89,0],[91,0,90,0],[92,0,91,0],[93,0,92,0],[94,0,93,0],[95,0,94,0],[96,0,95,0],[97,0,96,0],[98,0,97,0],[99,0,98,0],[100,0,99,0],[101,0,100,0],[102,0,101,0],[103,0,102,0],[104,0,103,0],[105,0,104,0],[106,0,105,0],[107,0,106,0],[108,0,107,0],[109,0,108,0],[110,0,109,0],[111,0,110,0],[112,0,111,0],[113,0,112,0],[114,0,113,0],[115,0,114,0],[116,0,115,0],[117,0,116,0],[118,0,117,0],[119,0,118,0],[120,0,119,0],[121,0,120,0],[122,0,121,0],[124,2,123,0],[124,6,123,4,"PanResponder"],[124,18,123,16],[124,21,123,19],[125,4,124,2],[126,0,125,0],[127,0,126,0],[128,0,127,0],[129,0,128,0],[130,0,129,0],[131,0,130,0],[132,0,131,0],[133,0,132,0],[134,0,133,0],[135,0,134,0],[136,0,135,0],[137,0,136,0],[138,0,137,0],[139,0,138,0],[140,0,139,0],[141,0,140,0],[142,0,141,0],[143,0,142,0],[144,0,143,0],[145,0,144,0],[146,0,145,0],[147,0,146,0],[148,0,147,0],[149,0,148,0],[150,0,149,0],[151,0,150,0],[152,0,151,0],[153,0,152,0],[154,0,153,0],[155,0,154,0],[156,0,155,0],[157,0,156,0],[158,0,157,0],[159,0,158,0],[160,0,159,0],[161,0,160,0],[162,0,161,0],[163,0,162,0],[164,0,163,0],[165,0,164,0],[166,0,165,0],[167,0,166,0],[168,0,167,0],[169,0,168,0],[170,0,169,0],[171,0,170,0],[172,0,171,0],[173,0,172,0],[174,0,173,0],[175,0,174,0],[176,0,175,0],[177,0,176,0],[178,0,177,0],[179,0,178,0],[180,0,179,0],[181,0,180,0],[182,0,181,0],[183,0,182,0],[184,0,183,0],[185,0,184,0],[186,0,185,0],[187,4,187,2,"_initializeGestureState"],[187,27,187,25],[187,38,187,2,"_initializeGestureState"],[187,61,187,25,"_initializeGestureState"],[187,62,187,26,"gestureState"],[187,74,187,38],[187,76,187,40],[188,6,188,4,"gestureState"],[188,18,188,16],[188,19,188,17,"moveX"],[188,24,188,22],[188,27,188,25],[188,28,188,26],[189,6,189,4,"gestureState"],[189,18,189,16],[189,19,189,17,"moveY"],[189,24,189,22],[189,27,189,25],[189,28,189,26],[190,6,190,4,"gestureState"],[190,18,190,16],[190,19,190,17,"x0"],[190,21,190,19],[190,24,190,22],[190,25,190,23],[191,6,191,4,"gestureState"],[191,18,191,16],[191,19,191,17,"y0"],[191,21,191,19],[191,24,191,22],[191,25,191,23],[192,6,192,4,"gestureState"],[192,18,192,16],[192,19,192,17,"dx"],[192,21,192,19],[192,24,192,22],[192,25,192,23],[193,6,193,4,"gestureState"],[193,18,193,16],[193,19,193,17,"dy"],[193,21,193,19],[193,24,193,22],[193,25,193,23],[194,6,194,4,"gestureState"],[194,18,194,16],[194,19,194,17,"vx"],[194,21,194,19],[194,24,194,22],[194,25,194,23],[195,6,195,4,"gestureState"],[195,18,195,16],[195,19,195,17,"vy"],[195,21,195,19],[195,24,195,22],[195,25,195,23],[196,6,196,4,"gestureState"],[196,18,196,16],[196,19,196,17,"numberActiveTouches"],[196,38,196,36],[196,41,196,39],[196,42,196,40],[197,6,197,4],[198,6,198,4,"gestureState"],[198,18,198,16],[198,19,198,17,"_accountsForMovesUpTo"],[198,40,198,38],[198,43,198,41],[198,44,198,42],[199,4,199,2],[199,5,199,3],[200,4,200,2],[201,0,201,0],[202,0,202,0],[203,0,203,0],[204,0,204,0],[205,0,205,0],[206,0,206,0],[207,0,207,0],[208,0,208,0],[209,0,209,0],[210,0,210,0],[211,0,211,0],[212,0,212,0],[213,0,213,0],[214,0,214,0],[215,0,215,0],[216,0,216,0],[217,0,217,0],[218,0,218,0],[219,0,219,0],[220,0,220,0],[221,0,221,0],[222,0,222,0],[223,0,223,0],[224,4,224,2,"_updateGestureStateOnMove"],[224,29,224,27],[224,40,224,2,"_updateGestureStateOnMove"],[224,65,224,27,"_updateGestureStateOnMove"],[224,66,224,28,"gestureState"],[224,78,224,40],[224,80,224,42,"touchHistory"],[224,92,224,54],[224,94,224,56],[225,6,225,4,"gestureState"],[225,18,225,16],[225,19,225,17,"numberActiveTouches"],[225,38,225,36],[225,41,225,39,"touchHistory"],[225,53,225,51],[225,54,225,52,"numberActiveTouches"],[225,73,225,71],[226,6,226,4,"gestureState"],[226,18,226,16],[226,19,226,17,"moveX"],[226,24,226,22],[226,27,226,25,"currentCentroidXOfTouchesChangedAfter"],[226,64,226,62],[226,65,226,63,"touchHistory"],[226,77,226,75],[226,79,226,77,"gestureState"],[226,91,226,89],[226,92,226,90,"_accountsForMovesUpTo"],[226,113,226,111],[226,114,226,112],[227,6,227,4,"gestureState"],[227,18,227,16],[227,19,227,17,"moveY"],[227,24,227,22],[227,27,227,25,"currentCentroidYOfTouchesChangedAfter"],[227,64,227,62],[227,65,227,63,"touchHistory"],[227,77,227,75],[227,79,227,77,"gestureState"],[227,91,227,89],[227,92,227,90,"_accountsForMovesUpTo"],[227,113,227,111],[227,114,227,112],[228,6,228,4],[228,10,228,8,"movedAfter"],[228,20,228,18],[228,23,228,21,"gestureState"],[228,35,228,33],[228,36,228,34,"_accountsForMovesUpTo"],[228,57,228,55],[229,6,229,4],[229,10,229,8,"prevX"],[229,15,229,13],[229,18,229,16,"previousCentroidXOfTouchesChangedAfter"],[229,56,229,54],[229,57,229,55,"touchHistory"],[229,69,229,67],[229,71,229,69,"movedAfter"],[229,81,229,79],[229,82,229,80],[230,6,230,4],[230,10,230,8,"x"],[230,11,230,9],[230,14,230,12,"currentCentroidXOfTouchesChangedAfter"],[230,51,230,49],[230,52,230,50,"touchHistory"],[230,64,230,62],[230,66,230,64,"movedAfter"],[230,76,230,74],[230,77,230,75],[231,6,231,4],[231,10,231,8,"prevY"],[231,15,231,13],[231,18,231,16,"previousCentroidYOfTouchesChangedAfter"],[231,56,231,54],[231,57,231,55,"touchHistory"],[231,69,231,67],[231,71,231,69,"movedAfter"],[231,81,231,79],[231,82,231,80],[232,6,232,4],[232,10,232,8,"y"],[232,11,232,9],[232,14,232,12,"currentCentroidYOfTouchesChangedAfter"],[232,51,232,49],[232,52,232,50,"touchHistory"],[232,64,232,62],[232,66,232,64,"movedAfter"],[232,76,232,74],[232,77,232,75],[233,6,233,4],[233,10,233,8,"nextDX"],[233,16,233,14],[233,19,233,17,"gestureState"],[233,31,233,29],[233,32,233,30,"dx"],[233,34,233,32],[233,38,233,36,"x"],[233,39,233,37],[233,42,233,40,"prevX"],[233,47,233,45],[233,48,233,46],[234,6,234,4],[234,10,234,8,"nextDY"],[234,16,234,14],[234,19,234,17,"gestureState"],[234,31,234,29],[234,32,234,30,"dy"],[234,34,234,32],[234,38,234,36,"y"],[234,39,234,37],[234,42,234,40,"prevY"],[234,47,234,45],[234,48,234,46],[236,6,236,4],[237,6,237,4],[237,10,237,8,"dt"],[237,12,237,10],[237,15,237,13,"touchHistory"],[237,27,237,25],[237,28,237,26,"mostRecentTimeStamp"],[237,47,237,45],[237,50,237,48,"gestureState"],[237,62,237,60],[237,63,237,61,"_accountsForMovesUpTo"],[237,84,237,82],[238,6,238,4,"gestureState"],[238,18,238,16],[238,19,238,17,"vx"],[238,21,238,19],[238,24,238,22],[238,25,238,23,"nextDX"],[238,31,238,29],[238,34,238,32,"gestureState"],[238,46,238,44],[238,47,238,45,"dx"],[238,49,238,47],[238,53,238,51,"dt"],[238,55,238,53],[239,6,239,4,"gestureState"],[239,18,239,16],[239,19,239,17,"vy"],[239,21,239,19],[239,24,239,22],[239,25,239,23,"nextDY"],[239,31,239,29],[239,34,239,32,"gestureState"],[239,46,239,44],[239,47,239,45,"dy"],[239,49,239,47],[239,53,239,51,"dt"],[239,55,239,53],[240,6,240,4,"gestureState"],[240,18,240,16],[240,19,240,17,"dx"],[240,21,240,19],[240,24,240,22,"nextDX"],[240,30,240,28],[241,6,241,4,"gestureState"],[241,18,241,16],[241,19,241,17,"dy"],[241,21,241,19],[241,24,241,22,"nextDY"],[241,30,241,28],[242,6,242,4,"gestureState"],[242,18,242,16],[242,19,242,17,"_accountsForMovesUpTo"],[242,40,242,38],[242,43,242,41,"touchHistory"],[242,55,242,53],[242,56,242,54,"mostRecentTimeStamp"],[242,75,242,73],[243,4,243,2],[243,5,243,3],[244,4,244,2],[245,0,245,0],[246,0,246,0],[247,0,247,0],[248,0,248,0],[249,0,249,0],[250,0,250,0],[251,0,251,0],[252,0,252,0],[253,0,253,0],[254,0,254,0],[255,0,255,0],[256,0,256,0],[257,0,257,0],[258,0,258,0],[259,0,259,0],[260,0,260,0],[261,0,261,0],[262,0,262,0],[263,0,263,0],[264,0,264,0],[265,0,265,0],[266,0,266,0],[267,0,267,0],[268,0,268,0],[269,0,269,0],[270,0,270,0],[271,0,271,0],[272,0,272,0],[273,0,273,0],[274,0,274,0],[275,0,275,0],[276,4,276,2,"create"],[276,10,276,8],[276,21,276,2,"create"],[276,27,276,8,"create"],[276,28,276,9,"config"],[276,34,276,15],[276,36,276,17],[277,6,277,4],[277,10,277,8,"interactionState"],[277,26,277,24],[277,29,277,27],[278,8,278,6,"handle"],[278,14,278,12],[278,16,278,14],[278,20,278,18],[279,8,279,6,"shouldCancelClick"],[279,25,279,23],[279,27,279,25],[279,32,279,30],[280,8,280,6,"timeout"],[280,15,280,13],[280,17,280,15],[281,6,281,4],[281,7,281,5],[282,6,282,4],[282,10,282,8,"gestureState"],[282,22,282,20],[282,25,282,23],[283,8,283,6],[284,8,284,6,"stateID"],[284,15,284,13],[284,17,284,15,"Math"],[284,21,284,19],[284,22,284,20,"random"],[284,28,284,26],[284,29,284,27],[284,30,284,28],[285,8,285,6,"moveX"],[285,13,285,11],[285,15,285,13],[285,16,285,14],[286,8,286,6,"moveY"],[286,13,286,11],[286,15,286,13],[286,16,286,14],[287,8,287,6,"x0"],[287,10,287,8],[287,12,287,10],[287,13,287,11],[288,8,288,6,"y0"],[288,10,288,8],[288,12,288,10],[288,13,288,11],[289,8,289,6,"dx"],[289,10,289,8],[289,12,289,10],[289,13,289,11],[290,8,290,6,"dy"],[290,10,290,8],[290,12,290,10],[290,13,290,11],[291,8,291,6,"vx"],[291,10,291,8],[291,12,291,10],[291,13,291,11],[292,8,292,6,"vy"],[292,10,292,8],[292,12,292,10],[292,13,292,11],[293,8,293,6,"numberActiveTouches"],[293,27,293,25],[293,29,293,27],[293,30,293,28],[294,8,294,6,"_accountsForMovesUpTo"],[294,29,294,27],[294,31,294,29],[295,6,295,4],[295,7,295,5],[296,6,296,4],[296,10,296,8,"panHandlers"],[296,21,296,19],[296,24,296,22],[297,8,297,6,"onStartShouldSetResponder"],[297,33,297,31],[297,44,297,6,"onStartShouldSetResponder"],[297,69,297,31,"onStartShouldSetResponder"],[297,70,297,32,"event"],[297,75,297,37],[297,77,297,39],[298,10,298,8],[298,17,298,15,"config"],[298,23,298,21],[298,24,298,22,"onStartShouldSetPanResponder"],[298,52,298,50],[298,56,298,54],[298,60,298,58],[298,63,298,61],[298,68,298,66],[298,71,298,69,"config"],[298,77,298,75],[298,78,298,76,"onStartShouldSetPanResponder"],[298,106,298,104],[298,107,298,105,"event"],[298,112,298,110],[298,114,298,112,"gestureState"],[298,126,298,124],[298,127,298,125],[299,8,299,6],[299,9,299,7],[300,8,300,6,"onMoveShouldSetResponder"],[300,32,300,30],[300,43,300,6,"onMoveShouldSetResponder"],[300,67,300,30,"onMoveShouldSetResponder"],[300,68,300,31,"event"],[300,73,300,36],[300,75,300,38],[301,10,301,8],[301,17,301,15,"config"],[301,23,301,21],[301,24,301,22,"onMoveShouldSetPanResponder"],[301,51,301,49],[301,55,301,53],[301,59,301,57],[301,62,301,60],[301,67,301,65],[301,70,301,68,"config"],[301,76,301,74],[301,77,301,75,"onMoveShouldSetPanResponder"],[301,104,301,102],[301,105,301,103,"event"],[301,110,301,108],[301,112,301,110,"gestureState"],[301,124,301,122],[301,125,301,123],[302,8,302,6],[302,9,302,7],[303,8,303,6,"onStartShouldSetResponderCapture"],[303,40,303,38],[303,51,303,6,"onStartShouldSetResponderCapture"],[303,83,303,38,"onStartShouldSetResponderCapture"],[303,84,303,39,"event"],[303,89,303,44],[303,91,303,46],[304,10,304,8],[305,10,305,8],[306,10,306,8],[306,14,306,12,"event"],[306,19,306,17],[306,20,306,18,"nativeEvent"],[306,31,306,29],[306,32,306,30,"touches"],[306,39,306,37],[306,40,306,38,"length"],[306,46,306,44],[306,51,306,49],[306,52,306,50],[306,54,306,52],[307,12,307,10,"PanResponder"],[307,24,307,22],[307,25,307,23,"_initializeGestureState"],[307,48,307,46],[307,49,307,47,"gestureState"],[307,61,307,59],[307,62,307,60],[308,10,308,8],[309,10,309,8,"gestureState"],[309,22,309,20],[309,23,309,21,"numberActiveTouches"],[309,42,309,40],[309,45,309,43,"event"],[309,50,309,48],[309,51,309,49,"touchHistory"],[309,63,309,61],[309,64,309,62,"numberActiveTouches"],[309,83,309,81],[310,10,310,8],[310,17,310,15,"config"],[310,23,310,21],[310,24,310,22,"onStartShouldSetPanResponderCapture"],[310,59,310,57],[310,63,310,61],[310,67,310,65],[310,70,310,68,"config"],[310,76,310,74],[310,77,310,75,"onStartShouldSetPanResponderCapture"],[310,112,310,110],[310,113,310,111,"event"],[310,118,310,116],[310,120,310,118,"gestureState"],[310,132,310,130],[310,133,310,131],[310,136,310,134],[310,141,310,139],[311,8,311,6],[311,9,311,7],[312,8,312,6,"onMoveShouldSetResponderCapture"],[312,39,312,37],[312,50,312,6,"onMoveShouldSetResponderCapture"],[312,81,312,37,"onMoveShouldSetResponderCapture"],[312,82,312,38,"event"],[312,87,312,43],[312,89,312,45],[313,10,313,8],[313,14,313,12,"touchHistory"],[313,26,313,24],[313,29,313,27,"event"],[313,34,313,32],[313,35,313,33,"touchHistory"],[313,47,313,45],[314,10,314,8],[315,10,315,8],[316,10,316,8],[317,10,317,8],[317,14,317,12,"gestureState"],[317,26,317,24],[317,27,317,25,"_accountsForMovesUpTo"],[317,48,317,46],[317,53,317,51,"touchHistory"],[317,65,317,63],[317,66,317,64,"mostRecentTimeStamp"],[317,85,317,83],[317,87,317,85],[318,12,318,10],[318,19,318,17],[318,24,318,22],[319,10,319,8],[320,10,320,8,"PanResponder"],[320,22,320,20],[320,23,320,21,"_updateGestureStateOnMove"],[320,48,320,46],[320,49,320,47,"gestureState"],[320,61,320,59],[320,63,320,61,"touchHistory"],[320,75,320,73],[320,76,320,74],[321,10,321,8],[321,17,321,15,"config"],[321,23,321,21],[321,24,321,22,"onMoveShouldSetPanResponderCapture"],[321,58,321,56],[321,61,321,59,"config"],[321,67,321,65],[321,68,321,66,"onMoveShouldSetPanResponderCapture"],[321,102,321,100],[321,103,321,101,"event"],[321,108,321,106],[321,110,321,108,"gestureState"],[321,122,321,120],[321,123,321,121],[321,126,321,124],[321,131,321,129],[322,8,322,6],[322,9,322,7],[323,8,323,6,"onResponderGrant"],[323,24,323,22],[323,35,323,6,"onResponderGrant"],[323,51,323,22,"onResponderGrant"],[323,52,323,23,"event"],[323,57,323,28],[323,59,323,30],[324,10,324,8],[324,14,324,12],[324,15,324,13,"interactionState"],[324,31,324,29],[324,32,324,30,"handle"],[324,38,324,36],[324,40,324,38],[325,12,325,10,"interactionState"],[325,28,325,26],[325,29,325,27,"handle"],[325,35,325,33],[325,38,325,36,"_InteractionManager"],[325,57,325,55],[325,58,325,56,"default"],[325,65,325,63],[325,66,325,64,"createInteractionHandle"],[325,89,325,87],[325,90,325,88],[325,91,325,89],[326,10,326,8],[327,10,327,8],[327,14,327,12,"interactionState"],[327,30,327,28],[327,31,327,29,"timeout"],[327,38,327,36],[327,40,327,38],[328,12,328,10,"clearInteractionTimeout"],[328,35,328,33],[328,36,328,34,"interactionState"],[328,52,328,50],[328,53,328,51],[329,10,329,8],[330,10,330,8,"interactionState"],[330,26,330,24],[330,27,330,25,"shouldCancelClick"],[330,44,330,42],[330,47,330,45],[330,51,330,49],[331,10,331,8,"gestureState"],[331,22,331,20],[331,23,331,21,"x0"],[331,25,331,23],[331,28,331,26,"currentCentroidX"],[331,44,331,42],[331,45,331,43,"event"],[331,50,331,48],[331,51,331,49,"touchHistory"],[331,63,331,61],[331,64,331,62],[332,10,332,8,"gestureState"],[332,22,332,20],[332,23,332,21,"y0"],[332,25,332,23],[332,28,332,26,"currentCentroidY"],[332,44,332,42],[332,45,332,43,"event"],[332,50,332,48],[332,51,332,49,"touchHistory"],[332,63,332,61],[332,64,332,62],[333,10,333,8,"gestureState"],[333,22,333,20],[333,23,333,21,"dx"],[333,25,333,23],[333,28,333,26],[333,29,333,27],[334,10,334,8,"gestureState"],[334,22,334,20],[334,23,334,21,"dy"],[334,25,334,23],[334,28,334,26],[334,29,334,27],[335,10,335,8],[335,14,335,12,"config"],[335,20,335,18],[335,21,335,19,"onPanResponderGrant"],[335,40,335,38],[335,42,335,40],[336,12,336,10,"config"],[336,18,336,16],[336,19,336,17,"onPanResponderGrant"],[336,38,336,36],[336,39,336,37,"event"],[336,44,336,42],[336,46,336,44,"gestureState"],[336,58,336,56],[336,59,336,57],[337,10,337,8],[338,10,338,8],[339,10,339,8],[339,17,339,15,"config"],[339,23,339,21],[339,24,339,22,"onShouldBlockNativeResponder"],[339,52,339,50],[339,56,339,54],[339,60,339,58],[339,63,339,61],[339,67,339,65],[339,70,339,68,"config"],[339,76,339,74],[339,77,339,75,"onShouldBlockNativeResponder"],[339,105,339,103],[339,106,339,104,"event"],[339,111,339,109],[339,113,339,111,"gestureState"],[339,125,339,123],[339,126,339,124],[340,8,340,6],[340,9,340,7],[341,8,341,6,"onResponderReject"],[341,25,341,23],[341,36,341,6,"onResponderReject"],[341,53,341,23,"onResponderReject"],[341,54,341,24,"event"],[341,59,341,29],[341,61,341,31],[342,10,342,8,"clearInteractionHandle"],[342,32,342,30],[342,33,342,31,"interactionState"],[342,49,342,47],[342,51,342,49,"config"],[342,57,342,55],[342,58,342,56,"onPanResponderReject"],[342,78,342,76],[342,80,342,78,"event"],[342,85,342,83],[342,87,342,85,"gestureState"],[342,99,342,97],[342,100,342,98],[343,8,343,6],[343,9,343,7],[344,8,344,6,"onResponderRelease"],[344,26,344,24],[344,37,344,6,"onResponderRelease"],[344,55,344,24,"onResponderRelease"],[344,56,344,25,"event"],[344,61,344,30],[344,63,344,32],[345,10,345,8,"clearInteractionHandle"],[345,32,345,30],[345,33,345,31,"interactionState"],[345,49,345,47],[345,51,345,49,"config"],[345,57,345,55],[345,58,345,56,"onPanResponderRelease"],[345,79,345,77],[345,81,345,79,"event"],[345,86,345,84],[345,88,345,86,"gestureState"],[345,100,345,98],[345,101,345,99],[346,10,346,8,"setInteractionTimeout"],[346,31,346,29],[346,32,346,30,"interactionState"],[346,48,346,46],[346,49,346,47],[347,10,347,8,"PanResponder"],[347,22,347,20],[347,23,347,21,"_initializeGestureState"],[347,46,347,44],[347,47,347,45,"gestureState"],[347,59,347,57],[347,60,347,58],[348,8,348,6],[348,9,348,7],[349,8,349,6,"onResponderStart"],[349,24,349,22],[349,35,349,6,"onResponderStart"],[349,51,349,22,"onResponderStart"],[349,52,349,23,"event"],[349,57,349,28],[349,59,349,30],[350,10,350,8],[350,14,350,12,"touchHistory"],[350,26,350,24],[350,29,350,27,"event"],[350,34,350,32],[350,35,350,33,"touchHistory"],[350,47,350,45],[351,10,351,8,"gestureState"],[351,22,351,20],[351,23,351,21,"numberActiveTouches"],[351,42,351,40],[351,45,351,43,"touchHistory"],[351,57,351,55],[351,58,351,56,"numberActiveTouches"],[351,77,351,75],[352,10,352,8],[352,14,352,12,"config"],[352,20,352,18],[352,21,352,19,"onPanResponderStart"],[352,40,352,38],[352,42,352,40],[353,12,353,10,"config"],[353,18,353,16],[353,19,353,17,"onPanResponderStart"],[353,38,353,36],[353,39,353,37,"event"],[353,44,353,42],[353,46,353,44,"gestureState"],[353,58,353,56],[353,59,353,57],[354,10,354,8],[355,8,355,6],[355,9,355,7],[356,8,356,6,"onResponderMove"],[356,23,356,21],[356,34,356,6,"onResponderMove"],[356,49,356,21,"onResponderMove"],[356,50,356,22,"event"],[356,55,356,27],[356,57,356,29],[357,10,357,8],[357,14,357,12,"touchHistory"],[357,26,357,24],[357,29,357,27,"event"],[357,34,357,32],[357,35,357,33,"touchHistory"],[357,47,357,45],[358,10,358,8],[359,10,359,8],[360,10,360,8],[360,14,360,12,"gestureState"],[360,26,360,24],[360,27,360,25,"_accountsForMovesUpTo"],[360,48,360,46],[360,53,360,51,"touchHistory"],[360,65,360,63],[360,66,360,64,"mostRecentTimeStamp"],[360,85,360,83],[360,87,360,85],[361,12,361,10],[362,10,362,8],[363,10,363,8],[364,10,364,8],[365,10,365,8,"PanResponder"],[365,22,365,20],[365,23,365,21,"_updateGestureStateOnMove"],[365,48,365,46],[365,49,365,47,"gestureState"],[365,61,365,59],[365,63,365,61,"touchHistory"],[365,75,365,73],[365,76,365,74],[366,10,366,8],[366,14,366,12,"config"],[366,20,366,18],[366,21,366,19,"onPanResponderMove"],[366,39,366,37],[366,41,366,39],[367,12,367,10,"config"],[367,18,367,16],[367,19,367,17,"onPanResponderMove"],[367,37,367,35],[367,38,367,36,"event"],[367,43,367,41],[367,45,367,43,"gestureState"],[367,57,367,55],[367,58,367,56],[368,10,368,8],[369,8,369,6],[369,9,369,7],[370,8,370,6,"onResponderEnd"],[370,22,370,20],[370,33,370,6,"onResponderEnd"],[370,47,370,20,"onResponderEnd"],[370,48,370,21,"event"],[370,53,370,26],[370,55,370,28],[371,10,371,8],[371,14,371,12,"touchHistory"],[371,26,371,24],[371,29,371,27,"event"],[371,34,371,32],[371,35,371,33,"touchHistory"],[371,47,371,45],[372,10,372,8,"gestureState"],[372,22,372,20],[372,23,372,21,"numberActiveTouches"],[372,42,372,40],[372,45,372,43,"touchHistory"],[372,57,372,55],[372,58,372,56,"numberActiveTouches"],[372,77,372,75],[373,10,373,8,"clearInteractionHandle"],[373,32,373,30],[373,33,373,31,"interactionState"],[373,49,373,47],[373,51,373,49,"config"],[373,57,373,55],[373,58,373,56,"onPanResponderEnd"],[373,75,373,73],[373,77,373,75,"event"],[373,82,373,80],[373,84,373,82,"gestureState"],[373,96,373,94],[373,97,373,95],[374,8,374,6],[374,9,374,7],[375,8,375,6,"onResponderTerminate"],[375,28,375,26],[375,39,375,6,"onResponderTerminate"],[375,59,375,26,"onResponderTerminate"],[375,60,375,27,"event"],[375,65,375,32],[375,67,375,34],[376,10,376,8,"clearInteractionHandle"],[376,32,376,30],[376,33,376,31,"interactionState"],[376,49,376,47],[376,51,376,49,"config"],[376,57,376,55],[376,58,376,56,"onPanResponderTerminate"],[376,81,376,79],[376,83,376,81,"event"],[376,88,376,86],[376,90,376,88,"gestureState"],[376,102,376,100],[376,103,376,101],[377,10,377,8,"setInteractionTimeout"],[377,31,377,29],[377,32,377,30,"interactionState"],[377,48,377,46],[377,49,377,47],[378,10,378,8,"PanResponder"],[378,22,378,20],[378,23,378,21,"_initializeGestureState"],[378,46,378,44],[378,47,378,45,"gestureState"],[378,59,378,57],[378,60,378,58],[379,8,379,6],[379,9,379,7],[380,8,380,6,"onResponderTerminationRequest"],[380,37,380,35],[380,48,380,6,"onResponderTerminationRequest"],[380,77,380,35,"onResponderTerminationRequest"],[380,78,380,36,"event"],[380,83,380,41],[380,85,380,43],[381,10,381,8],[381,17,381,15,"config"],[381,23,381,21],[381,24,381,22,"onPanResponderTerminationRequest"],[381,56,381,54],[381,60,381,58],[381,64,381,62],[381,67,381,65],[381,71,381,69],[381,74,381,72,"config"],[381,80,381,78],[381,81,381,79,"onPanResponderTerminationRequest"],[381,113,381,111],[381,114,381,112,"event"],[381,119,381,117],[381,121,381,119,"gestureState"],[381,133,381,131],[381,134,381,132],[382,8,382,6],[382,9,382,7],[383,8,383,6],[384,8,384,6],[385,8,385,6],[386,8,386,6],[387,8,387,6,"onClickCapture"],[387,22,387,20],[387,24,387,22],[387,33,387,6,"onClickCapture"],[387,47,387,20,"onClickCapture"],[387,48,387,22,"event"],[387,53,387,27],[387,55,387,31],[388,10,388,8],[388,14,388,12,"interactionState"],[388,30,388,28],[388,31,388,29,"shouldCancelClick"],[388,48,388,46],[388,53,388,51],[388,57,388,55],[388,59,388,57],[389,12,389,10,"event"],[389,17,389,15],[389,18,389,16,"stopPropagation"],[389,33,389,31],[389,34,389,32],[389,35,389,33],[390,12,390,10,"event"],[390,17,390,15],[390,18,390,16,"preventDefault"],[390,32,390,30],[390,33,390,31],[390,34,390,32],[391,10,391,8],[392,8,392,6],[393,6,393,4],[393,7,393,5],[394,6,394,4],[394,13,394,11],[395,8,395,6,"panHandlers"],[395,19,395,17],[395,21,395,6,"panHandlers"],[395,32,395,17],[396,8,396,6,"getInteractionHandle"],[396,28,396,26],[396,39,396,6,"getInteractionHandle"],[396,59,396,26,"getInteractionHandle"],[396,60,396,26],[396,62,396,29],[397,10,397,8],[397,17,397,15,"interactionState"],[397,33,397,31],[397,34,397,32,"handle"],[397,40,397,38],[398,8,398,6],[399,6,399,4],[399,7,399,5],[400,4,400,2],[401,2,401,0],[401,3,401,1],[402,2,402,0],[402,11,402,9,"clearInteractionHandle"],[402,33,402,31,"clearInteractionHandle"],[402,34,402,32,"interactionState"],[402,50,402,48],[402,52,402,50,"callback"],[402,60,402,58],[402,62,402,60,"event"],[402,67,402,65],[402,69,402,67,"gestureState"],[402,81,402,79],[402,83,402,81],[403,4,403,2],[403,8,403,6,"interactionState"],[403,24,403,22],[403,25,403,23,"handle"],[403,31,403,29],[403,33,403,31],[404,6,404,4,"_InteractionManager"],[404,25,404,23],[404,26,404,24,"default"],[404,33,404,31],[404,34,404,32,"clearInteractionHandle"],[404,56,404,54],[404,57,404,55,"interactionState"],[404,73,404,71],[404,74,404,72,"handle"],[404,80,404,78],[404,81,404,79],[405,6,405,4,"interactionState"],[405,22,405,20],[405,23,405,21,"handle"],[405,29,405,27],[405,32,405,30],[405,36,405,34],[406,4,406,2],[407,4,407,2],[407,8,407,6,"callback"],[407,16,407,14],[407,18,407,16],[408,6,408,4,"callback"],[408,14,408,12],[408,15,408,13,"event"],[408,20,408,18],[408,22,408,20,"gestureState"],[408,34,408,32],[408,35,408,33],[409,4,409,2],[410,2,410,0],[411,2,411,0],[411,11,411,9,"clearInteractionTimeout"],[411,34,411,32,"clearInteractionTimeout"],[411,35,411,33,"interactionState"],[411,51,411,49],[411,53,411,51],[412,4,412,2,"clearTimeout"],[412,16,412,14],[412,17,412,15,"interactionState"],[412,33,412,31],[412,34,412,32,"timeout"],[412,41,412,39],[412,42,412,40],[413,2,413,0],[414,2,414,0],[414,11,414,9,"setInteractionTimeout"],[414,32,414,30,"setInteractionTimeout"],[414,33,414,31,"interactionState"],[414,49,414,47],[414,51,414,49],[415,4,415,2,"interactionState"],[415,20,415,18],[415,21,415,19,"timeout"],[415,28,415,26],[415,31,415,29,"setTimeout"],[415,41,415,39],[415,42,415,40],[415,54,415,46],[416,6,416,4,"interactionState"],[416,22,416,20],[416,23,416,21,"shouldCancelClick"],[416,40,416,38],[416,43,416,41],[416,48,416,46],[417,4,417,2],[417,5,417,3],[417,7,417,5],[417,10,417,8],[417,11,417,9],[418,2,418,0],[419,2,419,0],[419,6,419,4,"_default"],[419,14,419,12],[419,17,419,15,"exports"],[419,24,419,22],[419,25,419,23,"default"],[419,32,419,30],[419,35,419,33,"PanResponder"],[419,47,419,45],[420,2,420,0,"module"],[420,8,420,6],[420,9,420,7,"exports"],[420,16,420,14],[420,19,420,17,"exports"],[420,26,420,24],[420,27,420,25,"default"],[420,34,420,32],[421,0,420,33],[421,3]],"functionMap":{"names":["<global>","PanResponder._initializeGestureState","PanResponder._updateGestureStateOnMove","PanResponder.create","panHandlers.onStartShouldSetResponder","panHandlers.onMoveShouldSetResponder","panHandlers.onStartShouldSetResponderCapture","panHandlers.onMoveShouldSetResponderCapture","panHandlers.onResponderGrant","panHandlers.onResponderReject","panHandlers.onResponderRelease","panHandlers.onResponderStart","panHandlers.onResponderMove","panHandlers.onResponderEnd","panHandlers.onResponderTerminate","panHandlers.onResponderTerminationRequest","panHandlers.onClickCapture","getInteractionHandle","clearInteractionHandle","clearInteractionTimeout","setInteractionTimeout","setTimeout$argument_0"],"mappings":"AAA;EC0L;GDY;EEyB;GFmB;EGiC;MCqB;ODE;MEC;OFE;MGC;OHQ;MIC;OJU;MKC;OLiB;MMC;ONE;MOC;OPI;MQC;ORM;MSC;OTa;MUC;OVI;MWC;OXI;MYC;OZE;sBaK;ObK;McI;OdE;GHE;AkBE;ClBQ;AmBC;CnBE;AoBC;wCCC;GDE;CpBC"},"hasCjsExports":true},"type":"js/module"}]}