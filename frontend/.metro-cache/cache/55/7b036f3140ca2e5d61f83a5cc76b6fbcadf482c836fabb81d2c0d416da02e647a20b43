{"dependencies":[{"name":"@babel/runtime/helpers/objectWithoutProperties","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"fnQVLibs90KHiJ7y48fLgPWzDS0=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/defineProperty","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"X490zePjq+0IljAc8X0qcBg0iTo=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"],"imports":1}},{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":40,"column":17,"index":1637},"end":{"line":40,"column":52,"index":1672}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"],"imports":1}},{"name":"escape-string-regexp","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":47,"index":1721},"end":{"line":41,"column":78,"index":1752}}],"key":"14QBo/6I2jfYu7Ct29OWBvp5ENM=","exportNames":["*"],"imports":1}},{"name":"./findFocusedRoute","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":42,"column":27,"index":1782},"end":{"line":42,"column":56,"index":1811}}],"key":"JPe8xQMI59bnv97OB8syZ4AgEvA=","exportNames":["*"],"imports":1}},{"name":"./getStateFromPath-forks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":43,"column":26,"index":1839},"end":{"line":43,"column":61,"index":1874}}],"key":"R0kZl7h5DI+/CZCR2+pJK8wn5iY=","exportNames":["*"],"imports":1}},{"name":"../constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":44,"column":20,"index":1897},"end":{"line":44,"column":43,"index":1920}}],"key":"zmjjtqoQxi2W71eIMIIaEi1mOpU=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _objectWithoutProperties = require(_dependencyMap[0], \"@babel/runtime/helpers/objectWithoutProperties\").default;\n  var _defineProperty = require(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\").default;\n  var _toConsumableArray = require(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\").default;\n  var _excluded = [\"path\"];\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function get() {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var _ownKeys = function ownKeys(o) {\n      _ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return _ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = _ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  var __importDefault = this && this.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getStateFromPath = getStateFromPath;\n  var native_1 = require(_dependencyMap[3], \"@react-navigation/native\");\n  var escape_string_regexp_1 = __importDefault(require(_dependencyMap[4], \"escape-string-regexp\"));\n  var findFocusedRoute_1 = require(_dependencyMap[5], \"./findFocusedRoute\");\n  var expo = __importStar(require(_dependencyMap[6], \"./getStateFromPath-forks\"));\n  var constants_1 = require(_dependencyMap[7], \"../constants\");\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _options$path;\n    var segments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var _getConfigResources = getConfigResources(options,\n      // START FORK\n      segments\n      // END FORK\n      ),\n      initialRoutes = _getConfigResources.initialRoutes,\n      configs = _getConfigResources.configs,\n      configWithRegexes = _getConfigResources.configWithRegexes;\n    var screens = options == null ? void 0 : options.screens;\n    // START FORK\n    var expoPath = expo.getUrlWithReactNavigationConcessions(path);\n    // END FORK\n    // START FORK\n    var remaining = expo.cleanPath(expoPath.nonstandardPathname);\n    // let remaining = path\n    //   .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    //   .replace(/^\\//, '') // Remove extra leading slash\n    //   .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n    // // Make sure there is a trailing slash\n    // remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    // END FORK\n    var prefix = options == null || (_options$path = options.path) == null ? void 0 : _options$path.replace(/^\\//, ''); // Remove extra leading slash\n    if (prefix) {\n      // Make sure there is a trailing slash\n      var normalizedPrefix = prefix.endsWith('/') ? prefix : `${prefix}/`;\n      // If the path doesn't start with the prefix, it's not a match\n      if (!remaining.startsWith(normalizedPrefix)) {\n        return undefined;\n      }\n      // Remove the prefix from the path\n      remaining = remaining.replace(normalizedPrefix, '');\n    }\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n        var name = decodeURIComponent(segment);\n        return {\n          name: name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(expoPath, _routes, initialRoutes, [], expoPath.url.hash);\n      }\n      return undefined;\n    }\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      // START FORK\n      var match = expo.matchForEmptyPath(configWithRegexes);\n      // const match = configs.find(\n      //   (config) =>\n      //     config.path === '' &&\n      //     config.routeNames.every(\n      //       // Make sure that none of the parent configs have a non-empty path defined\n      //       (name) => !configs.find((c) => c.screen === name)?.path\n      //     )\n      // );\n      // END FORK\n      if (match) {\n        return createNestedStateObject(expoPath, match.routeNames.map(function (name) {\n          return {\n            name: name\n          };\n        }), initialRoutes, configs, expoPath.url.hash);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configWithRegexes),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(expoPath, routes, initialRoutes, configs, expoPath.url.hash);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n  /**\n   * Reference to the last used config resources. This is used to avoid recomputing the config resources when the options are the same.\n   */\n  var cachedConfigResources = [undefined, prepareConfigResources()];\n  function getConfigResources(options,\n  // START FORK\n  previousSegments\n  // END FORK\n  ) {\n    // START FORK - We need to disable this caching as our configs can change based upon the current state\n    // if (cachedConfigResources[0] !== options) {\n    cachedConfigResources = [options, prepareConfigResources(options, previousSegments)];\n    // }\n    // END FORK FORK\n    return cachedConfigResources[1];\n  }\n  function prepareConfigResources(options, previousSegments) {\n    if (options) {\n      (0, native_1.validatePathConfig)(options);\n    }\n    var initialRoutes = getInitialRoutes(options);\n    var configs = getNormalizedConfigs(initialRoutes, options == null ? void 0 : options.screens, previousSegments);\n    checkForDuplicatedConfigs(configs);\n    var configWithRegexes = getConfigsWithRegexes(configs);\n    return {\n      initialRoutes: initialRoutes,\n      configs: configs,\n      configWithRegexes: configWithRegexes\n    };\n  }\n  function getInitialRoutes(options) {\n    var initialRoutes = [];\n    if (options != null && options.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    return initialRoutes;\n  }\n  function getNormalizedConfigs(initialRoutes) {\n    var _ref;\n    var screens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var\n    // START FORK\n    previousSegments\n    // END FORK\n    = arguments.length > 2 ? arguments[2] : undefined;\n    // Create a normalized configs array which will be easier to use\n    return (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(screens).map(function (key) {\n      return _createNormalizedConfigs(key, screens, [], initialRoutes, []);\n    }))).map(expo.appendIsInitial(initialRoutes)).sort(expo.getRouteConfigSorter(previousSegments));\n    // .sort((a, b) => {\n    //   // Sort config so that:\n    //   // - the most exhaustive ones are always at the beginning\n    //   // - patterns with wildcard are always at the end\n    //   // If 2 patterns are same, move the one with less route names up\n    //   // This is an error state, so it's only useful for consistent error messages\n    //   if (a.pattern === b.pattern) {\n    //     return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n    //   }\n    //   // If one of the patterns starts with the other, it's more exhaustive\n    //   // So move it up\n    //   if (a.pattern.startsWith(b.pattern)) {\n    //     return -1;\n    //   }\n    //   if (b.pattern.startsWith(a.pattern)) {\n    //     return 1;\n    //   }\n    //   const aParts = a.pattern.split('/');\n    //   const bParts = b.pattern.split('/');\n    //   for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n    //     // if b is longer, b get higher priority\n    //     if (aParts[i] == null) {\n    //       return 1;\n    //     }\n    //     // if a is longer, a get higher priority\n    //     if (bParts[i] == null) {\n    //       return -1;\n    //     }\n    //     const aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n    //     const bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n    //     // if both are wildcard we compare next component\n    //     if (aWildCard && bWildCard) {\n    //       continue;\n    //     }\n    //     // if only a is wild card, b get higher priority\n    //     if (aWildCard) {\n    //       return 1;\n    //     }\n    //     // if only b is wild card, a get higher priority\n    //     if (bWildCard) {\n    //       return -1;\n    //     }\n    //   }\n    //   return bParts.length - aParts.length;\n    // });\n  }\n  function checkForDuplicatedConfigs(configs) {\n    // Check for duplicate patterns in the config\n    configs.reduce(function (acc, config) {\n      if (acc[config.pattern]) {\n        var a = acc[config.pattern].routeNames;\n        var b = config.routeNames;\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every(function (it, i) {\n          return a[i] === it;\n        }) : a.every(function (it, i) {\n          return b[i] === it;\n        });\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, _defineProperty({}, config.pattern, config));\n    }, {});\n  }\n  function getConfigsWithRegexes(configs) {\n    return configs.map(function (c) {\n      return Object.assign({}, c, {\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        // START FORK\n        // regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n        regex: expo.configRegExp(c)\n        // END FORK\n      });\n    });\n  }\n  var joinPaths = function joinPaths() {\n    var _ref2;\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n      return p.split('/');\n    }))).filter(Boolean).join('/');\n  };\n  var matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n    var routes;\n    var remainingPath = remaining;\n    // START FORK\n    var allParams = Object.create(null);\n    // END FORK\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function _loop(config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          var _config$pattern;\n          var matchResult = (_config$pattern = config.pattern) == null ? void 0 : _config$pattern.split('/').reduce(function (acc, p, index) {\n            if (!expo.isDynamicPart(p)) {\n              return acc;\n            }\n            acc.pos += 1;\n            // START FORK\n            var decodedParamSegment = expo.safelyDecodeURIComponent(\n            // const decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match[(acc.pos + 1) * 2]\n            // Remove trailing slash\n            .replace(/\\/$/, ''));\n            // END FORK\n            Object.assign(acc.matchedParams, _defineProperty({}, p, Object.assign(acc.matchedParams[p] || {}, _defineProperty({}, index, decodedParamSegment))));\n            return acc;\n          }, {\n            pos: -1,\n            matchedParams: {}\n          });\n          var matchedParams = matchResult.matchedParams || {};\n          routes = config.routeNames.map(function (name) {\n            var _routeConfig$pattern$;\n            var routeConfig = configs.find(function (c) {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === name && config.pattern.startsWith(c.pattern);\n            });\n            // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n            var normalizedPath = routeConfig == null ? void 0 : routeConfig.path.split('/').filter(Boolean).join('/');\n            // Get the number of segments in the initial pattern\n            var numInitialSegments = routeConfig == null || (_routeConfig$pattern$ = routeConfig.pattern\n            // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n            .replace(new RegExp(`${(0, escape_string_regexp_1.default)(normalizedPath)}$`), '')) == null ? void 0 : _routeConfig$pattern$.split('/').length;\n            var params = normalizedPath == null ? void 0 : normalizedPath.split('/').reduce(function (acc, p, index) {\n              var _matchedParams$p;\n              if (!expo.isDynamicPart(p)) {\n                return acc;\n              }\n              // Get the real index of the path parameter in the matched path\n              // by offsetting by the number of segments in the initial pattern\n              var offset = numInitialSegments ? numInitialSegments - 1 : 0;\n              // START FORK\n              // const value = matchedParams[p]?.[index + offset];\n              var value = expo.getParamValue(p, (_matchedParams$p = matchedParams[p]) == null ? void 0 : _matchedParams$p[index + offset]);\n              // END FORK\n              if (value) {\n                var _routeConfig$parse;\n                // START FORK\n                // const key = p.replace(/^:/, '').replace(/\\?$/, '');\n                var key = expo.replacePart(p);\n                // END FORK\n                acc[key] = routeConfig != null && (_routeConfig$parse = routeConfig.parse) != null && _routeConfig$parse[key] ? routeConfig.parse[key](value) : value;\n              }\n              return acc;\n            }, {});\n            if (params && Object.keys(params).length) {\n              Object.assign(allParams, params);\n              return {\n                name: name,\n                params: params\n              };\n            }\n            return {\n              name: name\n            };\n          });\n          remainingPath = remainingPath.replace(match[1], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    // START FORK\n    expo.populateParams(routes, allParams);\n    // END FORK\n    return {\n      routes: routes,\n      remainingPath: remainingPath\n    };\n  };\n  var _createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n    var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var initials = arguments.length > 3 ? arguments[3] : undefined;\n    var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n    var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n    // @ts-expect-error: TODO(@kitten): This is entirely untyped. The index access just flags this, but we're not typing the config properly here\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      var _pattern;\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        if (screen !== constants_1.INTERNAL_SLOT_NAME) {\n          configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse, config));\n        }\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens: parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(function (nestedConfig) {\n          var result = _createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, _toConsumableArray(parentScreens), _pattern != null ? _pattern : parentPattern);\n          configs.push.apply(configs, _toConsumableArray(result));\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = function createConfigItem(screen, routeNames, pattern, path) {\n    var parse = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    var config = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    // START FORK\n    var regex = pattern ? expo.routePatternToRegex(pattern) : undefined;\n    // const regex = pattern\n    //   ? new RegExp(\n    //       `^(${pattern\n    //         .split('/')\n    //         .map((it) => {\n    //           if (it.startsWith(':')) {\n    //             return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n    //           }\n    //           return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n    //         })\n    //         .join('')})`\n    //     )\n    //   : undefined;\n    // END FORK\n    return Object.assign({\n      screen: screen,\n      regex: regex,\n      pattern: pattern,\n      path: path,\n      // The routeNames array is mutated, so copy it to keep the current state\n      routeNames: _toConsumableArray(routeNames),\n      parse: parse\n    }, expo.createConfig(screen, pattern, routeNames, config));\n  };\n  var findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute,\n            params: route.params\n          }, Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      } else {\n        return {\n          routes: [Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = function createNestedStateObject(_ref3, routes, initialRoutes, flatConfig, hash) {\n    var path = _ref3.path,\n      expoURL = _objectWithoutProperties(_ref3, _excluded);\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    var state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, findFocusedRoute_1.findFocusedRoute)(state);\n    // START FORK\n    route.path = expoURL.pathWithoutGroups;\n    // route.path = path;\n    // END FORK\n    // START FORK\n    // const params = parseQueryParams(\n    var params = expo.parseQueryParams(path, route, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined, hash);\n    // END FORK\n    // START FORK\n    // expo.handleUrlParams(route, params, hash);\n    if (params) {\n      route.params = Object.assign({}, route.params, params);\n    }\n    // END FORK\n    return state;\n  };\n  // START FORK\n  // const parseQueryParams = (path: string, parseConfig?: Record<string, (value: string) => any>) => {\n  //   const query = path.split('?')[1];\n  //   const params = queryString.parse(query);\n  //   if (parseConfig) {\n  //     Object.keys(params).forEach((name) => {\n  //       if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n  //         params[name] = parseConfig[name](params[name] as string);\n  //       }\n  //     });\n  //   }\n  //   return Object.keys(params).length ? params : undefined;\n  // };\n  // END FORK\n});","lineCount":603,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_objectWithoutProperties"],[4,30,1,13],[4,33,1,13,"require"],[4,40,1,13],[4,41,1,13,"_dependencyMap"],[4,55,1,13],[4,110,1,13,"default"],[4,117,1,13],[5,2,1,13],[5,6,1,13,"_defineProperty"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[5,92,1,13,"default"],[5,99,1,13],[6,2,1,13],[6,6,1,13,"_toConsumableArray"],[6,24,1,13],[6,27,1,13,"require"],[6,34,1,13],[6,35,1,13,"_dependencyMap"],[6,49,1,13],[6,98,1,13,"default"],[6,105,1,13],[7,2,1,13],[7,6,1,13,"_excluded"],[7,15,1,13],[8,2,2,0],[8,6,2,4,"__createBinding"],[8,21,2,19],[8,24,2,23],[8,28,2,27],[8,32,2,31],[8,36,2,35],[8,37,2,36,"__createBinding"],[8,52,2,51],[8,57,2,57,"Object"],[8,63,2,63],[8,64,2,64,"create"],[8,70,2,70],[8,73,2,74],[8,83,2,83,"o"],[8,84,2,84],[8,86,2,86,"m"],[8,87,2,87],[8,89,2,89,"k"],[8,90,2,90],[8,92,2,92,"k2"],[8,94,2,94],[8,96,2,96],[9,4,3,4],[9,8,3,8,"k2"],[9,10,3,10],[9,15,3,15,"undefined"],[9,24,3,24],[9,26,3,26,"k2"],[9,28,3,28],[9,31,3,31,"k"],[9,32,3,32],[10,4,4,4],[10,8,4,8,"desc"],[10,12,4,12],[10,15,4,15,"Object"],[10,21,4,21],[10,22,4,22,"getOwnPropertyDescriptor"],[10,46,4,46],[10,47,4,47,"m"],[10,48,4,48],[10,50,4,50,"k"],[10,51,4,51],[10,52,4,52],[11,4,5,4],[11,8,5,8],[11,9,5,9,"desc"],[11,13,5,13],[11,18,5,18],[11,23,5,23],[11,27,5,27,"desc"],[11,31,5,31],[11,34,5,34],[11,35,5,35,"m"],[11,36,5,36],[11,37,5,37,"__esModule"],[11,47,5,47],[11,50,5,50,"desc"],[11,54,5,54],[11,55,5,55,"writable"],[11,63,5,63],[11,67,5,67,"desc"],[11,71,5,71],[11,72,5,72,"configurable"],[11,84,5,84],[11,85,5,85],[11,87,5,87],[12,6,6,6,"desc"],[12,10,6,10],[12,13,6,13],[13,8,6,15,"enumerable"],[13,18,6,25],[13,20,6,27],[13,24,6,31],[14,8,6,33,"get"],[14,11,6,36],[14,13,6,38],[14,22,6,33,"get"],[14,25,6,36,"get"],[14,26,6,36],[14,28,6,49],[15,10,6,51],[15,17,6,58,"m"],[15,18,6,59],[15,19,6,60,"k"],[15,20,6,61],[15,21,6,62],[16,8,6,64],[17,6,6,66],[17,7,6,67],[18,4,7,4],[19,4,8,4,"Object"],[19,10,8,10],[19,11,8,11,"defineProperty"],[19,25,8,25],[19,26,8,26,"o"],[19,27,8,27],[19,29,8,29,"k2"],[19,31,8,31],[19,33,8,33,"desc"],[19,37,8,37],[19,38,8,38],[20,2,9,0],[20,3,9,1],[20,6,9,6],[20,16,9,15,"o"],[20,17,9,16],[20,19,9,18,"m"],[20,20,9,19],[20,22,9,21,"k"],[20,23,9,22],[20,25,9,24,"k2"],[20,27,9,26],[20,29,9,28],[21,4,10,4],[21,8,10,8,"k2"],[21,10,10,10],[21,15,10,15,"undefined"],[21,24,10,24],[21,26,10,26,"k2"],[21,28,10,28],[21,31,10,31,"k"],[21,32,10,32],[22,4,11,4,"o"],[22,5,11,5],[22,6,11,6,"k2"],[22,8,11,8],[22,9,11,9],[22,12,11,12,"m"],[22,13,11,13],[22,14,11,14,"k"],[22,15,11,15],[22,16,11,16],[23,2,12,0],[23,3,12,2],[23,4,12,3],[24,2,13,0],[24,6,13,4,"__setModuleDefault"],[24,24,13,22],[24,27,13,26],[24,31,13,30],[24,35,13,34],[24,39,13,38],[24,40,13,39,"__setModuleDefault"],[24,58,13,57],[24,63,13,63,"Object"],[24,69,13,69],[24,70,13,70,"create"],[24,76,13,76],[24,79,13,80],[24,89,13,89,"o"],[24,90,13,90],[24,92,13,92,"v"],[24,93,13,93],[24,95,13,95],[25,4,14,4,"Object"],[25,10,14,10],[25,11,14,11,"defineProperty"],[25,25,14,25],[25,26,14,26,"o"],[25,27,14,27],[25,29,14,29],[25,38,14,38],[25,40,14,40],[26,6,14,42,"enumerable"],[26,16,14,52],[26,18,14,54],[26,22,14,58],[27,6,14,60,"value"],[27,11,14,65],[27,13,14,67,"v"],[28,4,14,69],[28,5,14,70],[28,6,14,71],[29,2,15,0],[29,3,15,1],[29,6,15,5],[29,16,15,14,"o"],[29,17,15,15],[29,19,15,17,"v"],[29,20,15,18],[29,22,15,20],[30,4,16,4,"o"],[30,5,16,5],[30,6,16,6],[30,15,16,15],[30,16,16,16],[30,19,16,19,"v"],[30,20,16,20],[31,2,17,0],[31,3,17,1],[31,4,17,2],[32,2,18,0],[32,6,18,4,"__importStar"],[32,18,18,16],[32,21,18,20],[32,25,18,24],[32,29,18,28],[32,33,18,32],[32,34,18,33,"__importStar"],[32,46,18,45],[32,50,18,51],[32,62,18,63],[33,4,19,4],[33,8,19,8,"ownKeys"],[33,16,19,15],[33,19,19,18],[33,28,19,8,"ownKeys"],[33,35,19,15,"ownKeys"],[33,36,19,27,"o"],[33,37,19,28],[33,39,19,30],[34,6,20,8,"ownKeys"],[34,14,20,15],[34,17,20,18,"Object"],[34,23,20,24],[34,24,20,25,"getOwnPropertyNames"],[34,43,20,44],[34,47,20,48],[34,57,20,58,"o"],[34,58,20,59],[34,60,20,61],[35,8,21,12],[35,12,21,16,"ar"],[35,14,21,18],[35,17,21,21],[35,19,21,23],[36,8,22,12],[36,13,22,17],[36,17,22,21,"k"],[36,18,22,22],[36,22,22,26,"o"],[36,23,22,27],[36,25,22,29],[36,29,22,33,"Object"],[36,35,22,39],[36,36,22,40,"prototype"],[36,45,22,49],[36,46,22,50,"hasOwnProperty"],[36,60,22,64],[36,61,22,65,"call"],[36,65,22,69],[36,66,22,70,"o"],[36,67,22,71],[36,69,22,73,"k"],[36,70,22,74],[36,71,22,75],[36,73,22,77,"ar"],[36,75,22,79],[36,76,22,80,"ar"],[36,78,22,82],[36,79,22,83,"length"],[36,85,22,89],[36,86,22,90],[36,89,22,93,"k"],[36,90,22,94],[37,8,23,12],[37,15,23,19,"ar"],[37,17,23,21],[38,6,24,8],[38,7,24,9],[39,6,25,8],[39,13,25,15,"ownKeys"],[39,21,25,22],[39,22,25,23,"o"],[39,23,25,24],[39,24,25,25],[40,4,26,4],[40,5,26,5],[41,4,27,4],[41,11,27,11],[41,21,27,21,"mod"],[41,24,27,24],[41,26,27,26],[42,6,28,8],[42,10,28,12,"mod"],[42,13,28,15],[42,17,28,19,"mod"],[42,20,28,22],[42,21,28,23,"__esModule"],[42,31,28,33],[42,33,28,35],[42,40,28,42,"mod"],[42,43,28,45],[43,6,29,8],[43,10,29,12,"result"],[43,16,29,18],[43,19,29,21],[43,20,29,22],[43,21,29,23],[44,6,30,8],[44,10,30,12,"mod"],[44,13,30,15],[44,17,30,19],[44,21,30,23],[44,23,30,25],[44,28,30,30],[44,32,30,34,"k"],[44,33,30,35],[44,36,30,38,"ownKeys"],[44,44,30,45],[44,45,30,46,"mod"],[44,48,30,49],[44,49,30,50],[44,51,30,52,"i"],[44,52,30,53],[44,55,30,56],[44,56,30,57],[44,58,30,59,"i"],[44,59,30,60],[44,62,30,63,"k"],[44,63,30,64],[44,64,30,65,"length"],[44,70,30,71],[44,72,30,73,"i"],[44,73,30,74],[44,75,30,76],[44,77,30,78],[44,81,30,82,"k"],[44,82,30,83],[44,83,30,84,"i"],[44,84,30,85],[44,85,30,86],[44,90,30,91],[44,99,30,100],[44,101,30,102,"__createBinding"],[44,116,30,117],[44,117,30,118,"result"],[44,123,30,124],[44,125,30,126,"mod"],[44,128,30,129],[44,130,30,131,"k"],[44,131,30,132],[44,132,30,133,"i"],[44,133,30,134],[44,134,30,135],[44,135,30,136],[45,6,31,8,"__setModuleDefault"],[45,24,31,26],[45,25,31,27,"result"],[45,31,31,33],[45,33,31,35,"mod"],[45,36,31,38],[45,37,31,39],[46,6,32,8],[46,13,32,15,"result"],[46,19,32,21],[47,4,33,4],[47,5,33,5],[48,2,34,0],[48,3,34,1],[48,4,34,3],[48,5,34,4],[49,2,35,0],[49,6,35,4,"__importDefault"],[49,21,35,19],[49,24,35,23],[49,28,35,27],[49,32,35,31],[49,36,35,35],[49,37,35,36,"__importDefault"],[49,52,35,51],[49,56,35,56],[49,66,35,66,"mod"],[49,69,35,69],[49,71,35,71],[50,4,36,4],[50,11,36,12,"mod"],[50,14,36,15],[50,18,36,19,"mod"],[50,21,36,22],[50,22,36,23,"__esModule"],[50,32,36,33],[50,35,36,37,"mod"],[50,38,36,40],[50,41,36,43],[51,6,36,45],[51,15,36,54],[51,17,36,56,"mod"],[52,4,36,60],[52,5,36,61],[53,2,37,0],[53,3,37,1],[54,2,38,0,"Object"],[54,8,38,6],[54,9,38,7,"defineProperty"],[54,23,38,21],[54,24,38,22,"exports"],[54,31,38,29],[54,33,38,31],[54,45,38,43],[54,47,38,45],[55,4,38,47,"value"],[55,9,38,52],[55,11,38,54],[56,2,38,59],[56,3,38,60],[56,4,38,61],[57,2,39,0,"exports"],[57,9,39,7],[57,10,39,8,"getStateFromPath"],[57,26,39,24],[57,29,39,27,"getStateFromPath"],[57,45,39,43],[58,2,40,0],[58,6,40,6,"native_1"],[58,14,40,14],[58,17,40,17,"require"],[58,24,40,24],[58,25,40,24,"_dependencyMap"],[58,39,40,24],[58,70,40,51],[58,71,40,52],[59,2,41,0],[59,6,41,6,"escape_string_regexp_1"],[59,28,41,28],[59,31,41,31,"__importDefault"],[59,46,41,46],[59,47,41,47,"require"],[59,54,41,54],[59,55,41,54,"_dependencyMap"],[59,69,41,54],[59,96,41,77],[59,97,41,78],[59,98,41,79],[60,2,42,0],[60,6,42,6,"findFocusedRoute_1"],[60,24,42,24],[60,27,42,27,"require"],[60,34,42,34],[60,35,42,34,"_dependencyMap"],[60,49,42,34],[60,74,42,55],[60,75,42,56],[61,2,43,0],[61,6,43,6,"expo"],[61,10,43,10],[61,13,43,13,"__importStar"],[61,25,43,25],[61,26,43,26,"require"],[61,33,43,33],[61,34,43,33,"_dependencyMap"],[61,48,43,33],[61,79,43,60],[61,80,43,61],[61,81,43,62],[62,2,44,0],[62,6,44,6,"constants_1"],[62,17,44,17],[62,20,44,20,"require"],[62,27,44,27],[62,28,44,27,"_dependencyMap"],[62,42,44,27],[62,61,44,42],[62,62,44,43],[63,2,45,0],[64,0,46,0],[65,0,47,0],[66,0,48,0],[67,0,49,0],[68,0,50,0],[69,0,51,0],[70,0,52,0],[71,0,53,0],[72,0,54,0],[73,0,55,0],[74,0,56,0],[75,0,57,0],[76,0,58,0],[77,0,59,0],[78,0,60,0],[79,0,61,0],[80,0,62,0],[81,0,63,0],[82,0,64,0],[83,0,65,0],[84,2,66,0],[84,11,66,9,"getStateFromPath"],[84,27,66,25,"getStateFromPath"],[84,28,66,26,"path"],[84,32,66,30],[84,34,66,32,"options"],[84,41,66,39],[84,43,70,2],[85,4,70,2],[85,8,70,2,"_options$path"],[85,21,70,2],[86,4,70,2],[86,8,68,0,"segments"],[86,16,68,8],[86,19,68,8,"arguments"],[86,28,68,8],[86,29,68,8,"length"],[86,35,68,8],[86,43,68,8,"arguments"],[86,52,68,8],[86,60,68,8,"undefined"],[86,69,68,8],[86,72,68,8,"arguments"],[86,81,68,8],[86,87,68,11],[86,89,68,13],[87,4,71,4],[87,8,71,4,"_getConfigResources"],[87,27,71,4],[87,30,71,58,"getConfigResources"],[87,48,71,76],[87,49,71,77,"options"],[87,56,71,84],[88,6,72,4],[89,6,73,4,"segments"],[90,6,74,4],[91,6,75,4],[91,7,75,5],[92,6,71,12,"initialRoutes"],[92,19,71,25],[92,22,71,25,"_getConfigResources"],[92,41,71,25],[92,42,71,12,"initialRoutes"],[92,55,71,25],[93,6,71,27,"configs"],[93,13,71,34],[93,16,71,34,"_getConfigResources"],[93,35,71,34],[93,36,71,27,"configs"],[93,43,71,34],[94,6,71,36,"configWithRegexes"],[94,23,71,53],[94,26,71,53,"_getConfigResources"],[94,45,71,53],[94,46,71,36,"configWithRegexes"],[94,63,71,53],[95,4,76,4],[95,8,76,10,"screens"],[95,15,76,17],[95,18,76,20,"options"],[95,25,76,27],[95,45,76,20,"options"],[95,52,76,27],[95,53,76,29,"screens"],[95,60,76,36],[96,4,77,4],[97,4,78,4],[97,8,78,10,"expoPath"],[97,16,78,18],[97,19,78,21,"expo"],[97,23,78,25],[97,24,78,26,"getUrlWithReactNavigationConcessions"],[97,60,78,62],[97,61,78,63,"path"],[97,65,78,67],[97,66,78,68],[98,4,79,4],[99,4,80,4],[100,4,81,4],[100,8,81,8,"remaining"],[100,17,81,17],[100,20,81,20,"expo"],[100,24,81,24],[100,25,81,25,"cleanPath"],[100,34,81,34],[100,35,81,35,"expoPath"],[100,43,81,43],[100,44,81,44,"nonstandardPathname"],[100,63,81,63],[100,64,81,64],[101,4,82,4],[102,4,83,4],[103,4,84,4],[104,4,85,4],[105,4,86,4],[106,4,87,4],[107,4,88,4],[108,4,89,4],[108,8,89,10,"prefix"],[108,14,89,16],[108,17,89,19,"options"],[108,24,89,26],[108,37,89,26,"_options$path"],[108,50,89,26],[108,53,89,19,"options"],[108,60,89,26],[108,61,89,28,"path"],[108,65,89,32],[108,86,89,19,"_options$path"],[108,99,89,19],[108,100,89,34,"replace"],[108,107,89,41],[108,108,89,42],[108,113,89,47],[108,115,89,49],[108,117,89,51],[108,118,89,52],[108,119,89,53],[108,120,89,54],[109,4,90,4],[109,8,90,8,"prefix"],[109,14,90,14],[109,16,90,16],[110,6,91,8],[111,6,92,8],[111,10,92,14,"normalizedPrefix"],[111,26,92,30],[111,29,92,33,"prefix"],[111,35,92,39],[111,36,92,40,"endsWith"],[111,44,92,48],[111,45,92,49],[111,48,92,52],[111,49,92,53],[111,52,92,56,"prefix"],[111,58,92,62],[111,61,92,65],[111,64,92,68,"prefix"],[111,70,92,74],[111,73,92,77],[112,6,93,8],[113,6,94,8],[113,10,94,12],[113,11,94,13,"remaining"],[113,20,94,22],[113,21,94,23,"startsWith"],[113,31,94,33],[113,32,94,34,"normalizedPrefix"],[113,48,94,50],[113,49,94,51],[113,51,94,53],[114,8,95,12],[114,15,95,19,"undefined"],[114,24,95,28],[115,6,96,8],[116,6,97,8],[117,6,98,8,"remaining"],[117,15,98,17],[117,18,98,20,"remaining"],[117,27,98,29],[117,28,98,30,"replace"],[117,35,98,37],[117,36,98,38,"normalizedPrefix"],[117,52,98,54],[117,54,98,56],[117,56,98,58],[117,57,98,59],[118,4,99,4],[119,4,100,4],[119,8,100,8,"screens"],[119,15,100,15],[119,20,100,20,"undefined"],[119,29,100,29],[119,31,100,31],[120,6,101,8],[121,6,102,8],[121,10,102,14,"routes"],[121,17,102,20],[121,20,102,23,"remaining"],[121,29,102,32],[121,30,103,13,"split"],[121,35,103,18],[121,36,103,19],[121,39,103,22],[121,40,103,23],[121,41,104,13,"filter"],[121,47,104,19],[121,48,104,20,"Boolean"],[121,55,104,27],[121,56,104,28],[121,57,105,13,"map"],[121,60,105,16],[121,61,105,17],[121,71,105,18,"segment"],[121,78,105,25],[121,80,105,30],[122,8,106,12],[122,12,106,18,"name"],[122,16,106,22],[122,19,106,25,"decodeURIComponent"],[122,37,106,43],[122,38,106,44,"segment"],[122,45,106,51],[122,46,106,52],[123,8,107,12],[123,15,107,19],[124,10,107,21,"name"],[124,14,107,25],[124,16,107,21,"name"],[125,8,107,26],[125,9,107,27],[126,6,108,8],[126,7,108,9],[126,8,108,10],[127,6,109,8],[127,10,109,12,"routes"],[127,17,109,18],[127,18,109,19,"length"],[127,24,109,25],[127,26,109,27],[128,8,110,12],[128,15,110,19,"createNestedStateObject"],[128,38,110,42],[128,39,110,43,"expoPath"],[128,47,110,51],[128,49,110,53,"routes"],[128,56,110,59],[128,58,110,61,"initialRoutes"],[128,71,110,74],[128,73,110,76],[128,75,110,78],[128,77,110,80,"expoPath"],[128,85,110,88],[128,86,110,89,"url"],[128,89,110,92],[128,90,110,93,"hash"],[128,94,110,97],[128,95,110,98],[129,6,111,8],[130,6,112,8],[130,13,112,15,"undefined"],[130,22,112,24],[131,4,113,4],[132,4,114,4],[132,8,114,8,"remaining"],[132,17,114,17],[132,22,114,22],[132,25,114,25],[132,27,114,27],[133,6,115,8],[134,6,116,8],[135,6,117,8],[136,6,118,8],[136,10,118,14,"match"],[136,15,118,19],[136,18,118,22,"expo"],[136,22,118,26],[136,23,118,27,"matchForEmptyPath"],[136,40,118,44],[136,41,118,45,"configWithRegexes"],[136,58,118,62],[136,59,118,63],[137,6,119,8],[138,6,120,8],[139,6,121,8],[140,6,122,8],[141,6,123,8],[142,6,124,8],[143,6,125,8],[144,6,126,8],[145,6,127,8],[146,6,128,8],[146,10,128,12,"match"],[146,15,128,17],[146,17,128,19],[147,8,129,12],[147,15,129,19,"createNestedStateObject"],[147,38,129,42],[147,39,129,43,"expoPath"],[147,47,129,51],[147,49,129,53,"match"],[147,54,129,58],[147,55,129,59,"routeNames"],[147,65,129,69],[147,66,129,70,"map"],[147,69,129,73],[147,70,129,74],[147,80,129,75,"name"],[147,84,129,79],[148,10,129,79],[148,17,129,85],[149,12,129,87,"name"],[149,16,129,91],[149,18,129,87,"name"],[150,10,129,92],[150,11,129,93],[151,8,129,93],[151,9,129,94],[151,10,129,95],[151,12,129,97,"initialRoutes"],[151,25,129,110],[151,27,129,112,"configs"],[151,34,129,119],[151,36,129,121,"expoPath"],[151,44,129,129],[151,45,129,130,"url"],[151,48,129,133],[151,49,129,134,"hash"],[151,53,129,138],[151,54,129,139],[152,6,130,8],[153,6,131,8],[153,13,131,15,"undefined"],[153,22,131,24],[154,4,132,4],[155,4,133,4],[155,8,133,8,"result"],[155,14,133,14],[156,4,134,4],[156,8,134,8,"current"],[156,15,134,15],[157,4,135,4],[158,4,136,4],[159,4,137,4],[159,8,137,4,"_matchAgainstConfigs"],[159,28,137,4],[159,31,137,38,"matchAgainstConfigs"],[159,50,137,57],[159,51,137,58,"remaining"],[159,60,137,67],[159,62,137,69,"configWithRegexes"],[159,79,137,86],[159,80,137,87],[160,6,137,12,"routes"],[160,12,137,18],[160,15,137,18,"_matchAgainstConfigs"],[160,35,137,18],[160,36,137,12,"routes"],[160,42,137,18],[161,6,137,20,"remainingPath"],[161,19,137,33],[161,22,137,33,"_matchAgainstConfigs"],[161,42,137,33],[161,43,137,20,"remainingPath"],[161,56,137,33],[162,4,138,4],[162,8,138,8,"routes"],[162,14,138,14],[162,19,138,19,"undefined"],[162,28,138,28],[162,30,138,30],[163,6,139,8],[164,6,140,8,"current"],[164,13,140,15],[164,16,140,18,"createNestedStateObject"],[164,39,140,41],[164,40,140,42,"expoPath"],[164,48,140,50],[164,50,140,52,"routes"],[164,56,140,58],[164,58,140,60,"initialRoutes"],[164,71,140,73],[164,73,140,75,"configs"],[164,80,140,82],[164,82,140,84,"expoPath"],[164,90,140,92],[164,91,140,93,"url"],[164,94,140,96],[164,95,140,97,"hash"],[164,99,140,101],[164,100,140,102],[165,6,141,8,"remaining"],[165,15,141,17],[165,18,141,20,"remainingPath"],[165,31,141,33],[166,6,142,8,"result"],[166,12,142,14],[166,15,142,17,"current"],[166,22,142,24],[167,4,143,4],[168,4,144,4],[168,8,144,8,"current"],[168,15,144,15],[168,19,144,19],[168,23,144,23],[168,27,144,27,"result"],[168,33,144,33],[168,37,144,37],[168,41,144,41],[168,43,144,43],[169,6,145,8],[169,13,145,15,"undefined"],[169,22,145,24],[170,4,146,4],[171,4,147,4],[171,11,147,11,"result"],[171,17,147,17],[172,2,148,0],[173,2,149,0],[174,0,150,0],[175,0,151,0],[176,2,152,0],[176,6,152,4,"cachedConfigResources"],[176,27,152,25],[176,30,152,28],[176,31,153,4,"undefined"],[176,40,153,13],[176,42,154,4,"prepareConfigResources"],[176,64,154,26],[176,65,154,27],[176,66,154,28],[176,67,155,1],[177,2,156,0],[177,11,156,9,"getConfigResources"],[177,29,156,27,"getConfigResources"],[177,30,156,28,"options"],[177,37,156,35],[178,2,157,0],[179,2,158,0,"previousSegments"],[180,2,159,0],[181,2,159,0],[181,4,160,2],[182,4,161,4],[183,4,162,4],[184,4,163,4,"cachedConfigResources"],[184,25,163,25],[184,28,163,28],[184,29,163,29,"options"],[184,36,163,36],[184,38,163,38,"prepareConfigResources"],[184,60,163,60],[184,61,163,61,"options"],[184,68,163,68],[184,70,163,70,"previousSegments"],[184,86,163,86],[184,87,163,87],[184,88,163,88],[185,4,164,4],[186,4,165,4],[187,4,166,4],[187,11,166,11,"cachedConfigResources"],[187,32,166,32],[187,33,166,33],[187,34,166,34],[187,35,166,35],[188,2,167,0],[189,2,168,0],[189,11,168,9,"prepareConfigResources"],[189,33,168,31,"prepareConfigResources"],[189,34,168,32,"options"],[189,41,168,39],[189,43,168,41,"previousSegments"],[189,59,168,57],[189,61,168,59],[190,4,169,4],[190,8,169,8,"options"],[190,15,169,15],[190,17,169,17],[191,6,170,8],[191,7,170,9],[191,8,170,10],[191,10,170,12,"native_1"],[191,18,170,20],[191,19,170,21,"validatePathConfig"],[191,37,170,39],[191,39,170,41,"options"],[191,46,170,48],[191,47,170,49],[192,4,171,4],[193,4,172,4],[193,8,172,10,"initialRoutes"],[193,21,172,23],[193,24,172,26,"getInitialRoutes"],[193,40,172,42],[193,41,172,43,"options"],[193,48,172,50],[193,49,172,51],[194,4,173,4],[194,8,173,10,"configs"],[194,15,173,17],[194,18,173,20,"getNormalizedConfigs"],[194,38,173,40],[194,39,173,41,"initialRoutes"],[194,52,173,54],[194,54,173,56,"options"],[194,61,173,63],[194,81,173,56,"options"],[194,88,173,63],[194,89,173,65,"screens"],[194,96,173,72],[194,98,173,74,"previousSegments"],[194,114,173,90],[194,115,173,91],[195,4,174,4,"checkForDuplicatedConfigs"],[195,29,174,29],[195,30,174,30,"configs"],[195,37,174,37],[195,38,174,38],[196,4,175,4],[196,8,175,10,"configWithRegexes"],[196,25,175,27],[196,28,175,30,"getConfigsWithRegexes"],[196,49,175,51],[196,50,175,52,"configs"],[196,57,175,59],[196,58,175,60],[197,4,176,4],[197,11,176,11],[198,6,177,8,"initialRoutes"],[198,19,177,21],[198,21,177,8,"initialRoutes"],[198,34,177,21],[199,6,178,8,"configs"],[199,13,178,15],[199,15,178,8,"configs"],[199,22,178,15],[200,6,179,8,"configWithRegexes"],[200,23,179,25],[200,25,179,8,"configWithRegexes"],[201,4,180,4],[201,5,180,5],[202,2,181,0],[203,2,182,0],[203,11,182,9,"getInitialRoutes"],[203,27,182,25,"getInitialRoutes"],[203,28,182,26,"options"],[203,35,182,33],[203,37,182,35],[204,4,183,4],[204,8,183,10,"initialRoutes"],[204,21,183,23],[204,24,183,26],[204,26,183,28],[205,4,184,4],[205,8,184,8,"options"],[205,15,184,15],[205,27,184,8,"options"],[205,34,184,15],[205,35,184,17,"initialRouteName"],[205,51,184,33],[205,53,184,35],[206,6,185,8,"initialRoutes"],[206,19,185,21],[206,20,185,22,"push"],[206,24,185,26],[206,25,185,27],[207,8,186,12,"initialRouteName"],[207,24,186,28],[207,26,186,30,"options"],[207,33,186,37],[207,34,186,38,"initialRouteName"],[207,50,186,54],[208,8,187,12,"parentScreens"],[208,21,187,25],[208,23,187,27],[209,6,188,8],[209,7,188,9],[209,8,188,10],[210,4,189,4],[211,4,190,4],[211,11,190,11,"initialRoutes"],[211,24,190,24],[212,2,191,0],[213,2,192,0],[213,11,192,9,"getNormalizedConfigs"],[213,31,192,29,"getNormalizedConfigs"],[213,32,192,30,"initialRoutes"],[213,45,192,43],[213,47,196,2],[214,4,196,2],[214,8,196,2,"_ref"],[214,12,196,2],[215,4,196,2],[215,8,192,45,"screens"],[215,15,192,52],[215,18,192,52,"arguments"],[215,27,192,52],[215,28,192,52,"length"],[215,34,192,52],[215,42,192,52,"arguments"],[215,51,192,52],[215,59,192,52,"undefined"],[215,68,192,52],[215,71,192,52,"arguments"],[215,80,192,52],[215,86,192,55],[215,87,192,56],[215,88,192,57],[216,4,192,57],[217,4,193,0],[218,4,194,0,"previousSegments"],[219,4,195,0],[220,4,195,0],[220,6,195,0,"arguments"],[220,15,195,0],[220,16,195,0,"length"],[220,22,195,0],[220,29,195,0,"arguments"],[220,38,195,0],[220,44,195,0,"undefined"],[220,53,195,0],[221,4,197,4],[222,4,198,4],[222,11,198,11],[222,12,198,11,"_ref"],[222,16,198,11],[222,21,198,13],[222,23,199,9,"concat"],[222,29,199,15],[222,30,199,15,"apply"],[222,35,199,15],[222,36,199,15,"_ref"],[222,40,199,15],[222,42,199,15,"_toConsumableArray"],[222,60,199,15],[222,61,199,19,"Object"],[222,67,199,25],[222,68,199,26,"keys"],[222,72,199,30],[222,73,199,31,"screens"],[222,80,199,38],[222,81,199,39],[222,82,199,40,"map"],[222,85,199,43],[222,86,199,44],[222,96,199,45,"key"],[222,99,199,48],[223,6,199,48],[223,13,199,53,"createNormalizedConfigs"],[223,37,199,76],[223,38,199,77,"key"],[223,41,199,80],[223,43,199,82,"screens"],[223,50,199,89],[223,52,199,91],[223,54,199,93],[223,56,199,95,"initialRoutes"],[223,69,199,108],[223,71,199,110],[223,73,199,112],[223,74,199,113],[224,4,199,113],[224,6,199,114],[224,8,199,115],[224,9,200,9,"map"],[224,12,200,12],[224,13,200,13,"expo"],[224,17,200,17],[224,18,200,18,"appendIsInitial"],[224,33,200,33],[224,34,200,34,"initialRoutes"],[224,47,200,47],[224,48,200,48],[224,49,200,49],[224,50,201,9,"sort"],[224,54,201,13],[224,55,201,14,"expo"],[224,59,201,18],[224,60,201,19,"getRouteConfigSorter"],[224,80,201,39],[224,81,201,40,"previousSegments"],[224,97,201,56],[224,98,201,57],[224,99,201,58],[225,4,202,4],[226,4,203,4],[227,4,204,4],[228,4,205,4],[229,4,206,4],[230,4,207,4],[231,4,208,4],[232,4,209,4],[233,4,210,4],[234,4,211,4],[235,4,212,4],[236,4,213,4],[237,4,214,4],[238,4,215,4],[239,4,216,4],[240,4,217,4],[241,4,218,4],[242,4,219,4],[243,4,220,4],[244,4,221,4],[245,4,222,4],[246,4,223,4],[247,4,224,4],[248,4,225,4],[249,4,226,4],[250,4,227,4],[251,4,228,4],[252,4,229,4],[253,4,230,4],[254,4,231,4],[255,4,232,4],[256,4,233,4],[257,4,234,4],[258,4,235,4],[259,4,236,4],[260,4,237,4],[261,4,238,4],[262,4,239,4],[263,4,240,4],[264,4,241,4],[265,4,242,4],[266,4,243,4],[267,4,244,4],[268,4,245,4],[269,4,246,4],[270,2,247,0],[271,2,248,0],[271,11,248,9,"checkForDuplicatedConfigs"],[271,36,248,34,"checkForDuplicatedConfigs"],[271,37,248,35,"configs"],[271,44,248,42],[271,46,248,44],[272,4,249,4],[273,4,250,4,"configs"],[273,11,250,11],[273,12,250,12,"reduce"],[273,18,250,18],[273,19,250,19],[273,29,250,20,"acc"],[273,32,250,23],[273,34,250,25,"config"],[273,40,250,31],[273,42,250,36],[274,6,251,8],[274,10,251,12,"acc"],[274,13,251,15],[274,14,251,16,"config"],[274,20,251,22],[274,21,251,23,"pattern"],[274,28,251,30],[274,29,251,31],[274,31,251,33],[275,8,252,12],[275,12,252,18,"a"],[275,13,252,19],[275,16,252,22,"acc"],[275,19,252,25],[275,20,252,26,"config"],[275,26,252,32],[275,27,252,33,"pattern"],[275,34,252,40],[275,35,252,41],[275,36,252,42,"routeNames"],[275,46,252,52],[276,8,253,12],[276,12,253,18,"b"],[276,13,253,19],[276,16,253,22,"config"],[276,22,253,28],[276,23,253,29,"routeNames"],[276,33,253,39],[277,8,254,12],[278,8,255,12],[279,8,256,12],[279,12,256,18,"intersects"],[279,22,256,28],[279,25,256,31,"a"],[279,26,256,32],[279,27,256,33,"length"],[279,33,256,39],[279,36,256,42,"b"],[279,37,256,43],[279,38,256,44,"length"],[279,44,256,50],[279,47,256,53,"b"],[279,48,256,54],[279,49,256,55,"every"],[279,54,256,60],[279,55,256,61],[279,65,256,62,"it"],[279,67,256,64],[279,69,256,66,"i"],[279,70,256,67],[280,10,256,67],[280,17,256,72,"a"],[280,18,256,73],[280,19,256,74,"i"],[280,20,256,75],[280,21,256,76],[280,26,256,81,"it"],[280,28,256,83],[281,8,256,83],[281,10,256,84],[281,13,256,87,"a"],[281,14,256,88],[281,15,256,89,"every"],[281,20,256,94],[281,21,256,95],[281,31,256,96,"it"],[281,33,256,98],[281,35,256,100,"i"],[281,36,256,101],[282,10,256,101],[282,17,256,106,"b"],[282,18,256,107],[282,19,256,108,"i"],[282,20,256,109],[282,21,256,110],[282,26,256,115,"it"],[282,28,256,117],[283,8,256,117],[283,10,256,118],[284,8,257,12],[284,12,257,16],[284,13,257,17,"intersects"],[284,23,257,27],[284,25,257,29],[285,10,258,16],[285,16,258,22],[285,20,258,26,"Error"],[285,25,258,31],[285,26,258,32],[285,91,258,97,"config"],[285,97,258,103],[285,98,258,104,"pattern"],[285,105,258,111],[285,128,258,134,"a"],[285,129,258,135],[285,130,258,136,"join"],[285,134,258,140],[285,135,258,141],[285,140,258,146],[285,141,258,147],[285,151,258,157,"b"],[285,152,258,158],[285,153,258,159,"join"],[285,157,258,163],[285,158,258,164],[285,163,258,169],[285,164,258,170],[285,236,258,242],[285,237,258,243],[286,8,259,12],[287,6,260,8],[288,6,261,8],[288,13,261,15,"Object"],[288,19,261,21],[288,20,261,22,"assign"],[288,26,261,28],[288,27,261,29,"acc"],[288,30,261,32],[288,32,261,32,"_defineProperty"],[288,47,261,32],[288,52,262,13,"config"],[288,58,262,19],[288,59,262,20,"pattern"],[288,66,262,27],[288,68,262,30,"config"],[288,74,262,36],[288,75,263,9],[288,76,263,10],[289,4,264,4],[289,5,264,5],[289,7,264,7],[289,8,264,8],[289,9,264,9],[289,10,264,10],[290,2,265,0],[291,2,266,0],[291,11,266,9,"getConfigsWithRegexes"],[291,32,266,30,"getConfigsWithRegexes"],[291,33,266,31,"configs"],[291,40,266,38],[291,42,266,40],[292,4,267,4],[292,11,267,11,"configs"],[292,18,267,18],[292,19,267,19,"map"],[292,22,267,22],[292,23,267,23],[292,33,267,24,"c"],[292,34,267,25],[293,6,267,25],[293,13,267,25,"Object"],[293,19,267,25],[293,20,267,25,"assign"],[293,26,267,25],[293,31,268,11,"c"],[293,32,268,12],[294,8,269,8],[295,8,270,8],[296,8,271,8],[297,8,272,8,"regex"],[297,13,272,13],[297,15,272,15,"expo"],[297,19,272,19],[297,20,272,20,"configRegExp"],[297,32,272,32],[297,33,272,33,"c"],[297,34,272,34],[298,8,273,8],[299,6,273,8],[300,4,273,8],[300,5,274,6],[300,6,274,7],[301,2,275,0],[302,2,276,0],[302,6,276,6,"joinPaths"],[302,15,276,15],[302,18,276,18],[302,27,276,6,"joinPaths"],[302,36,276,15,"joinPaths"],[302,37,276,15],[303,4,276,15],[303,8,276,15,"_ref2"],[303,13,276,15],[304,4,276,15],[304,13,276,15,"_len"],[304,17,276,15],[304,20,276,15,"arguments"],[304,29,276,15],[304,30,276,15,"length"],[304,36,276,15],[304,38,276,22,"paths"],[304,43,276,27],[304,50,276,27,"Array"],[304,55,276,27],[304,56,276,27,"_len"],[304,60,276,27],[304,63,276,27,"_key"],[304,67,276,27],[304,73,276,27,"_key"],[304,77,276,27],[304,80,276,27,"_len"],[304,84,276,27],[304,86,276,27,"_key"],[304,90,276,27],[305,6,276,22,"paths"],[305,11,276,27],[305,12,276,27,"_key"],[305,16,276,27],[305,20,276,27,"arguments"],[305,29,276,27],[305,30,276,27,"_key"],[305,34,276,27],[306,4,276,27],[307,4,276,27],[307,11,276,32],[307,12,276,32,"_ref2"],[307,17,276,32],[307,22,276,34],[307,24,277,5,"concat"],[307,30,277,11],[307,31,277,11,"apply"],[307,36,277,11],[307,37,277,11,"_ref2"],[307,42,277,11],[307,44,277,11,"_toConsumableArray"],[307,62,277,11],[307,63,277,15,"paths"],[307,68,277,20],[307,69,277,21,"map"],[307,72,277,24],[307,73,277,25],[307,83,277,26,"p"],[307,84,277,27],[308,6,277,27],[308,13,277,32,"p"],[308,14,277,33],[308,15,277,34,"split"],[308,20,277,39],[308,21,277,40],[308,24,277,43],[308,25,277,44],[309,4,277,44],[309,6,277,45],[309,8,277,46],[309,9,278,5,"filter"],[309,15,278,11],[309,16,278,12,"Boolean"],[309,23,278,19],[309,24,278,20],[309,25,279,5,"join"],[309,29,279,9],[309,30,279,10],[309,33,279,13],[309,34,279,14],[310,2,279,14],[311,2,280,0],[311,6,280,6,"matchAgainstConfigs"],[311,25,280,25],[311,28,280,28],[311,37,280,6,"matchAgainstConfigs"],[311,56,280,25,"matchAgainstConfigs"],[311,57,280,29,"remaining"],[311,66,280,38],[311,68,280,40,"configs"],[311,75,280,47],[311,77,280,52],[312,4,281,4],[312,8,281,8,"routes"],[312,14,281,14],[313,4,282,4],[313,8,282,8,"remainingPath"],[313,21,282,21],[313,24,282,24,"remaining"],[313,33,282,33],[314,4,283,4],[315,4,284,4],[315,8,284,10,"allParams"],[315,17,284,19],[315,20,284,22,"Object"],[315,26,284,28],[315,27,284,29,"create"],[315,33,284,35],[315,34,284,36],[315,38,284,40],[315,39,284,41],[316,4,285,4],[317,4,286,4],[318,4,286,4],[318,8,286,4,"_loop"],[318,13,286,4],[318,25,286,4,"_loop"],[318,31,286,4,"config"],[318,37,286,4],[318,39,287,34],[319,8,288,8],[319,12,288,12],[319,13,288,13,"config"],[319,19,288,19],[319,20,288,20,"regex"],[319,25,288,25],[319,27,288,27],[320,10,288,27],[321,8,290,8],[322,8,291,8],[322,12,291,14,"match"],[322,17,291,19],[322,20,291,22,"remainingPath"],[322,33,291,35],[322,34,291,36,"match"],[322,39,291,41],[322,40,291,42,"config"],[322,46,291,48],[322,47,291,49,"regex"],[322,52,291,54],[322,53,291,55],[323,8,292,8],[324,8,293,8],[324,12,293,12,"match"],[324,17,293,17],[324,19,293,19],[325,10,293,19],[325,14,293,19,"_config$pattern"],[325,29,293,19],[326,10,294,12],[326,14,294,18,"matchResult"],[326,25,294,29],[326,29,294,29,"_config$pattern"],[326,44,294,29],[326,47,294,32,"config"],[326,53,294,38],[326,54,294,39,"pattern"],[326,61,294,46],[326,82,294,32,"_config$pattern"],[326,97,294,32],[326,98,294,48,"split"],[326,103,294,53],[326,104,294,54],[326,107,294,57],[326,108,294,58],[326,109,294,59,"reduce"],[326,115,294,65],[326,116,294,66],[326,126,294,67,"acc"],[326,129,294,70],[326,131,294,72,"p"],[326,132,294,73],[326,134,294,75,"index"],[326,139,294,80],[326,141,294,85],[327,12,295,16],[327,16,295,20],[327,17,295,21,"expo"],[327,21,295,25],[327,22,295,26,"isDynamicPart"],[327,35,295,39],[327,36,295,40,"p"],[327,37,295,41],[327,38,295,42],[327,40,295,44],[328,14,296,20],[328,21,296,27,"acc"],[328,24,296,30],[329,12,297,16],[330,12,298,16,"acc"],[330,15,298,19],[330,16,298,20,"pos"],[330,19,298,23],[330,23,298,27],[330,24,298,28],[331,12,299,16],[332,12,300,16],[332,16,300,22,"decodedParamSegment"],[332,35,300,41],[332,38,300,44,"expo"],[332,42,300,48],[332,43,300,49,"safelyDecodeURIComponent"],[332,67,300,73],[333,12,301,16],[334,12,302,16],[335,12,303,16,"match"],[335,17,303,21],[335,18,303,22],[335,19,303,23,"acc"],[335,22,303,26],[335,23,303,27,"pos"],[335,26,303,30],[335,29,303,33],[335,30,303,34],[335,34,303,38],[335,35,303,39],[336,12,304,20],[337,12,304,20],[337,13,305,21,"replace"],[337,20,305,28],[337,21,305,29],[337,26,305,34],[337,28,305,36],[337,30,305,38],[337,31,305,39],[337,32,305,40],[338,12,306,16],[339,12,307,16,"Object"],[339,18,307,22],[339,19,307,23,"assign"],[339,25,307,29],[339,26,307,30,"acc"],[339,29,307,33],[339,30,307,34,"matchedParams"],[339,43,307,47],[339,45,307,47,"_defineProperty"],[339,60,307,47],[339,65,308,21,"p"],[339,66,308,22],[339,68,308,25,"Object"],[339,74,308,31],[339,75,308,32,"assign"],[339,81,308,38],[339,82,308,39,"acc"],[339,85,308,42],[339,86,308,43,"matchedParams"],[339,99,308,56],[339,100,308,57,"p"],[339,101,308,58],[339,102,308,59],[339,106,308,63],[339,107,308,64],[339,108,308,65],[339,110,308,65,"_defineProperty"],[339,125,308,65],[339,130,309,25,"index"],[339,135,309,30],[339,137,309,33,"decodedParamSegment"],[339,156,309,52],[339,157,310,21],[339,158,310,22],[339,159,311,17],[339,160,311,18],[340,12,312,16],[340,19,312,23,"acc"],[340,22,312,26],[341,10,313,12],[341,11,313,13],[341,13,313,15],[342,12,313,17,"pos"],[342,15,313,20],[342,17,313,22],[342,18,313,23],[342,19,313,24],[343,12,313,26,"matchedParams"],[343,25,313,39],[343,27,313,41],[343,28,313,42],[344,10,313,44],[344,11,313,45],[344,12,313,46],[345,10,314,12],[345,14,314,18,"matchedParams"],[345,27,314,31],[345,30,314,34,"matchResult"],[345,41,314,45],[345,42,314,46,"matchedParams"],[345,55,314,59],[345,59,314,63],[345,60,314,64],[345,61,314,65],[346,10,315,12,"routes"],[346,16,315,18],[346,19,315,21,"config"],[346,25,315,27],[346,26,315,28,"routeNames"],[346,36,315,38],[346,37,315,39,"map"],[346,40,315,42],[346,41,315,43],[346,51,315,44,"name"],[346,55,315,48],[346,57,315,53],[347,12,315,53],[347,16,315,53,"_routeConfig$pattern$"],[347,37,315,53],[348,12,316,16],[348,16,316,22,"routeConfig"],[348,27,316,33],[348,30,316,36,"configs"],[348,37,316,43],[348,38,316,44,"find"],[348,42,316,48],[348,43,316,49],[348,53,316,50,"c"],[348,54,316,51],[348,56,316,56],[349,14,317,20],[350,14,318,20],[350,21,318,27,"c"],[350,22,318,28],[350,23,318,29,"screen"],[350,29,318,35],[350,34,318,40,"name"],[350,38,318,44],[350,42,318,48,"config"],[350,48,318,54],[350,49,318,55,"pattern"],[350,56,318,62],[350,57,318,63,"startsWith"],[350,67,318,73],[350,68,318,74,"c"],[350,69,318,75],[350,70,318,76,"pattern"],[350,77,318,83],[350,78,318,84],[351,12,319,16],[351,13,319,17],[351,14,319,18],[352,12,320,16],[353,12,321,16],[353,16,321,22,"normalizedPath"],[353,30,321,36],[353,33,321,39,"routeConfig"],[353,44,321,50],[353,64,321,39,"routeConfig"],[353,75,321,50],[353,76,321,52,"path"],[353,80,321,56],[353,81,321,57,"split"],[353,86,321,62],[353,87,321,63],[353,90,321,66],[353,91,321,67],[353,92,321,68,"filter"],[353,98,321,74],[353,99,321,75,"Boolean"],[353,106,321,82],[353,107,321,83],[353,108,321,84,"join"],[353,112,321,88],[353,113,321,89],[353,116,321,92],[353,117,321,93],[354,12,322,16],[355,12,323,16],[355,16,323,22,"numInitialSegments"],[355,34,323,40],[355,37,323,43,"routeConfig"],[355,48,323,54],[355,61,323,54,"_routeConfig$pattern$"],[355,82,323,54],[355,85,323,43,"routeConfig"],[355,96,323,54],[355,97,323,56,"pattern"],[356,12,324,20],[357,12,324,20],[357,13,325,21,"replace"],[357,20,325,28],[357,21,325,29],[357,25,325,33,"RegExp"],[357,31,325,39],[357,32,325,40],[357,35,325,43],[357,36,325,44],[357,37,325,45],[357,39,325,47,"escape_string_regexp_1"],[357,61,325,69],[357,62,325,70,"default"],[357,69,325,77],[357,71,325,79,"normalizedPath"],[357,85,325,93],[357,86,325,94],[357,89,325,97],[357,90,325,98],[357,92,325,100],[357,94,325,102],[357,95,325,103],[357,116,323,43,"_routeConfig$pattern$"],[357,137,323,43],[357,138,326,22,"split"],[357,143,326,27],[357,144,326,28],[357,147,326,31],[357,148,326,32],[357,149,326,33,"length"],[357,155,326,39],[358,12,327,16],[358,16,327,22,"params"],[358,22,327,28],[358,25,327,31,"normalizedPath"],[358,39,327,45],[358,59,327,31,"normalizedPath"],[358,73,327,45],[358,74,328,22,"split"],[358,79,328,27],[358,80,328,28],[358,83,328,31],[358,84,328,32],[358,85,329,21,"reduce"],[358,91,329,27],[358,92,329,28],[358,102,329,29,"acc"],[358,105,329,32],[358,107,329,34,"p"],[358,108,329,35],[358,110,329,37,"index"],[358,115,329,42],[358,117,329,47],[359,14,329,47],[359,18,329,47,"_matchedParams$p"],[359,34,329,47],[360,14,330,20],[360,18,330,24],[360,19,330,25,"expo"],[360,23,330,29],[360,24,330,30,"isDynamicPart"],[360,37,330,43],[360,38,330,44,"p"],[360,39,330,45],[360,40,330,46],[360,42,330,48],[361,16,331,24],[361,23,331,31,"acc"],[361,26,331,34],[362,14,332,20],[363,14,333,20],[364,14,334,20],[365,14,335,20],[365,18,335,26,"offset"],[365,24,335,32],[365,27,335,35,"numInitialSegments"],[365,45,335,53],[365,48,335,56,"numInitialSegments"],[365,66,335,74],[365,69,335,77],[365,70,335,78],[365,73,335,81],[365,74,335,82],[366,14,336,20],[367,14,337,20],[368,14,338,20],[368,18,338,26,"value"],[368,23,338,31],[368,26,338,34,"expo"],[368,30,338,38],[368,31,338,39,"getParamValue"],[368,44,338,52],[368,45,338,53,"p"],[368,46,338,54],[368,49,338,54,"_matchedParams$p"],[368,65,338,54],[368,68,338,56,"matchedParams"],[368,81,338,69],[368,82,338,70,"p"],[368,83,338,71],[368,84,338,72],[368,105,338,56,"_matchedParams$p"],[368,121,338,56],[368,122,338,75,"index"],[368,127,338,80],[368,130,338,83,"offset"],[368,136,338,89],[368,137,338,90],[368,138,338,91],[369,14,339,20],[370,14,340,20],[370,18,340,24,"value"],[370,23,340,29],[370,25,340,31],[371,16,340,31],[371,20,340,31,"_routeConfig$parse"],[371,38,340,31],[372,16,341,24],[373,16,342,24],[374,16,343,24],[374,20,343,30,"key"],[374,23,343,33],[374,26,343,36,"expo"],[374,30,343,40],[374,31,343,41,"replacePart"],[374,42,343,52],[374,43,343,53,"p"],[374,44,343,54],[374,45,343,55],[375,16,344,24],[376,16,345,24,"acc"],[376,19,345,27],[376,20,345,28,"key"],[376,23,345,31],[376,24,345,32],[376,27,345,35,"routeConfig"],[376,38,345,46],[376,51,345,46,"_routeConfig$parse"],[376,69,345,46],[376,72,345,35,"routeConfig"],[376,83,345,46],[376,84,345,48,"parse"],[376,89,345,53],[376,102,345,35,"_routeConfig$parse"],[376,120,345,35],[376,121,345,56,"key"],[376,124,345,59],[376,125,345,60],[376,128,345,63,"routeConfig"],[376,139,345,74],[376,140,345,75,"parse"],[376,145,345,80],[376,146,345,81,"key"],[376,149,345,84],[376,150,345,85],[376,151,345,86,"value"],[376,156,345,91],[376,157,345,92],[376,160,345,95,"value"],[376,165,345,100],[377,14,346,20],[378,14,347,20],[378,21,347,27,"acc"],[378,24,347,30],[379,12,348,16],[379,13,348,17],[379,15,348,19],[379,16,348,20],[379,17,348,21],[379,18,348,22],[380,12,349,16],[380,16,349,20,"params"],[380,22,349,26],[380,26,349,30,"Object"],[380,32,349,36],[380,33,349,37,"keys"],[380,37,349,41],[380,38,349,42,"params"],[380,44,349,48],[380,45,349,49],[380,46,349,50,"length"],[380,52,349,56],[380,54,349,58],[381,14,350,20,"Object"],[381,20,350,26],[381,21,350,27,"assign"],[381,27,350,33],[381,28,350,34,"allParams"],[381,37,350,43],[381,39,350,45,"params"],[381,45,350,51],[381,46,350,52],[382,14,351,20],[382,21,351,27],[383,16,351,29,"name"],[383,20,351,33],[383,22,351,29,"name"],[383,26,351,33],[384,16,351,35,"params"],[384,22,351,41],[384,24,351,35,"params"],[385,14,351,42],[385,15,351,43],[386,12,352,16],[387,12,353,16],[387,19,353,23],[388,14,353,25,"name"],[388,18,353,29],[388,20,353,25,"name"],[389,12,353,30],[389,13,353,31],[390,10,354,12],[390,11,354,13],[390,12,354,14],[391,10,355,12,"remainingPath"],[391,23,355,25],[391,26,355,28,"remainingPath"],[391,39,355,41],[391,40,355,42,"replace"],[391,47,355,49],[391,48,355,50,"match"],[391,53,355,55],[391,54,355,56],[391,55,355,57],[391,56,355,58],[391,58,355,60],[391,60,355,62],[391,61,355,63],[392,10,355,64],[393,8,357,8],[394,6,358,4],[394,7,358,5],[395,6,358,5,"_ret"],[395,10,358,5],[396,4,287,4],[396,9,287,9],[396,13,287,15,"config"],[396,19,287,21],[396,23,287,25,"configs"],[396,30,287,32],[397,6,287,32,"_ret"],[397,10,287,32],[397,13,287,32,"_loop"],[397,18,287,32],[397,19,287,32,"config"],[397,25,287,32],[398,6,287,32],[398,10,287,32,"_ret"],[398,14,287,32],[398,22,289,12],[399,6,289,21],[399,10,289,21,"_ret"],[399,14,289,21],[399,22,356,12],[400,4,356,18],[401,4,359,4],[402,4,360,4,"expo"],[402,8,360,8],[402,9,360,9,"populateParams"],[402,23,360,23],[402,24,360,24,"routes"],[402,30,360,30],[402,32,360,32,"allParams"],[402,41,360,41],[402,42,360,42],[403,4,361,4],[404,4,362,4],[404,11,362,11],[405,6,362,13,"routes"],[405,12,362,19],[405,14,362,13,"routes"],[405,20,362,19],[406,6,362,21,"remainingPath"],[406,19,362,34],[406,21,362,21,"remainingPath"],[407,4,362,35],[407,5,362,36],[408,2,363,0],[408,3,363,1],[409,2,364,0],[409,6,364,6,"createNormalizedConfigs"],[409,30,364,29],[409,33,364,32],[409,42,364,6,"createNormalizedConfigs"],[409,65,364,29,"createNormalizedConfigs"],[409,66,364,33,"screen"],[409,72,364,39],[409,74,364,41,"routeConfig"],[409,85,364,52],[409,87,364,114],[410,4,364,114],[410,8,364,54,"routeNames"],[410,18,364,64],[410,21,364,64,"arguments"],[410,30,364,64],[410,31,364,64,"length"],[410,37,364,64],[410,45,364,64,"arguments"],[410,54,364,64],[410,62,364,64,"undefined"],[410,71,364,64],[410,74,364,64,"arguments"],[410,83,364,64],[410,89,364,67],[410,91,364,69],[411,4,364,69],[411,8,364,71,"initials"],[411,16,364,79],[411,19,364,79,"arguments"],[411,28,364,79],[411,29,364,79,"length"],[411,35,364,79],[411,42,364,79,"arguments"],[411,51,364,79],[411,57,364,79,"undefined"],[411,66,364,79],[412,4,364,79],[412,8,364,81,"parentScreens"],[412,21,364,94],[412,24,364,94,"arguments"],[412,33,364,94],[412,34,364,94,"length"],[412,40,364,94],[412,47,364,94,"arguments"],[412,56,364,94],[412,62,364,94,"undefined"],[412,71,364,94],[413,4,364,94],[413,8,364,96,"parentPattern"],[413,21,364,109],[413,24,364,109,"arguments"],[413,33,364,109],[413,34,364,109,"length"],[413,40,364,109],[413,47,364,109,"arguments"],[413,56,364,109],[413,62,364,109,"undefined"],[413,71,364,109],[414,4,365,4],[414,8,365,10,"configs"],[414,15,365,17],[414,18,365,20],[414,20,365,22],[415,4,366,4,"routeNames"],[415,14,366,14],[415,15,366,15,"push"],[415,19,366,19],[415,20,366,20,"screen"],[415,26,366,26],[415,27,366,27],[416,4,367,4,"parentScreens"],[416,17,367,17],[416,18,367,18,"push"],[416,22,367,22],[416,23,367,23,"screen"],[416,29,367,29],[416,30,367,30],[417,4,368,4],[418,4,369,4],[418,8,369,10,"config"],[418,14,369,16],[418,17,369,19,"routeConfig"],[418,28,369,30],[418,29,369,31,"screen"],[418,35,369,37],[418,36,369,38],[419,4,370,4],[419,8,370,8],[419,15,370,15,"config"],[419,21,370,21],[419,26,370,26],[419,34,370,34],[419,36,370,36],[420,6,371,8],[421,6,372,8],[421,10,372,14,"pattern"],[421,17,372,21],[421,20,372,24,"parentPattern"],[421,33,372,37],[421,36,372,40,"joinPaths"],[421,45,372,49],[421,46,372,50,"parentPattern"],[421,59,372,63],[421,61,372,65,"config"],[421,67,372,71],[421,68,372,72],[421,71,372,75,"config"],[421,77,372,81],[422,6,373,8,"configs"],[422,13,373,15],[422,14,373,16,"push"],[422,18,373,20],[422,19,373,21,"createConfigItem"],[422,35,373,37],[422,36,373,38,"screen"],[422,42,373,44],[422,44,373,46,"routeNames"],[422,54,373,56],[422,56,373,58,"pattern"],[422,63,373,65],[422,65,373,67,"config"],[422,71,373,73],[422,72,373,74],[422,73,373,75],[423,4,374,4],[423,5,374,5],[423,11,375,9],[423,15,375,13],[423,22,375,20,"config"],[423,28,375,26],[423,33,375,31],[423,41,375,39],[423,43,375,41],[424,6,376,8],[424,10,376,12,"pattern"],[424,18,376,19],[425,6,377,8],[426,6,378,8],[427,6,379,8],[428,6,380,8],[428,10,380,12],[428,17,380,19,"config"],[428,23,380,25],[428,24,380,26,"path"],[428,28,380,30],[428,33,380,35],[428,41,380,43],[428,43,380,45],[429,8,381,12],[429,12,381,16,"config"],[429,18,381,22],[429,19,381,23,"exact"],[429,24,381,28],[429,28,381,32,"config"],[429,34,381,38],[429,35,381,39,"path"],[429,39,381,43],[429,44,381,48,"undefined"],[429,53,381,57],[429,55,381,59],[430,10,382,16],[430,16,382,22],[430,20,382,26,"Error"],[430,25,382,31],[430,26,382,32],[430,176,382,182],[430,177,382,183],[431,8,383,12],[432,8,384,12,"pattern"],[432,16,384,19],[432,19,385,16,"config"],[432,25,385,22],[432,26,385,23,"exact"],[432,31,385,28],[432,36,385,33],[432,40,385,37],[432,43,386,22,"joinPaths"],[432,52,386,31],[432,53,386,32,"parentPattern"],[432,66,386,45],[432,70,386,49],[432,72,386,51],[432,74,386,53,"config"],[432,80,386,59],[432,81,386,60,"path"],[432,85,386,64],[432,89,386,68],[432,91,386,70],[432,92,386,71],[432,95,387,22,"config"],[432,101,387,28],[432,102,387,29,"path"],[432,106,387,33],[432,110,387,37],[432,112,387,39],[433,8,388,12],[433,12,388,16,"screen"],[433,18,388,22],[433,23,388,27,"constants_1"],[433,34,388,38],[433,35,388,39,"INTERNAL_SLOT_NAME"],[433,53,388,57],[433,55,388,59],[434,10,389,16,"configs"],[434,17,389,23],[434,18,389,24,"push"],[434,22,389,28],[434,23,389,29,"createConfigItem"],[434,39,389,45],[434,40,389,46,"screen"],[434,46,389,52],[434,48,389,54,"routeNames"],[434,58,389,64],[434,60,389,66,"pattern"],[434,68,389,73],[434,70,389,75,"config"],[434,76,389,81],[434,77,389,82,"path"],[434,81,389,86],[434,83,389,88,"config"],[434,89,389,94],[434,90,389,95,"parse"],[434,95,389,100],[434,97,389,102,"config"],[434,103,389,108],[434,104,389,109],[434,105,389,110],[435,8,390,12],[436,6,391,8],[437,6,392,8],[437,10,392,12,"config"],[437,16,392,18],[437,17,392,19,"screens"],[437,24,392,26],[437,26,392,28],[438,8,393,12],[439,8,394,12],[439,12,394,16,"config"],[439,18,394,22],[439,19,394,23,"initialRouteName"],[439,35,394,39],[439,37,394,41],[440,10,395,16,"initials"],[440,18,395,24],[440,19,395,25,"push"],[440,23,395,29],[440,24,395,30],[441,12,396,20,"initialRouteName"],[441,28,396,36],[441,30,396,38,"config"],[441,36,396,44],[441,37,396,45,"initialRouteName"],[441,53,396,61],[442,12,397,20,"parentScreens"],[442,25,397,33],[442,27,397,20,"parentScreens"],[443,10,398,16],[443,11,398,17],[443,12,398,18],[444,8,399,12],[445,8,400,12,"Object"],[445,14,400,18],[445,15,400,19,"keys"],[445,19,400,23],[445,20,400,24,"config"],[445,26,400,30],[445,27,400,31,"screens"],[445,34,400,38],[445,35,400,39],[445,36,400,40,"forEach"],[445,43,400,47],[445,44,400,48],[445,54,400,49,"nestedConfig"],[445,66,400,61],[445,68,400,66],[446,10,401,16],[446,14,401,22,"result"],[446,20,401,28],[446,23,401,31,"createNormalizedConfigs"],[446,47,401,54],[446,48,401,55,"nestedConfig"],[446,60,401,67],[446,62,401,69,"config"],[446,68,401,75],[446,69,401,76,"screens"],[446,76,401,83],[446,78,401,85,"routeNames"],[446,88,401,95],[446,90,401,97,"initials"],[446,98,401,105],[446,100,401,105,"_toConsumableArray"],[446,118,401,105],[446,119,401,111,"parentScreens"],[446,132,401,124],[446,135,401,127,"pattern"],[446,143,401,134],[446,154,401,127,"pattern"],[446,162,401,134],[446,165,401,138,"parentPattern"],[446,178,401,151],[446,179,401,152],[447,10,402,16,"configs"],[447,17,402,23],[447,18,402,24,"push"],[447,22,402,28],[447,23,402,28,"apply"],[447,28,402,28],[447,29,402,16,"configs"],[447,36,402,23],[447,38,402,23,"_toConsumableArray"],[447,56,402,23],[447,57,402,32,"result"],[447,63,402,38],[447,65,402,39],[448,8,403,12],[448,9,403,13],[448,10,403,14],[449,6,404,8],[450,4,405,4],[451,4,406,4,"routeNames"],[451,14,406,14],[451,15,406,15,"pop"],[451,18,406,18],[451,19,406,19],[451,20,406,20],[452,4,407,4],[452,11,407,11,"configs"],[452,18,407,18],[453,2,408,0],[453,3,408,1],[454,2,409,0],[454,6,409,6,"createConfigItem"],[454,22,409,22],[454,25,409,25],[454,34,409,6,"createConfigItem"],[454,50,409,22,"createConfigItem"],[454,51,409,26,"screen"],[454,57,409,32],[454,59,409,34,"routeNames"],[454,69,409,44],[454,71,409,46,"pattern"],[454,78,409,53],[454,80,409,55,"path"],[454,84,409,59],[454,86,409,96],[455,4,409,96],[455,8,409,61,"parse"],[455,13,409,66],[455,16,409,66,"arguments"],[455,25,409,66],[455,26,409,66,"length"],[455,32,409,66],[455,40,409,66,"arguments"],[455,49,409,66],[455,57,409,66,"undefined"],[455,66,409,66],[455,69,409,66,"arguments"],[455,78,409,66],[455,84,409,69,"undefined"],[455,93,409,78],[456,4,409,78],[456,8,409,80,"config"],[456,14,409,86],[456,17,409,86,"arguments"],[456,26,409,86],[456,27,409,86,"length"],[456,33,409,86],[456,41,409,86,"arguments"],[456,50,409,86],[456,58,409,86,"undefined"],[456,67,409,86],[456,70,409,86,"arguments"],[456,79,409,86],[456,85,409,89],[456,86,409,90],[456,87,409,91],[457,4,410,4],[458,4,411,4,"pattern"],[458,11,411,11],[458,14,411,14,"pattern"],[458,21,411,21],[458,22,411,22,"split"],[458,27,411,27],[458,28,411,28],[458,31,411,31],[458,32,411,32],[458,33,411,33,"filter"],[458,39,411,39],[458,40,411,40,"Boolean"],[458,47,411,47],[458,48,411,48],[458,49,411,49,"join"],[458,53,411,53],[458,54,411,54],[458,57,411,57],[458,58,411,58],[459,4,412,4],[460,4,413,4],[460,8,413,10,"regex"],[460,13,413,15],[460,16,413,18,"pattern"],[460,23,413,25],[460,26,413,28,"expo"],[460,30,413,32],[460,31,413,33,"routePatternToRegex"],[460,50,413,52],[460,51,413,53,"pattern"],[460,58,413,60],[460,59,413,61],[460,62,413,64,"undefined"],[460,71,413,73],[461,4,414,4],[462,4,415,4],[463,4,416,4],[464,4,417,4],[465,4,418,4],[466,4,419,4],[467,4,420,4],[468,4,421,4],[469,4,422,4],[470,4,423,4],[471,4,424,4],[472,4,425,4],[473,4,426,4],[474,4,427,4],[475,4,428,4],[475,11,428,4,"Object"],[475,17,428,4],[475,18,428,4,"assign"],[475,24,428,4],[476,6,429,8,"screen"],[476,12,429,14],[476,14,429,8,"screen"],[476,20,429,14],[477,6,430,8,"regex"],[477,11,430,13],[477,13,430,8,"regex"],[477,18,430,13],[478,6,431,8,"pattern"],[478,13,431,15],[478,15,431,8,"pattern"],[478,22,431,15],[479,6,432,8,"path"],[479,10,432,12],[479,12,432,8,"path"],[479,16,432,12],[480,6,433,8],[481,6,434,8,"routeNames"],[481,16,434,18],[481,18,434,18,"_toConsumableArray"],[481,36,434,18],[481,37,434,24,"routeNames"],[481,47,434,34],[481,48,434,35],[482,6,435,8,"parse"],[482,11,435,13],[482,13,435,8,"parse"],[483,4,435,13],[483,7,437,11,"expo"],[483,11,437,15],[483,12,437,16,"createConfig"],[483,24,437,28],[483,25,437,29,"screen"],[483,31,437,35],[483,33,437,37,"pattern"],[483,40,437,44],[483,42,437,46,"routeNames"],[483,52,437,56],[483,54,437,58,"config"],[483,60,437,64],[483,61,437,65],[484,2,440,0],[484,3,440,1],[485,2,441,0],[485,6,441,6,"findParseConfigForRoute"],[485,29,441,29],[485,32,441,32],[485,41,441,6,"findParseConfigForRoute"],[485,64,441,29,"findParseConfigForRoute"],[485,65,441,33,"routeName"],[485,74,441,42],[485,76,441,44,"flatConfig"],[485,86,441,54],[485,88,441,59],[486,4,442,4],[486,9,442,9],[486,13,442,15,"config"],[486,19,442,21],[486,23,442,25,"flatConfig"],[486,33,442,35],[486,35,442,37],[487,6,443,8],[487,10,443,12,"routeName"],[487,19,443,21],[487,24,443,26,"config"],[487,30,443,32],[487,31,443,33,"routeNames"],[487,41,443,43],[487,42,443,44,"config"],[487,48,443,50],[487,49,443,51,"routeNames"],[487,59,443,61],[487,60,443,62,"length"],[487,66,443,68],[487,69,443,71],[487,70,443,72],[487,71,443,73],[487,73,443,75],[488,8,444,12],[488,15,444,19,"config"],[488,21,444,25],[488,22,444,26,"parse"],[488,27,444,31],[489,6,445,8],[490,4,446,4],[491,4,447,4],[491,11,447,11,"undefined"],[491,20,447,20],[492,2,448,0],[492,3,448,1],[493,2,449,0],[494,2,450,0],[494,6,450,6,"findInitialRoute"],[494,22,450,22],[494,25,450,25],[494,34,450,6,"findInitialRoute"],[494,50,450,22,"findInitialRoute"],[494,51,450,26,"routeName"],[494,60,450,35],[494,62,450,37,"parentScreens"],[494,75,450,50],[494,77,450,52,"initialRoutes"],[494,90,450,65],[494,92,450,70],[495,4,451,4],[495,9,451,9],[495,13,451,15,"config"],[495,19,451,21],[495,23,451,25,"initialRoutes"],[495,36,451,38],[495,38,451,40],[496,6,452,8],[496,10,452,12,"parentScreens"],[496,23,452,25],[496,24,452,26,"length"],[496,30,452,32],[496,35,452,37,"config"],[496,41,452,43],[496,42,452,44,"parentScreens"],[496,55,452,57],[496,56,452,58,"length"],[496,62,452,64],[496,64,452,66],[497,8,453,12],[497,12,453,16,"sameParents"],[497,23,453,27],[497,26,453,30],[497,30,453,34],[498,8,454,12],[498,13,454,17],[498,17,454,21,"i"],[498,18,454,22],[498,21,454,25],[498,22,454,26],[498,24,454,28,"i"],[498,25,454,29],[498,28,454,32,"parentScreens"],[498,41,454,45],[498,42,454,46,"length"],[498,48,454,52],[498,50,454,54,"i"],[498,51,454,55],[498,53,454,57],[498,55,454,59],[499,10,455,16],[499,14,455,20,"parentScreens"],[499,27,455,33],[499,28,455,34,"i"],[499,29,455,35],[499,30,455,36],[499,31,455,37,"localeCompare"],[499,44,455,50],[499,45,455,51,"config"],[499,51,455,57],[499,52,455,58,"parentScreens"],[499,65,455,71],[499,66,455,72,"i"],[499,67,455,73],[499,68,455,74],[499,69,455,75],[499,74,455,80],[499,75,455,81],[499,77,455,83],[500,12,456,20,"sameParents"],[500,23,456,31],[500,26,456,34],[500,31,456,39],[501,12,457,20],[502,10,458,16],[503,8,459,12],[504,8,460,12],[504,12,460,16,"sameParents"],[504,23,460,27],[504,25,460,29],[505,10,461,16],[505,17,461,23,"routeName"],[505,26,461,32],[505,31,461,37,"config"],[505,37,461,43],[505,38,461,44,"initialRouteName"],[505,54,461,60],[505,57,461,63,"config"],[505,63,461,69],[505,64,461,70,"initialRouteName"],[505,80,461,86],[505,83,461,89,"undefined"],[505,92,461,98],[506,8,462,12],[507,6,463,8],[508,4,464,4],[509,4,465,4],[509,11,465,11,"undefined"],[509,20,465,20],[510,2,466,0],[510,3,466,1],[511,2,467,0],[512,2,468,0],[513,2,469,0],[513,6,469,6,"createStateObject"],[513,23,469,23],[513,26,469,26],[513,35,469,6,"createStateObject"],[513,52,469,23,"createStateObject"],[513,53,469,27,"initialRoute"],[513,65,469,39],[513,67,469,41,"route"],[513,72,469,46],[513,74,469,48,"isEmpty"],[513,81,469,55],[513,83,469,60],[514,4,470,4],[514,8,470,8,"isEmpty"],[514,15,470,15],[514,17,470,17],[515,6,471,8],[515,10,471,12,"initialRoute"],[515,22,471,24],[515,24,471,26],[516,8,472,12],[516,15,472,19],[517,10,473,16,"index"],[517,15,473,21],[517,17,473,23],[517,18,473,24],[518,10,474,16,"routes"],[518,16,474,22],[518,18,474,24],[518,19,474,25],[519,12,474,27,"name"],[519,16,474,31],[519,18,474,33,"initialRoute"],[519,30,474,45],[520,12,474,47,"params"],[520,18,474,53],[520,20,474,55,"route"],[520,25,474,60],[520,26,474,61,"params"],[521,10,474,68],[521,11,474,69],[521,13,474,71,"route"],[521,18,474,76],[522,8,475,12],[522,9,475,13],[523,6,476,8],[523,7,476,9],[523,13,477,13],[524,8,478,12],[524,15,478,19],[525,10,479,16,"routes"],[525,16,479,22],[525,18,479,24],[525,19,479,25,"route"],[525,24,479,30],[526,8,480,12],[526,9,480,13],[527,6,481,8],[528,4,482,4],[528,5,482,5],[528,11,483,9],[529,6,484,8],[529,10,484,12,"initialRoute"],[529,22,484,24],[529,24,484,26],[530,8,485,12],[530,15,485,19],[531,10,486,16,"index"],[531,15,486,21],[531,17,486,23],[531,18,486,24],[532,10,487,16,"routes"],[532,16,487,22],[532,18,487,24],[532,19,488,20],[533,12,488,22,"name"],[533,16,488,26],[533,18,488,28,"initialRoute"],[533,30,488,40],[534,12,488,42,"params"],[534,18,488,48],[534,20,488,50,"route"],[534,25,488,55],[534,26,488,56,"params"],[535,10,488,63],[535,11,488,64],[535,13,488,64,"Object"],[535,19,488,64],[535,20,488,64,"assign"],[535,26,488,64],[535,31,489,25,"route"],[535,36,489,30],[536,12,489,32,"state"],[536,17,489,37],[536,19,489,39],[537,14,489,41,"routes"],[537,20,489,47],[537,22,489,49],[538,12,489,52],[539,10,489,53],[540,8,491,12],[540,9,491,13],[541,6,492,8],[541,7,492,9],[541,13,493,13],[542,8,494,12],[542,15,494,19],[543,10,495,16,"routes"],[543,16,495,22],[543,18,495,24],[543,19,495,24,"Object"],[543,25,495,24],[543,26,495,24,"assign"],[543,32,495,24],[543,37,495,30,"route"],[543,42,495,35],[544,12,495,37,"state"],[544,17,495,42],[544,19,495,44],[545,14,495,46,"routes"],[545,20,495,52],[545,22,495,54],[546,12,495,57],[547,10,495,58],[548,8,496,12],[548,9,496,13],[549,6,497,8],[550,4,498,4],[551,2,499,0],[551,3,499,1],[552,2,500,0],[552,6,500,6,"createNestedStateObject"],[552,29,500,29],[552,32,500,32],[552,41,500,6,"createNestedStateObject"],[552,64,500,29,"createNestedStateObject"],[552,65,500,29,"_ref3"],[552,70,500,29],[552,72,500,55,"routes"],[552,78,500,61],[552,80,500,63,"initialRoutes"],[552,93,500,76],[552,95,500,78,"flatConfig"],[552,105,500,88],[552,107,500,90,"hash"],[552,111,500,94],[552,113,500,99],[553,4,500,99],[553,8,500,35,"path"],[553,12,500,39],[553,15,500,39,"_ref3"],[553,20,500,39],[553,21,500,35,"path"],[553,25,500,39],[554,6,500,44,"expoURL"],[554,13,500,51],[554,16,500,51,"_objectWithoutProperties"],[554,40,500,51],[554,41,500,51,"_ref3"],[554,46,500,51],[554,48,500,51,"_excluded"],[554,57,500,51],[555,4,501,4],[555,8,501,8,"route"],[555,13,501,13],[555,16,501,16,"routes"],[555,22,501,22],[555,23,501,23,"shift"],[555,28,501,28],[555,29,501,29],[555,30,501,30],[556,4,502,4],[556,8,502,10,"parentScreens"],[556,21,502,23],[556,24,502,26],[556,26,502,28],[557,4,503,4],[557,8,503,8,"initialRoute"],[557,20,503,20],[557,23,503,23,"findInitialRoute"],[557,39,503,39],[557,40,503,40,"route"],[557,45,503,45],[557,46,503,46,"name"],[557,50,503,50],[557,52,503,52,"parentScreens"],[557,65,503,65],[557,67,503,67,"initialRoutes"],[557,80,503,80],[557,81,503,81],[558,4,504,4,"parentScreens"],[558,17,504,17],[558,18,504,18,"push"],[558,22,504,22],[558,23,504,23,"route"],[558,28,504,28],[558,29,504,29,"name"],[558,33,504,33],[558,34,504,34],[559,4,505,4],[559,8,505,10,"state"],[559,13,505,15],[559,16,505,18,"createStateObject"],[559,33,505,35],[559,34,505,36,"initialRoute"],[559,46,505,48],[559,48,505,50,"route"],[559,53,505,55],[559,55,505,57,"routes"],[559,61,505,63],[559,62,505,64,"length"],[559,68,505,70],[559,73,505,75],[559,74,505,76],[559,75,505,77],[560,4,506,4],[560,8,506,8,"routes"],[560,14,506,14],[560,15,506,15,"length"],[560,21,506,21],[560,24,506,24],[560,25,506,25],[560,27,506,27],[561,6,507,8],[561,10,507,12,"nestedState"],[561,21,507,23],[561,24,507,26,"state"],[561,29,507,31],[562,6,508,8],[562,13,508,16,"route"],[562,18,508,21],[562,21,508,24,"routes"],[562,27,508,30],[562,28,508,31,"shift"],[562,33,508,36],[562,34,508,37],[562,35,508,38],[562,37,508,41],[563,8,509,12,"initialRoute"],[563,20,509,24],[563,23,509,27,"findInitialRoute"],[563,39,509,43],[563,40,509,44,"route"],[563,45,509,49],[563,46,509,50,"name"],[563,50,509,54],[563,52,509,56,"parentScreens"],[563,65,509,69],[563,67,509,71,"initialRoutes"],[563,80,509,84],[563,81,509,85],[564,8,510,12],[564,12,510,18,"nestedStateIndex"],[564,28,510,34],[564,31,510,37,"nestedState"],[564,42,510,48],[564,43,510,49,"index"],[564,48,510,54],[564,52,510,58,"nestedState"],[564,63,510,69],[564,64,510,70,"routes"],[564,70,510,76],[564,71,510,77,"length"],[564,77,510,83],[564,80,510,86],[564,81,510,87],[565,8,511,12,"nestedState"],[565,19,511,23],[565,20,511,24,"routes"],[565,26,511,30],[565,27,511,31,"nestedStateIndex"],[565,43,511,47],[565,44,511,48],[565,45,511,49,"state"],[565,50,511,54],[565,53,511,57,"createStateObject"],[565,70,511,74],[565,71,511,75,"initialRoute"],[565,83,511,87],[565,85,511,89,"route"],[565,90,511,94],[565,92,511,96,"routes"],[565,98,511,102],[565,99,511,103,"length"],[565,105,511,109],[565,110,511,114],[565,111,511,115],[565,112,511,116],[566,8,512,12],[566,12,512,16,"routes"],[566,18,512,22],[566,19,512,23,"length"],[566,25,512,29],[566,28,512,32],[566,29,512,33],[566,31,512,35],[567,10,513,16,"nestedState"],[567,21,513,27],[567,24,513,30,"nestedState"],[567,35,513,41],[567,36,513,42,"routes"],[567,42,513,48],[567,43,513,49,"nestedStateIndex"],[567,59,513,65],[567,60,513,66],[567,61,513,67,"state"],[567,66,513,72],[568,8,514,12],[569,8,515,12,"parentScreens"],[569,21,515,25],[569,22,515,26,"push"],[569,26,515,30],[569,27,515,31,"route"],[569,32,515,36],[569,33,515,37,"name"],[569,37,515,41],[569,38,515,42],[570,6,516,8],[571,4,517,4],[572,4,518,4,"route"],[572,9,518,9],[572,12,518,12],[572,13,518,13],[572,14,518,14],[572,16,518,16,"findFocusedRoute_1"],[572,34,518,34],[572,35,518,35,"findFocusedRoute"],[572,51,518,51],[572,53,518,53,"state"],[572,58,518,58],[572,59,518,59],[573,4,519,4],[574,4,520,4,"route"],[574,9,520,9],[574,10,520,10,"path"],[574,14,520,14],[574,17,520,17,"expoURL"],[574,24,520,24],[574,25,520,25,"pathWithoutGroups"],[574,42,520,42],[575,4,521,4],[576,4,522,4],[577,4,523,4],[578,4,524,4],[579,4,525,4],[579,8,525,10,"params"],[579,14,525,16],[579,17,525,19,"expo"],[579,21,525,23],[579,22,525,24,"parseQueryParams"],[579,38,525,40],[579,39,525,41,"path"],[579,43,525,45],[579,45,525,47,"route"],[579,50,525,52],[579,52,525,54,"flatConfig"],[579,62,525,64],[579,65,525,67,"findParseConfigForRoute"],[579,88,525,90],[579,89,525,91,"route"],[579,94,525,96],[579,95,525,97,"name"],[579,99,525,101],[579,101,525,103,"flatConfig"],[579,111,525,113],[579,112,525,114],[579,115,525,117,"undefined"],[579,124,525,126],[579,126,525,128,"hash"],[579,130,525,132],[579,131,525,133],[580,4,526,4],[581,4,527,4],[582,4,528,4],[583,4,529,4],[583,8,529,8,"params"],[583,14,529,14],[583,16,529,16],[584,6,530,8,"route"],[584,11,530,13],[584,12,530,14,"params"],[584,18,530,20],[584,21,530,20,"Object"],[584,27,530,20],[584,28,530,20,"assign"],[584,34,530,20],[584,39,530,28,"route"],[584,44,530,33],[584,45,530,34,"params"],[584,51,530,40],[584,53,530,45,"params"],[584,59,530,51],[584,60,530,53],[585,4,531,4],[586,4,532,4],[587,4,533,4],[587,11,533,11,"state"],[587,16,533,16],[588,2,534,0],[588,3,534,1],[589,2,535,0],[590,2,536,0],[591,2,537,0],[592,2,538,0],[593,2,539,0],[594,2,540,0],[595,2,541,0],[596,2,542,0],[597,2,543,0],[598,2,544,0],[599,2,545,0],[600,2,546,0],[601,2,547,0],[602,2,548,0],[603,0,548,0],[603,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","getStateFromPath","remaining.split.filter.map$argument_0","match.routeNames.map$argument_0","getConfigResources","prepareConfigResources","getInitialRoutes","getNormalizedConfigs","Object.keys.map$argument_0","checkForDuplicatedConfigs","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","getConfigsWithRegexes","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.reduce$argument_0","config.routeNames.map$argument_0","configs.find$argument_0","normalizedPath.split.reduce$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;wDCC;CDE;AI6B;iBCuC;SDG;0EEqB,oBF;CJmB;AOQ;CPW;AQC;CRa;ASC;CTS;AUC;4CCO,qED;CVgD;AYC;mBCE;6DCM,sBD,YE,sBF;KDQ;CZC;AgBC;uBCC;MDO;ChBC;kBkBC;yBCC,mBD;clBE;4BoBC;kECc;aDmB;2CEE;iDCC;iBDG;4BEU;iBFmB;aFM;CpBS;gCyBC;gDCoC;aDG;CzBK;yB2BC;C3B+B;gC4BC;C5BO;yB6BE;C7BgB;0B8BG;C9B8B;gC+BC;C/BkC"},"hasCjsExports":true},"type":"js/module"}]}