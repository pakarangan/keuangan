{"dependencies":[{"name":"@react-navigation/native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":147},"end":{"line":5,"column":52,"index":182}}],"key":"uE+cRVNnMKkS9OYKR5fpRqPul5s=","exportNames":["*"],"imports":1}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":20,"index":204},"end":{"line":6,"column":42,"index":226}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"],"imports":1}},{"name":"./link/href","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":15,"index":243},"end":{"line":7,"column":37,"index":265}}],"key":"bbOjCna2na3KLYIiMI/X7Z9HiTo=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n  'use client';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useNavigation = useNavigation;\n  var native_1 = require(_dependencyMap[0], \"@react-navigation/native\");\n  var constants_1 = require(_dependencyMap[1], \"./constants\");\n  var href_1 = require(_dependencyMap[2], \"./link/href\");\n  /**\n   * Returns the underlying React Navigation [`navigation` object](https://reactnavigation.org/docs/navigation-object)\n   * to imperatively access layout-specific functionality like `navigation.openDrawer()` in a\n   * [Drawer](/router/advanced/drawer/) layout.\n   *\n   * @example\n   * ```tsx app/index.tsx\n   * import { useNavigation } from 'expo-router';\n   *\n   * export default function Route() {\n   *   // Access the current navigation object for the current route.\n   *   const navigation = useNavigation();\n   *\n   *   return (\n   *     <View>\n   *       <Text onPress={() => {\n   *         // Open the drawer view.\n   *         navigation.openDrawer();\n   *       }}>\n   *         Open Drawer\n   *       </Text>\n   *     </View>\n   *   );\n   * }\n   * ```\n   *\n   * When using nested layouts, you can access higher-order layouts by passing a secondary argument denoting the layout route.\n   * For example, `/menu/_layout.tsx` is nested inside `/app/orders/`, you can use `useNavigation('/orders/menu/')`.\n   *\n   * @example\n   * ```tsx app/orders/menu/index.tsx\n   * import { useNavigation } from 'expo-router';\n   *\n   * export default function MenuRoute() {\n   *   const rootLayout = useNavigation('/');\n   *   const ordersLayout = useNavigation('/orders');\n   *\n   *   // Same as the default results of `useNavigation()` when invoked in this route.\n   *   const parentLayout = useNavigation('/orders/menu');\n   * }\n   * ```\n   *\n   * If you attempt to access a layout that doesn't exist, an error such as\n   * `Could not find parent navigation with route \"/non-existent\"` is thrown.\n   *\n   *\n   * @param parent Provide an absolute path such as `/(root)` to the parent route or a relative path like `../../` to the parent route.\n   * @returns The navigation object for the current route.\n   *\n   * @see React Navigation documentation on [navigation dependent functions](https://reactnavigation.org/docs/navigation-object/#navigator-dependent-functions)\n   * for more information.\n   */\n  function useNavigation(parent) {\n    var _parent;\n    var navigation = (0, native_1.useNavigation)();\n    var state = (0, native_1.useStateForPath)();\n    if (parent === undefined) {\n      // If no parent is provided, return the current navigation object\n      return navigation;\n    }\n    // Check for the top-level navigator - we cannot fetch anything higher!\n    var currentId = navigation.getId();\n    if (currentId === '' || currentId === `/expo-router/build/views/Navigator`) {\n      return navigation;\n    }\n    if (typeof parent === 'object') {\n      parent = (0, href_1.resolveHref)(parent);\n    }\n    if (parent === '/') {\n      var _navigation$getParent;\n      // This is the root navigator\n      return (_navigation$getParent = navigation.getParent(`/expo-router/build/views/Navigator`)) != null ? _navigation$getParent : navigation.getParent(``);\n    } else if ((_parent = parent) != null && _parent.startsWith('../')) {\n      var names = [];\n      while (state) {\n        var route = state.routes[0];\n        state = route.state;\n        // Don't include the last router, as thats the current route\n        if (state) {\n          names.push(route.name);\n        }\n      }\n      // Removing the trailing slash to make splitting easier\n      var originalParent = parent;\n      if (parent.endsWith('/')) {\n        parent = parent.slice(0, -1);\n      }\n      var segments = parent.split('/');\n      if (!segments.every(function (segment) {\n        return segment === '..';\n      })) {\n        throw new Error(`Invalid parent path \"${originalParent}\". Only \"../\" segments are allowed when using relative paths.`);\n      }\n      var levels = segments.length;\n      var index = names.length - 1 - levels;\n      if (index < 0) {\n        throw new Error(`Invalid parent path \"${originalParent}\". Cannot go up ${levels} levels from the current route.`);\n      }\n      parent = names[index];\n      // Expo Router navigators use the context key as the name which has a leading `/`\n      // The exception to this is the INTERNAL_SLOT_NAME, and the root navigator which uses ''\n      if (parent && parent !== constants_1.INTERNAL_SLOT_NAME) {\n        parent = `/${parent}`;\n      }\n    }\n    navigation = navigation.getParent(parent);\n    if (process.env.NODE_ENV !== 'production') {\n      if (!navigation) {\n        var ids = [];\n        while (navigation) {\n          ids.push(navigation.getId() || '/');\n          navigation = navigation.getParent();\n        }\n        throw new Error(`Could not find parent navigation with route \"${parent}\". Available routes are: '${ids.join(\"', '\")}'`);\n      }\n    }\n    return navigation;\n  }\n});","lineCount":130,"map":[[2,2,1,0],[2,14,1,12],[3,2,2,0],[3,14,2,12],[5,2,3,0,"Object"],[5,8,3,6],[5,9,3,7,"defineProperty"],[5,23,3,21],[5,24,3,22,"exports"],[5,31,3,29],[5,33,3,31],[5,45,3,43],[5,47,3,45],[6,4,3,47,"value"],[6,9,3,52],[6,11,3,54],[7,2,3,59],[7,3,3,60],[7,4,3,61],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"useNavigation"],[8,23,4,21],[8,26,4,24,"useNavigation"],[8,39,4,37],[9,2,5,0],[9,6,5,6,"native_1"],[9,14,5,14],[9,17,5,17,"require"],[9,24,5,24],[9,25,5,24,"_dependencyMap"],[9,39,5,24],[9,70,5,51],[9,71,5,52],[10,2,6,0],[10,6,6,6,"constants_1"],[10,17,6,17],[10,20,6,20,"require"],[10,27,6,27],[10,28,6,27,"_dependencyMap"],[10,42,6,27],[10,60,6,41],[10,61,6,42],[11,2,7,0],[11,6,7,6,"href_1"],[11,12,7,12],[11,15,7,15,"require"],[11,22,7,22],[11,23,7,22,"_dependencyMap"],[11,37,7,22],[11,55,7,36],[11,56,7,37],[12,2,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,0,42,0],[47,0,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,0,47,0],[52,0,48,0],[53,0,49,0],[54,0,50,0],[55,0,51,0],[56,0,52,0],[57,0,53,0],[58,0,54,0],[59,0,55,0],[60,0,56,0],[61,0,57,0],[62,0,58,0],[63,0,59,0],[64,2,60,0],[64,11,60,9,"useNavigation"],[64,24,60,22,"useNavigation"],[64,25,60,23,"parent"],[64,31,60,29],[64,33,60,31],[65,4,60,31],[65,8,60,31,"_parent"],[65,15,60,31],[66,4,61,4],[66,8,61,8,"navigation"],[66,18,61,18],[66,21,61,21],[66,22,61,22],[66,23,61,23],[66,25,61,25,"native_1"],[66,33,61,33],[66,34,61,34,"useNavigation"],[66,47,61,47],[66,49,61,49],[66,50,61,50],[67,4,62,4],[67,8,62,8,"state"],[67,13,62,13],[67,16,62,16],[67,17,62,17],[67,18,62,18],[67,20,62,20,"native_1"],[67,28,62,28],[67,29,62,29,"useStateForPath"],[67,44,62,44],[67,46,62,46],[67,47,62,47],[68,4,63,4],[68,8,63,8,"parent"],[68,14,63,14],[68,19,63,19,"undefined"],[68,28,63,28],[68,30,63,30],[69,6,64,8],[70,6,65,8],[70,13,65,15,"navigation"],[70,23,65,25],[71,4,66,4],[72,4,67,4],[73,4,68,4],[73,8,68,10,"currentId"],[73,17,68,19],[73,20,68,22,"navigation"],[73,30,68,32],[73,31,68,33,"getId"],[73,36,68,38],[73,37,68,39],[73,38,68,40],[74,4,69,4],[74,8,69,8,"currentId"],[74,17,69,17],[74,22,69,22],[74,24,69,24],[74,28,69,28,"currentId"],[74,37,69,37],[74,42,69,42],[74,78,69,78],[74,80,69,80],[75,6,70,8],[75,13,70,15,"navigation"],[75,23,70,25],[76,4,71,4],[77,4,72,4],[77,8,72,8],[77,15,72,15,"parent"],[77,21,72,21],[77,26,72,26],[77,34,72,34],[77,36,72,36],[78,6,73,8,"parent"],[78,12,73,14],[78,15,73,17],[78,16,73,18],[78,17,73,19],[78,19,73,21,"href_1"],[78,25,73,27],[78,26,73,28,"resolveHref"],[78,37,73,39],[78,39,73,41,"parent"],[78,45,73,47],[78,46,73,48],[79,4,74,4],[80,4,75,4],[80,8,75,8,"parent"],[80,14,75,14],[80,19,75,19],[80,22,75,22],[80,24,75,24],[81,6,75,24],[81,10,75,24,"_navigation$getParent"],[81,31,75,24],[82,6,76,8],[83,6,77,8],[83,14,77,8,"_navigation$getParent"],[83,35,77,8],[83,38,77,15,"navigation"],[83,48,77,25],[83,49,77,26,"getParent"],[83,58,77,35],[83,59,77,36],[83,95,77,72],[83,96,77,73],[83,108,77,73,"_navigation$getParent"],[83,129,77,73],[83,132,77,77,"navigation"],[83,142,77,87],[83,143,77,88,"getParent"],[83,152,77,97],[83,153,77,98],[83,155,77,100],[83,156,77,101],[84,4,78,4],[84,5,78,5],[84,11,79,9],[84,16,79,9,"_parent"],[84,23,79,9],[84,26,79,13,"parent"],[84,32,79,19],[84,45,79,13,"_parent"],[84,52,79,13],[84,53,79,21,"startsWith"],[84,63,79,31],[84,64,79,32],[84,69,79,37],[84,70,79,38],[84,72,79,40],[85,6,80,8],[85,10,80,14,"names"],[85,15,80,19],[85,18,80,22],[85,20,80,24],[86,6,81,8],[86,13,81,15,"state"],[86,18,81,20],[86,20,81,22],[87,8,82,12],[87,12,82,18,"route"],[87,17,82,23],[87,20,82,26,"state"],[87,25,82,31],[87,26,82,32,"routes"],[87,32,82,38],[87,33,82,39],[87,34,82,40],[87,35,82,41],[88,8,83,12,"state"],[88,13,83,17],[88,16,83,20,"route"],[88,21,83,25],[88,22,83,26,"state"],[88,27,83,31],[89,8,84,12],[90,8,85,12],[90,12,85,16,"state"],[90,17,85,21],[90,19,85,23],[91,10,86,16,"names"],[91,15,86,21],[91,16,86,22,"push"],[91,20,86,26],[91,21,86,27,"route"],[91,26,86,32],[91,27,86,33,"name"],[91,31,86,37],[91,32,86,38],[92,8,87,12],[93,6,88,8],[94,6,89,8],[95,6,90,8],[95,10,90,14,"originalParent"],[95,24,90,28],[95,27,90,31,"parent"],[95,33,90,37],[96,6,91,8],[96,10,91,12,"parent"],[96,16,91,18],[96,17,91,19,"endsWith"],[96,25,91,27],[96,26,91,28],[96,29,91,31],[96,30,91,32],[96,32,91,34],[97,8,92,12,"parent"],[97,14,92,18],[97,17,92,21,"parent"],[97,23,92,27],[97,24,92,28,"slice"],[97,29,92,33],[97,30,92,34],[97,31,92,35],[97,33,92,37],[97,34,92,38],[97,35,92,39],[97,36,92,40],[98,6,93,8],[99,6,94,8],[99,10,94,14,"segments"],[99,18,94,22],[99,21,94,25,"parent"],[99,27,94,31],[99,28,94,32,"split"],[99,33,94,37],[99,34,94,38],[99,37,94,41],[99,38,94,42],[100,6,95,8],[100,10,95,12],[100,11,95,13,"segments"],[100,19,95,21],[100,20,95,22,"every"],[100,25,95,27],[100,26,95,28],[100,36,95,29,"segment"],[100,43,95,36],[101,8,95,36],[101,15,95,41,"segment"],[101,22,95,48],[101,27,95,53],[101,31,95,57],[102,6,95,57],[102,8,95,58],[102,10,95,60],[103,8,96,12],[103,14,96,18],[103,18,96,22,"Error"],[103,23,96,27],[103,24,96,28],[103,48,96,52,"originalParent"],[103,62,96,66],[103,125,96,129],[103,126,96,130],[104,6,97,8],[105,6,98,8],[105,10,98,14,"levels"],[105,16,98,20],[105,19,98,23,"segments"],[105,27,98,31],[105,28,98,32,"length"],[105,34,98,38],[106,6,99,8],[106,10,99,14,"index"],[106,15,99,19],[106,18,99,22,"names"],[106,23,99,27],[106,24,99,28,"length"],[106,30,99,34],[106,33,99,37],[106,34,99,38],[106,37,99,41,"levels"],[106,43,99,47],[107,6,100,8],[107,10,100,12,"index"],[107,15,100,17],[107,18,100,20],[107,19,100,21],[107,21,100,23],[108,8,101,12],[108,14,101,18],[108,18,101,22,"Error"],[108,23,101,27],[108,24,101,28],[108,48,101,52,"originalParent"],[108,62,101,66],[108,81,101,85,"levels"],[108,87,101,91],[108,120,101,124],[108,121,101,125],[109,6,102,8],[110,6,103,8,"parent"],[110,12,103,14],[110,15,103,17,"names"],[110,20,103,22],[110,21,103,23,"index"],[110,26,103,28],[110,27,103,29],[111,6,104,8],[112,6,105,8],[113,6,106,8],[113,10,106,12,"parent"],[113,16,106,18],[113,20,106,22,"parent"],[113,26,106,28],[113,31,106,33,"constants_1"],[113,42,106,44],[113,43,106,45,"INTERNAL_SLOT_NAME"],[113,61,106,63],[113,63,106,65],[114,8,107,12,"parent"],[114,14,107,18],[114,17,107,21],[114,21,107,25,"parent"],[114,27,107,31],[114,29,107,33],[115,6,108,8],[116,4,109,4],[117,4,110,4,"navigation"],[117,14,110,14],[117,17,110,17,"navigation"],[117,27,110,27],[117,28,110,28,"getParent"],[117,37,110,37],[117,38,110,38,"parent"],[117,44,110,44],[117,45,110,45],[118,4,111,4],[118,8,111,8,"process"],[118,15,111,15],[118,16,111,16,"env"],[118,19,111,19],[118,20,111,20,"NODE_ENV"],[118,28,111,28],[118,33,111,33],[118,45,111,45],[118,47,111,47],[119,6,112,8],[119,10,112,12],[119,11,112,13,"navigation"],[119,21,112,23],[119,23,112,25],[120,8,113,12],[120,12,113,18,"ids"],[120,15,113,21],[120,18,113,24],[120,20,113,26],[121,8,114,12],[121,15,114,19,"navigation"],[121,25,114,29],[121,27,114,31],[122,10,115,16,"ids"],[122,13,115,19],[122,14,115,20,"push"],[122,18,115,24],[122,19,115,25,"navigation"],[122,29,115,35],[122,30,115,36,"getId"],[122,35,115,41],[122,36,115,42],[122,37,115,43],[122,41,115,47],[122,44,115,50],[122,45,115,51],[123,10,116,16,"navigation"],[123,20,116,26],[123,23,116,29,"navigation"],[123,33,116,39],[123,34,116,40,"getParent"],[123,43,116,49],[123,44,116,50],[123,45,116,51],[124,8,117,12],[125,8,118,12],[125,14,118,18],[125,18,118,22,"Error"],[125,23,118,27],[125,24,118,28],[125,72,118,76,"parent"],[125,78,118,82],[125,107,118,111,"ids"],[125,110,118,114],[125,111,118,115,"join"],[125,115,118,119],[125,116,118,120],[125,122,118,126],[125,123,118,127],[125,126,118,130],[125,127,118,131],[126,6,119,8],[127,4,120,4],[128,4,121,4],[128,11,121,11,"navigation"],[128,21,121,21],[129,2,122,0],[130,0,122,1],[130,3]],"functionMap":{"names":["<global>","useNavigation","segments.every$argument_0"],"mappings":"AAA;AC2D;4BCmC,6BD;CD2B"},"hasCjsExports":true},"type":"js/module"}]}