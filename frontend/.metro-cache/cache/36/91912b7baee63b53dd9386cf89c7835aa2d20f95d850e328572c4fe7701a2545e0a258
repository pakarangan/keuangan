{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":29,"index":44},"end":{"line":3,"column":84,"index":99}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createForOfIteratorHelperLoose","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":62,"index":224},"end":{"line":6,"column":126,"index":288}}],"key":"D8hazSpj47mvz7vrnefek88staE=","exportNames":["*"],"imports":1}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":40,"index":331},"end":{"line":7,"column":69,"index":360}}],"key":"ePiUN85REKH0vTLGPPDgdWgjFww=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _classCallCheck = require(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[1], \"@babel/runtime/helpers/createClass\").default;\n  var _interopRequireDefault = require(_dependencyMap[2], \"@babel/runtime/helpers/interopRequireDefault\").default;\n  exports.__esModule = true;\n  exports.default = void 0;\n  var _createForOfIteratorHelperLoose2 = _interopRequireDefault(require(_dependencyMap[3], \"@babel/runtime/helpers/createForOfIteratorHelperLoose\"));\n  var _invariant = _interopRequireDefault(require(_dependencyMap[4], \"fbjs/lib/invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n  var ChildListCollection = /*#__PURE__*/function () {\n    function ChildListCollection() {\n      _classCallCheck(this, ChildListCollection);\n      this._cellKeyToChildren = new Map();\n      this._childrenToCellKey = new Map();\n    }\n    return _createClass(ChildListCollection, [{\n      key: \"add\",\n      value: function add(list, cellKey) {\n        var _this$_cellKeyToChild;\n        (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n        var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild !== void 0 ? _this$_cellKeyToChild : new Set();\n        cellLists.add(list);\n        this._cellKeyToChildren.set(cellKey, cellLists);\n        this._childrenToCellKey.set(list, cellKey);\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(list) {\n        var cellKey = this._childrenToCellKey.get(list);\n        (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');\n        this._childrenToCellKey.delete(list);\n        var cellLists = this._cellKeyToChildren.get(cellKey);\n        (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');\n        cellLists.delete(list);\n        if (cellLists.size === 0) {\n          this._cellKeyToChildren.delete(cellKey);\n        }\n      }\n    }, {\n      key: \"forEach\",\n      value: function forEach(fn) {\n        for (var _iterator = (0, _createForOfIteratorHelperLoose2.default)(this._cellKeyToChildren.values()), _step; !(_step = _iterator()).done;) {\n          var listSet = _step.value;\n          for (var _iterator2 = (0, _createForOfIteratorHelperLoose2.default)(listSet), _step2; !(_step2 = _iterator2()).done;) {\n            var list = _step2.value;\n            fn(list);\n          }\n        }\n      }\n    }, {\n      key: \"forEachInCell\",\n      value: function forEachInCell(cellKey, fn) {\n        var _this$_cellKeyToChild2;\n        var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild2 !== void 0 ? _this$_cellKeyToChild2 : [];\n        for (var _iterator3 = (0, _createForOfIteratorHelperLoose2.default)(listSet), _step3; !(_step3 = _iterator3()).done;) {\n          var list = _step3.value;\n          fn(list);\n        }\n      }\n    }, {\n      key: \"anyInCell\",\n      value: function anyInCell(cellKey, fn) {\n        var _this$_cellKeyToChild3;\n        var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) !== null && _this$_cellKeyToChild3 !== void 0 ? _this$_cellKeyToChild3 : [];\n        for (var _iterator4 = (0, _createForOfIteratorHelperLoose2.default)(listSet), _step4; !(_step4 = _iterator4()).done;) {\n          var list = _step4.value;\n          if (fn(list)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"size\",\n      value: function size() {\n        return this._childrenToCellKey.size;\n      }\n    }]);\n  }();\n  exports.default = ChildListCollection;\n  module.exports = exports.default;\n});","lineCount":92,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_classCallCheck"],[4,21,1,13],[4,24,1,13,"require"],[4,31,1,13],[4,32,1,13,"_dependencyMap"],[4,46,1,13],[4,92,1,13,"default"],[4,99,1,13],[5,2,1,13],[5,6,1,13,"_createClass"],[5,18,1,13],[5,21,1,13,"require"],[5,28,1,13],[5,29,1,13,"_dependencyMap"],[5,43,1,13],[5,86,1,13,"default"],[5,93,1,13],[6,2,3,0],[6,6,3,4,"_interopRequireDefault"],[6,28,3,26],[6,31,3,29,"require"],[6,38,3,36],[6,39,3,36,"_dependencyMap"],[6,53,3,36],[6,104,3,83],[6,105,3,84],[6,106,3,85,"default"],[6,113,3,92],[7,2,4,0,"exports"],[7,9,4,7],[7,10,4,8,"__esModule"],[7,20,4,18],[7,23,4,21],[7,27,4,25],[8,2,5,0,"exports"],[8,9,5,7],[8,10,5,8,"default"],[8,17,5,15],[8,20,5,18],[8,25,5,23],[8,26,5,24],[9,2,6,0],[9,6,6,4,"_createForOfIteratorHelperLoose2"],[9,38,6,36],[9,41,6,39,"_interopRequireDefault"],[9,63,6,61],[9,64,6,62,"require"],[9,71,6,69],[9,72,6,69,"_dependencyMap"],[9,86,6,69],[9,146,6,125],[9,147,6,126],[9,148,6,127],[10,2,7,0],[10,6,7,4,"_invariant"],[10,16,7,14],[10,19,7,17,"_interopRequireDefault"],[10,41,7,39],[10,42,7,40,"require"],[10,49,7,47],[10,50,7,47,"_dependencyMap"],[10,64,7,47],[10,89,7,68],[10,90,7,69],[10,91,7,70],[11,2,8,0],[12,0,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,0,13,0],[17,0,14,0],[18,0,15,0],[19,0,16,0],[20,2,8,0],[20,6,18,6,"ChildListCollection"],[20,25,18,25],[21,4,19,2],[21,13,19,2,"ChildListCollection"],[21,33,19,2],[21,35,19,16],[22,6,19,16,"_classCallCheck"],[22,21,19,16],[22,28,19,16,"ChildListCollection"],[22,47,19,16],[23,6,20,4],[23,10,20,8],[23,11,20,9,"_cellKeyToChildren"],[23,29,20,27],[23,32,20,30],[23,36,20,34,"Map"],[23,39,20,37],[23,40,20,38],[23,41,20,39],[24,6,21,4],[24,10,21,8],[24,11,21,9,"_childrenToCellKey"],[24,29,21,27],[24,32,21,30],[24,36,21,34,"Map"],[24,39,21,37],[24,40,21,38],[24,41,21,39],[25,4,22,2],[26,4,22,3],[26,11,22,3,"_createClass"],[26,23,22,3],[26,24,22,3,"ChildListCollection"],[26,43,22,3],[27,6,22,3,"key"],[27,9,22,3],[28,6,22,3,"value"],[28,11,22,3],[28,13,23,2],[28,22,23,2,"add"],[28,25,23,5,"add"],[28,26,23,6,"list"],[28,30,23,10],[28,32,23,12,"cellKey"],[28,39,23,19],[28,41,23,21],[29,8,24,4],[29,12,24,8,"_this$_cellKeyToChild"],[29,33,24,29],[30,8,25,4],[30,9,25,5],[30,10,25,6],[30,12,25,8,"_invariant"],[30,22,25,18],[30,23,25,19,"default"],[30,30,25,26],[30,32,25,28],[30,33,25,29],[30,37,25,33],[30,38,25,34,"_childrenToCellKey"],[30,56,25,52],[30,57,25,53,"has"],[30,60,25,56],[30,61,25,57,"list"],[30,65,25,61],[30,66,25,62],[30,68,25,64],[30,110,25,106],[30,111,25,107],[31,8,26,4],[31,12,26,8,"cellLists"],[31,21,26,17],[31,24,26,20],[31,25,26,21,"_this$_cellKeyToChild"],[31,46,26,42],[31,49,26,45],[31,53,26,49],[31,54,26,50,"_cellKeyToChildren"],[31,72,26,68],[31,73,26,69,"get"],[31,76,26,72],[31,77,26,73,"cellKey"],[31,84,26,80],[31,85,26,81],[31,91,26,87],[31,95,26,91],[31,99,26,95,"_this$_cellKeyToChild"],[31,120,26,116],[31,125,26,121],[31,130,26,126],[31,131,26,127],[31,134,26,130,"_this$_cellKeyToChild"],[31,155,26,151],[31,158,26,154],[31,162,26,158,"Set"],[31,165,26,161],[31,166,26,162],[31,167,26,163],[32,8,27,4,"cellLists"],[32,17,27,13],[32,18,27,14,"add"],[32,21,27,17],[32,22,27,18,"list"],[32,26,27,22],[32,27,27,23],[33,8,28,4],[33,12,28,8],[33,13,28,9,"_cellKeyToChildren"],[33,31,28,27],[33,32,28,28,"set"],[33,35,28,31],[33,36,28,32,"cellKey"],[33,43,28,39],[33,45,28,41,"cellLists"],[33,54,28,50],[33,55,28,51],[34,8,29,4],[34,12,29,8],[34,13,29,9,"_childrenToCellKey"],[34,31,29,27],[34,32,29,28,"set"],[34,35,29,31],[34,36,29,32,"list"],[34,40,29,36],[34,42,29,38,"cellKey"],[34,49,29,45],[34,50,29,46],[35,6,30,2],[36,4,30,3],[37,6,30,3,"key"],[37,9,30,3],[38,6,30,3,"value"],[38,11,30,3],[38,13,31,2],[38,22,31,2,"remove"],[38,28,31,8,"remove"],[38,29,31,9,"list"],[38,33,31,13],[38,35,31,15],[39,8,32,4],[39,12,32,8,"cellKey"],[39,19,32,15],[39,22,32,18],[39,26,32,22],[39,27,32,23,"_childrenToCellKey"],[39,45,32,41],[39,46,32,42,"get"],[39,49,32,45],[39,50,32,46,"list"],[39,54,32,50],[39,55,32,51],[40,8,33,4],[40,9,33,5],[40,10,33,6],[40,12,33,8,"_invariant"],[40,22,33,18],[40,23,33,19,"default"],[40,30,33,26],[40,32,33,28,"cellKey"],[40,39,33,35],[40,43,33,39],[40,47,33,43],[40,49,33,45],[40,90,33,86],[40,91,33,87],[41,8,34,4],[41,12,34,8],[41,13,34,9,"_childrenToCellKey"],[41,31,34,27],[41,32,34,28,"delete"],[41,38,34,34],[41,39,34,35,"list"],[41,43,34,39],[41,44,34,40],[42,8,35,4],[42,12,35,8,"cellLists"],[42,21,35,17],[42,24,35,20],[42,28,35,24],[42,29,35,25,"_cellKeyToChildren"],[42,47,35,43],[42,48,35,44,"get"],[42,51,35,47],[42,52,35,48,"cellKey"],[42,59,35,55],[42,60,35,56],[43,8,36,4],[43,9,36,5],[43,10,36,6],[43,12,36,8,"_invariant"],[43,22,36,18],[43,23,36,19,"default"],[43,30,36,26],[43,32,36,28,"cellLists"],[43,41,36,37],[43,43,36,39],[43,86,36,82],[43,87,36,83],[44,8,37,4,"cellLists"],[44,17,37,13],[44,18,37,14,"delete"],[44,24,37,20],[44,25,37,21,"list"],[44,29,37,25],[44,30,37,26],[45,8,38,4],[45,12,38,8,"cellLists"],[45,21,38,17],[45,22,38,18,"size"],[45,26,38,22],[45,31,38,27],[45,32,38,28],[45,34,38,30],[46,10,39,6],[46,14,39,10],[46,15,39,11,"_cellKeyToChildren"],[46,33,39,29],[46,34,39,30,"delete"],[46,40,39,36],[46,41,39,37,"cellKey"],[46,48,39,44],[46,49,39,45],[47,8,40,4],[48,6,41,2],[49,4,41,3],[50,6,41,3,"key"],[50,9,41,3],[51,6,41,3,"value"],[51,11,41,3],[51,13,42,2],[51,22,42,2,"forEach"],[51,29,42,9,"forEach"],[51,30,42,10,"fn"],[51,32,42,12],[51,34,42,14],[52,8,43,4],[52,13,43,9],[52,17,43,13,"_iterator"],[52,26,43,22],[52,29,43,25],[52,30,43,26],[52,31,43,27],[52,33,43,29,"_createForOfIteratorHelperLoose2"],[52,65,43,61],[52,66,43,62,"default"],[52,73,43,69],[52,75,43,71],[52,79,43,75],[52,80,43,76,"_cellKeyToChildren"],[52,98,43,94],[52,99,43,95,"values"],[52,105,43,101],[52,106,43,102],[52,107,43,103],[52,108,43,104],[52,110,43,106,"_step"],[52,115,43,111],[52,117,43,113],[52,118,43,114],[52,119,43,115,"_step"],[52,124,43,120],[52,127,43,123,"_iterator"],[52,136,43,132],[52,137,43,133],[52,138,43,134],[52,140,43,136,"done"],[52,144,43,140],[52,147,43,143],[53,10,44,6],[53,14,44,10,"listSet"],[53,21,44,17],[53,24,44,20,"_step"],[53,29,44,25],[53,30,44,26,"value"],[53,35,44,31],[54,10,45,6],[54,15,45,11],[54,19,45,15,"_iterator2"],[54,29,45,25],[54,32,45,28],[54,33,45,29],[54,34,45,30],[54,36,45,32,"_createForOfIteratorHelperLoose2"],[54,68,45,64],[54,69,45,65,"default"],[54,76,45,72],[54,78,45,74,"listSet"],[54,85,45,81],[54,86,45,82],[54,88,45,84,"_step2"],[54,94,45,90],[54,96,45,92],[54,97,45,93],[54,98,45,94,"_step2"],[54,104,45,100],[54,107,45,103,"_iterator2"],[54,117,45,113],[54,118,45,114],[54,119,45,115],[54,121,45,117,"done"],[54,125,45,121],[54,128,45,124],[55,12,46,8],[55,16,46,12,"list"],[55,20,46,16],[55,23,46,19,"_step2"],[55,29,46,25],[55,30,46,26,"value"],[55,35,46,31],[56,12,47,8,"fn"],[56,14,47,10],[56,15,47,11,"list"],[56,19,47,15],[56,20,47,16],[57,10,48,6],[58,8,49,4],[59,6,50,2],[60,4,50,3],[61,6,50,3,"key"],[61,9,50,3],[62,6,50,3,"value"],[62,11,50,3],[62,13,51,2],[62,22,51,2,"forEachInCell"],[62,35,51,15,"forEachInCell"],[62,36,51,16,"cellKey"],[62,43,51,23],[62,45,51,25,"fn"],[62,47,51,27],[62,49,51,29],[63,8,52,4],[63,12,52,8,"_this$_cellKeyToChild2"],[63,34,52,30],[64,8,53,4],[64,12,53,8,"listSet"],[64,19,53,15],[64,22,53,18],[64,23,53,19,"_this$_cellKeyToChild2"],[64,45,53,41],[64,48,53,44],[64,52,53,48],[64,53,53,49,"_cellKeyToChildren"],[64,71,53,67],[64,72,53,68,"get"],[64,75,53,71],[64,76,53,72,"cellKey"],[64,83,53,79],[64,84,53,80],[64,90,53,86],[64,94,53,90],[64,98,53,94,"_this$_cellKeyToChild2"],[64,120,53,116],[64,125,53,121],[64,130,53,126],[64,131,53,127],[64,134,53,130,"_this$_cellKeyToChild2"],[64,156,53,152],[64,159,53,155],[64,161,53,157],[65,8,54,4],[65,13,54,9],[65,17,54,13,"_iterator3"],[65,27,54,23],[65,30,54,26],[65,31,54,27],[65,32,54,28],[65,34,54,30,"_createForOfIteratorHelperLoose2"],[65,66,54,62],[65,67,54,63,"default"],[65,74,54,70],[65,76,54,72,"listSet"],[65,83,54,79],[65,84,54,80],[65,86,54,82,"_step3"],[65,92,54,88],[65,94,54,90],[65,95,54,91],[65,96,54,92,"_step3"],[65,102,54,98],[65,105,54,101,"_iterator3"],[65,115,54,111],[65,116,54,112],[65,117,54,113],[65,119,54,115,"done"],[65,123,54,119],[65,126,54,122],[66,10,55,6],[66,14,55,10,"list"],[66,18,55,14],[66,21,55,17,"_step3"],[66,27,55,23],[66,28,55,24,"value"],[66,33,55,29],[67,10,56,6,"fn"],[67,12,56,8],[67,13,56,9,"list"],[67,17,56,13],[67,18,56,14],[68,8,57,4],[69,6,58,2],[70,4,58,3],[71,6,58,3,"key"],[71,9,58,3],[72,6,58,3,"value"],[72,11,58,3],[72,13,59,2],[72,22,59,2,"anyInCell"],[72,31,59,11,"anyInCell"],[72,32,59,12,"cellKey"],[72,39,59,19],[72,41,59,21,"fn"],[72,43,59,23],[72,45,59,25],[73,8,60,4],[73,12,60,8,"_this$_cellKeyToChild3"],[73,34,60,30],[74,8,61,4],[74,12,61,8,"listSet"],[74,19,61,15],[74,22,61,18],[74,23,61,19,"_this$_cellKeyToChild3"],[74,45,61,41],[74,48,61,44],[74,52,61,48],[74,53,61,49,"_cellKeyToChildren"],[74,71,61,67],[74,72,61,68,"get"],[74,75,61,71],[74,76,61,72,"cellKey"],[74,83,61,79],[74,84,61,80],[74,90,61,86],[74,94,61,90],[74,98,61,94,"_this$_cellKeyToChild3"],[74,120,61,116],[74,125,61,121],[74,130,61,126],[74,131,61,127],[74,134,61,130,"_this$_cellKeyToChild3"],[74,156,61,152],[74,159,61,155],[74,161,61,157],[75,8,62,4],[75,13,62,9],[75,17,62,13,"_iterator4"],[75,27,62,23],[75,30,62,26],[75,31,62,27],[75,32,62,28],[75,34,62,30,"_createForOfIteratorHelperLoose2"],[75,66,62,62],[75,67,62,63,"default"],[75,74,62,70],[75,76,62,72,"listSet"],[75,83,62,79],[75,84,62,80],[75,86,62,82,"_step4"],[75,92,62,88],[75,94,62,90],[75,95,62,91],[75,96,62,92,"_step4"],[75,102,62,98],[75,105,62,101,"_iterator4"],[75,115,62,111],[75,116,62,112],[75,117,62,113],[75,119,62,115,"done"],[75,123,62,119],[75,126,62,122],[76,10,63,6],[76,14,63,10,"list"],[76,18,63,14],[76,21,63,17,"_step4"],[76,27,63,23],[76,28,63,24,"value"],[76,33,63,29],[77,10,64,6],[77,14,64,10,"fn"],[77,16,64,12],[77,17,64,13,"list"],[77,21,64,17],[77,22,64,18],[77,24,64,20],[78,12,65,8],[78,19,65,15],[78,23,65,19],[79,10,66,6],[80,8,67,4],[81,8,68,4],[81,15,68,11],[81,20,68,16],[82,6,69,2],[83,4,69,3],[84,6,69,3,"key"],[84,9,69,3],[85,6,69,3,"value"],[85,11,69,3],[85,13,70,2],[85,22,70,2,"size"],[85,26,70,6,"size"],[85,27,70,6],[85,29,70,9],[86,8,71,4],[86,15,71,11],[86,19,71,15],[86,20,71,16,"_childrenToCellKey"],[86,38,71,34],[86,39,71,35,"size"],[86,43,71,39],[87,6,72,2],[88,4,72,3],[89,2,72,3],[90,2,74,0,"exports"],[90,9,74,7],[90,10,74,8,"default"],[90,17,74,15],[90,20,74,18,"ChildListCollection"],[90,39,74,37],[91,2,75,0,"module"],[91,8,75,6],[91,9,75,7,"exports"],[91,16,75,14],[91,19,75,17,"exports"],[91,26,75,24],[91,27,75,25,"default"],[91,34,75,32],[92,0,75,33],[92,3]],"functionMap":{"names":["<global>","ChildListCollection","constructor","add","remove","forEach","forEachInCell","anyInCell","size"],"mappings":"AAA;ACiB;ECC;GDG;EEC;GFO;EGC;GHU;EIC;GJQ;EKC;GLO;EMC;GNU;EOC;GPE;CDC"},"hasCjsExports":true},"type":"js/module"}]}