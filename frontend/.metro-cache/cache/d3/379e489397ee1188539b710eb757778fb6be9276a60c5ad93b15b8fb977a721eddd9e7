{"dependencies":[{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"yg7e6laZwmpbIvId5jovq9ugXp8=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"Z6pzkVZ2fvxBLkFTgVVOy4UDj30=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":29,"index":44},"end":{"line":3,"column":84,"index":99}}],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/objectSpread2","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":44,"index":213},"end":{"line":6,"column":91,"index":260}}],"key":"F+ExrfS9dcoZxXJOBwTmx09hji8=","exportNames":["*"],"imports":1}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":40,"index":303},"end":{"line":7,"column":69,"index":332}}],"key":"ePiUN85REKH0vTLGPPDgdWgjFww=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _toConsumableArray = require(_dependencyMap[0], \"@babel/runtime/helpers/toConsumableArray\").default;\n  var _classCallCheck = require(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\").default;\n  var _createClass = require(_dependencyMap[2], \"@babel/runtime/helpers/createClass\").default;\n  var _interopRequireDefault = require(_dependencyMap[3], \"@babel/runtime/helpers/interopRequireDefault\").default;\n  exports.__esModule = true;\n  exports.CellRenderMask = void 0;\n  var _objectSpread2 = _interopRequireDefault(require(_dependencyMap[4], \"@babel/runtime/helpers/objectSpread2\"));\n  var _invariant = _interopRequireDefault(require(_dependencyMap[5], \"fbjs/lib/invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n  var CellRenderMask = /*#__PURE__*/function () {\n    function CellRenderMask(numCells) {\n      _classCallCheck(this, CellRenderMask);\n      (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n      this._numCells = numCells;\n      if (numCells === 0) {\n        this._regions = [];\n      } else {\n        this._regions = [{\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true\n        }];\n      }\n    }\n    return _createClass(CellRenderMask, [{\n      key: \"enumerateRegions\",\n      value: function enumerateRegions() {\n        return this._regions;\n      }\n    }, {\n      key: \"addCells\",\n      value: function addCells(cells) {\n        var _this$_regions;\n        (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n\n        // VirtualizedList uses inclusive ranges, where zero-count states are\n        // possible. E.g. [0, -1] for no cells, starting at 0.\n        if (cells.last < cells.first) {\n          return;\n        }\n        var _this$_findRegion = this._findRegion(cells.first),\n          firstIntersect = _this$_findRegion[0],\n          firstIntersectIdx = _this$_findRegion[1];\n        var _this$_findRegion2 = this._findRegion(cells.last),\n          lastIntersect = _this$_findRegion2[0],\n          lastIntersectIdx = _this$_findRegion2[1];\n\n        // Fast-path if the cells to add are already all present in the mask. We\n        // will otherwise need to do some mutation.\n        if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n          return;\n        }\n\n        // We need to replace the existing covered regions with 1-3 new regions\n        // depending whether we need to split spacers out of overlapping regions.\n        var newLeadRegion = [];\n        var newTailRegion = [];\n        var newMainRegion = (0, _objectSpread2.default)((0, _objectSpread2.default)({}, cells), {}, {\n          isSpacer: false\n        });\n        if (firstIntersect.first < newMainRegion.first) {\n          if (firstIntersect.isSpacer) {\n            newLeadRegion.push({\n              first: firstIntersect.first,\n              last: newMainRegion.first - 1,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.first = firstIntersect.first;\n          }\n        }\n        if (lastIntersect.last > newMainRegion.last) {\n          if (lastIntersect.isSpacer) {\n            newTailRegion.push({\n              first: newMainRegion.last + 1,\n              last: lastIntersect.last,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.last = lastIntersect.last;\n          }\n        }\n        var replacementRegions = [].concat(newLeadRegion, [newMainRegion], newTailRegion);\n        var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n        (_this$_regions = this._regions).splice.apply(_this$_regions, [firstIntersectIdx, numRegionsToDelete].concat(_toConsumableArray(replacementRegions)));\n      }\n    }, {\n      key: \"numCells\",\n      value: function numCells() {\n        return this._numCells;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(other) {\n        return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every(function (region, i) {\n          return region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer;\n        });\n      }\n    }, {\n      key: \"_findRegion\",\n      value: function _findRegion(cellIdx) {\n        var firstIdx = 0;\n        var lastIdx = this._regions.length - 1;\n        while (firstIdx <= lastIdx) {\n          var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n          var middleRegion = this._regions[middleIdx];\n          if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n            return [middleRegion, middleIdx];\n          } else if (cellIdx < middleRegion.first) {\n            lastIdx = middleIdx - 1;\n          } else if (cellIdx > middleRegion.last) {\n            firstIdx = middleIdx + 1;\n          }\n        }\n        (0, _invariant.default)(false, \"A region was not found containing cellIdx \" + cellIdx);\n      }\n    }]);\n  }();\n  exports.CellRenderMask = CellRenderMask;\n});","lineCount":131,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_toConsumableArray"],[4,24,1,13],[4,27,1,13,"require"],[4,34,1,13],[4,35,1,13,"_dependencyMap"],[4,49,1,13],[4,98,1,13,"default"],[4,105,1,13],[5,2,1,13],[5,6,1,13,"_classCallCheck"],[5,21,1,13],[5,24,1,13,"require"],[5,31,1,13],[5,32,1,13,"_dependencyMap"],[5,46,1,13],[5,92,1,13,"default"],[5,99,1,13],[6,2,1,13],[6,6,1,13,"_createClass"],[6,18,1,13],[6,21,1,13,"require"],[6,28,1,13],[6,29,1,13,"_dependencyMap"],[6,43,1,13],[6,86,1,13,"default"],[6,93,1,13],[7,2,3,0],[7,6,3,4,"_interopRequireDefault"],[7,28,3,26],[7,31,3,29,"require"],[7,38,3,36],[7,39,3,36,"_dependencyMap"],[7,53,3,36],[7,104,3,83],[7,105,3,84],[7,106,3,85,"default"],[7,113,3,92],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"__esModule"],[8,20,4,18],[8,23,4,21],[8,27,4,25],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"CellRenderMask"],[9,24,5,22],[9,27,5,25],[9,32,5,30],[9,33,5,31],[10,2,6,0],[10,6,6,4,"_objectSpread2"],[10,20,6,18],[10,23,6,21,"_interopRequireDefault"],[10,45,6,43],[10,46,6,44,"require"],[10,53,6,51],[10,54,6,51,"_dependencyMap"],[10,68,6,51],[10,111,6,90],[10,112,6,91],[10,113,6,92],[11,2,7,0],[11,6,7,4,"_invariant"],[11,16,7,14],[11,19,7,17,"_interopRequireDefault"],[11,41,7,39],[11,42,7,40,"require"],[11,49,7,47],[11,50,7,47,"_dependencyMap"],[11,64,7,47],[11,89,7,68],[11,90,7,69],[11,91,7,70],[12,2,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,2,8,0],[21,6,18,6,"CellRenderMask"],[21,20,18,20],[22,4,19,2],[22,13,19,2,"CellRenderMask"],[22,28,19,14,"numCells"],[22,36,19,22],[22,38,19,24],[23,6,19,24,"_classCallCheck"],[23,21,19,24],[23,28,19,24,"CellRenderMask"],[23,42,19,24],[24,6,20,4],[24,7,20,5],[24,8,20,6],[24,10,20,8,"_invariant"],[24,20,20,18],[24,21,20,19,"default"],[24,28,20,26],[24,30,20,28,"numCells"],[24,38,20,36],[24,42,20,40],[24,43,20,41],[24,45,20,43],[24,105,20,103],[24,106,20,104],[25,6,21,4],[25,10,21,8],[25,11,21,9,"_numCells"],[25,20,21,18],[25,23,21,21,"numCells"],[25,31,21,29],[26,6,22,4],[26,10,22,8,"numCells"],[26,18,22,16],[26,23,22,21],[26,24,22,22],[26,26,22,24],[27,8,23,6],[27,12,23,10],[27,13,23,11,"_regions"],[27,21,23,19],[27,24,23,22],[27,26,23,24],[28,6,24,4],[28,7,24,5],[28,13,24,11],[29,8,25,6],[29,12,25,10],[29,13,25,11,"_regions"],[29,21,25,19],[29,24,25,22],[29,25,25,23],[30,10,26,8,"first"],[30,15,26,13],[30,17,26,15],[30,18,26,16],[31,10,27,8,"last"],[31,14,27,12],[31,16,27,14,"numCells"],[31,24,27,22],[31,27,27,25],[31,28,27,26],[32,10,28,8,"isSpacer"],[32,18,28,16],[32,20,28,18],[33,8,29,6],[33,9,29,7],[33,10,29,8],[34,6,30,4],[35,4,31,2],[36,4,31,3],[36,11,31,3,"_createClass"],[36,23,31,3],[36,24,31,3,"CellRenderMask"],[36,38,31,3],[37,6,31,3,"key"],[37,9,31,3],[38,6,31,3,"value"],[38,11,31,3],[38,13,32,2],[38,22,32,2,"enumerateRegions"],[38,38,32,18,"enumerateRegions"],[38,39,32,18],[38,41,32,21],[39,8,33,4],[39,15,33,11],[39,19,33,15],[39,20,33,16,"_regions"],[39,28,33,24],[40,6,34,2],[41,4,34,3],[42,6,34,3,"key"],[42,9,34,3],[43,6,34,3,"value"],[43,11,34,3],[43,13,35,2],[43,22,35,2,"addCells"],[43,30,35,10,"addCells"],[43,31,35,11,"cells"],[43,36,35,16],[43,38,35,18],[44,8,35,18],[44,12,35,18,"_this$_regions"],[44,26,35,18],[45,8,36,4],[45,9,36,5],[45,10,36,6],[45,12,36,8,"_invariant"],[45,22,36,18],[45,23,36,19,"default"],[45,30,36,26],[45,32,36,28,"cells"],[45,37,36,33],[45,38,36,34,"first"],[45,43,36,39],[45,47,36,43],[45,48,36,44],[45,52,36,48,"cells"],[45,57,36,53],[45,58,36,54,"first"],[45,63,36,59],[45,66,36,62],[45,70,36,66],[45,71,36,67,"_numCells"],[45,80,36,76],[45,84,36,80,"cells"],[45,89,36,85],[45,90,36,86,"last"],[45,94,36,90],[45,98,36,94],[45,99,36,95],[45,100,36,96],[45,104,36,100,"cells"],[45,109,36,105],[45,110,36,106,"last"],[45,114,36,110],[45,117,36,113],[45,121,36,117],[45,122,36,118,"_numCells"],[45,131,36,127],[45,135,36,131,"cells"],[45,140,36,136],[45,141,36,137,"last"],[45,145,36,141],[45,149,36,145,"cells"],[45,154,36,150],[45,155,36,151,"first"],[45,160,36,156],[45,163,36,159],[45,164,36,160],[45,166,36,162],[45,222,36,218],[45,223,36,219],[47,8,38,4],[48,8,39,4],[49,8,40,4],[49,12,40,8,"cells"],[49,17,40,13],[49,18,40,14,"last"],[49,22,40,18],[49,25,40,21,"cells"],[49,30,40,26],[49,31,40,27,"first"],[49,36,40,32],[49,38,40,34],[50,10,41,6],[51,8,42,4],[52,8,43,4],[52,12,43,8,"_this$_findRegion"],[52,29,43,25],[52,32,43,28],[52,36,43,32],[52,37,43,33,"_findRegion"],[52,48,43,44],[52,49,43,45,"cells"],[52,54,43,50],[52,55,43,51,"first"],[52,60,43,56],[52,61,43,57],[53,10,44,6,"firstIntersect"],[53,24,44,20],[53,27,44,23,"_this$_findRegion"],[53,44,44,40],[53,45,44,41],[53,46,44,42],[53,47,44,43],[54,10,45,6,"firstIntersectIdx"],[54,27,45,23],[54,30,45,26,"_this$_findRegion"],[54,47,45,43],[54,48,45,44],[54,49,45,45],[54,50,45,46],[55,8,46,4],[55,12,46,8,"_this$_findRegion2"],[55,30,46,26],[55,33,46,29],[55,37,46,33],[55,38,46,34,"_findRegion"],[55,49,46,45],[55,50,46,46,"cells"],[55,55,46,51],[55,56,46,52,"last"],[55,60,46,56],[55,61,46,57],[56,10,47,6,"lastIntersect"],[56,23,47,19],[56,26,47,22,"_this$_findRegion2"],[56,44,47,40],[56,45,47,41],[56,46,47,42],[56,47,47,43],[57,10,48,6,"lastIntersectIdx"],[57,26,48,22],[57,29,48,25,"_this$_findRegion2"],[57,47,48,43],[57,48,48,44],[57,49,48,45],[57,50,48,46],[59,8,50,4],[60,8,51,4],[61,8,52,4],[61,12,52,8,"firstIntersectIdx"],[61,29,52,25],[61,34,52,30,"lastIntersectIdx"],[61,50,52,46],[61,54,52,50],[61,55,52,51,"firstIntersect"],[61,69,52,65],[61,70,52,66,"isSpacer"],[61,78,52,74],[61,80,52,76],[62,10,53,6],[63,8,54,4],[65,8,56,4],[66,8,57,4],[67,8,58,4],[67,12,58,8,"newLeadRegion"],[67,25,58,21],[67,28,58,24],[67,30,58,26],[68,8,59,4],[68,12,59,8,"newTailRegion"],[68,25,59,21],[68,28,59,24],[68,30,59,26],[69,8,60,4],[69,12,60,8,"newMainRegion"],[69,25,60,21],[69,28,60,24],[69,29,60,25],[69,30,60,26],[69,32,60,28,"_objectSpread2"],[69,46,60,42],[69,47,60,43,"default"],[69,54,60,50],[69,56,60,52],[69,57,60,53],[69,58,60,54],[69,60,60,56,"_objectSpread2"],[69,74,60,70],[69,75,60,71,"default"],[69,82,60,78],[69,84,60,80],[69,85,60,81],[69,86,60,82],[69,88,60,84,"cells"],[69,93,60,89],[69,94,60,90],[69,96,60,92],[69,97,60,93],[69,98,60,94],[69,100,60,96],[70,10,61,6,"isSpacer"],[70,18,61,14],[70,20,61,16],[71,8,62,4],[71,9,62,5],[71,10,62,6],[72,8,63,4],[72,12,63,8,"firstIntersect"],[72,26,63,22],[72,27,63,23,"first"],[72,32,63,28],[72,35,63,31,"newMainRegion"],[72,48,63,44],[72,49,63,45,"first"],[72,54,63,50],[72,56,63,52],[73,10,64,6],[73,14,64,10,"firstIntersect"],[73,28,64,24],[73,29,64,25,"isSpacer"],[73,37,64,33],[73,39,64,35],[74,12,65,8,"newLeadRegion"],[74,25,65,21],[74,26,65,22,"push"],[74,30,65,26],[74,31,65,27],[75,14,66,10,"first"],[75,19,66,15],[75,21,66,17,"firstIntersect"],[75,35,66,31],[75,36,66,32,"first"],[75,41,66,37],[76,14,67,10,"last"],[76,18,67,14],[76,20,67,16,"newMainRegion"],[76,33,67,29],[76,34,67,30,"first"],[76,39,67,35],[76,42,67,38],[76,43,67,39],[77,14,68,10,"isSpacer"],[77,22,68,18],[77,24,68,20],[78,12,69,8],[78,13,69,9],[78,14,69,10],[79,10,70,6],[79,11,70,7],[79,17,70,13],[80,12,71,8,"newMainRegion"],[80,25,71,21],[80,26,71,22,"first"],[80,31,71,27],[80,34,71,30,"firstIntersect"],[80,48,71,44],[80,49,71,45,"first"],[80,54,71,50],[81,10,72,6],[82,8,73,4],[83,8,74,4],[83,12,74,8,"lastIntersect"],[83,25,74,21],[83,26,74,22,"last"],[83,30,74,26],[83,33,74,29,"newMainRegion"],[83,46,74,42],[83,47,74,43,"last"],[83,51,74,47],[83,53,74,49],[84,10,75,6],[84,14,75,10,"lastIntersect"],[84,27,75,23],[84,28,75,24,"isSpacer"],[84,36,75,32],[84,38,75,34],[85,12,76,8,"newTailRegion"],[85,25,76,21],[85,26,76,22,"push"],[85,30,76,26],[85,31,76,27],[86,14,77,10,"first"],[86,19,77,15],[86,21,77,17,"newMainRegion"],[86,34,77,30],[86,35,77,31,"last"],[86,39,77,35],[86,42,77,38],[86,43,77,39],[87,14,78,10,"last"],[87,18,78,14],[87,20,78,16,"lastIntersect"],[87,33,78,29],[87,34,78,30,"last"],[87,38,78,34],[88,14,79,10,"isSpacer"],[88,22,79,18],[88,24,79,20],[89,12,80,8],[89,13,80,9],[89,14,80,10],[90,10,81,6],[90,11,81,7],[90,17,81,13],[91,12,82,8,"newMainRegion"],[91,25,82,21],[91,26,82,22,"last"],[91,30,82,26],[91,33,82,29,"lastIntersect"],[91,46,82,42],[91,47,82,43,"last"],[91,51,82,47],[92,10,83,6],[93,8,84,4],[94,8,85,4],[94,12,85,8,"replacementRegions"],[94,30,85,26],[94,36,85,26,"concat"],[94,42,85,26],[94,43,85,33,"newLeadRegion"],[94,56,85,46],[94,59,85,48,"newMainRegion"],[94,72,85,61],[94,75,85,66,"newTailRegion"],[94,88,85,79],[94,89,85,80],[95,8,86,4],[95,12,86,8,"numRegionsToDelete"],[95,30,86,26],[95,33,86,29,"lastIntersectIdx"],[95,49,86,45],[95,52,86,48,"firstIntersectIdx"],[95,69,86,65],[95,72,86,68],[95,73,86,69],[96,8,87,4],[96,9,87,4,"_this$_regions"],[96,23,87,4],[96,30,87,8],[96,31,87,9,"_regions"],[96,39,87,17],[96,41,87,18,"splice"],[96,47,87,24],[96,48,87,24,"apply"],[96,53,87,24],[96,54,87,24,"_this$_regions"],[96,68,87,24],[96,71,87,25,"firstIntersectIdx"],[96,88,87,42],[96,90,87,44,"numRegionsToDelete"],[96,108,87,62],[96,110,87,62,"concat"],[96,116,87,62],[96,117,87,62,"_toConsumableArray"],[96,135,87,62],[96,136,87,67,"replacementRegions"],[96,154,87,85],[96,157,87,86],[97,6,88,2],[98,4,88,3],[99,6,88,3,"key"],[99,9,88,3],[100,6,88,3,"value"],[100,11,88,3],[100,13,89,2],[100,22,89,2,"numCells"],[100,30,89,10,"numCells"],[100,31,89,10],[100,33,89,13],[101,8,90,4],[101,15,90,11],[101,19,90,15],[101,20,90,16,"_numCells"],[101,29,90,25],[102,6,91,2],[103,4,91,3],[104,6,91,3,"key"],[104,9,91,3],[105,6,91,3,"value"],[105,11,91,3],[105,13,92,2],[105,22,92,2,"equals"],[105,28,92,8,"equals"],[105,29,92,9,"other"],[105,34,92,14],[105,36,92,16],[106,8,93,4],[106,15,93,11],[106,19,93,15],[106,20,93,16,"_numCells"],[106,29,93,25],[106,34,93,30,"other"],[106,39,93,35],[106,40,93,36,"_numCells"],[106,49,93,45],[106,53,93,49],[106,57,93,53],[106,58,93,54,"_regions"],[106,66,93,62],[106,67,93,63,"length"],[106,73,93,69],[106,78,93,74,"other"],[106,83,93,79],[106,84,93,80,"_regions"],[106,92,93,88],[106,93,93,89,"length"],[106,99,93,95],[106,103,93,99],[106,107,93,103],[106,108,93,104,"_regions"],[106,116,93,112],[106,117,93,113,"every"],[106,122,93,118],[106,123,93,119],[106,133,93,120,"region"],[106,139,93,126],[106,141,93,128,"i"],[106,142,93,129],[107,10,93,129],[107,17,93,134,"region"],[107,23,93,140],[107,24,93,141,"first"],[107,29,93,146],[107,34,93,151,"other"],[107,39,93,156],[107,40,93,157,"_regions"],[107,48,93,165],[107,49,93,166,"i"],[107,50,93,167],[107,51,93,168],[107,52,93,169,"first"],[107,57,93,174],[107,61,93,178,"region"],[107,67,93,184],[107,68,93,185,"last"],[107,72,93,189],[107,77,93,194,"other"],[107,82,93,199],[107,83,93,200,"_regions"],[107,91,93,208],[107,92,93,209,"i"],[107,93,93,210],[107,94,93,211],[107,95,93,212,"last"],[107,99,93,216],[107,103,93,220,"region"],[107,109,93,226],[107,110,93,227,"isSpacer"],[107,118,93,235],[107,123,93,240,"other"],[107,128,93,245],[107,129,93,246,"_regions"],[107,137,93,254],[107,138,93,255,"i"],[107,139,93,256],[107,140,93,257],[107,141,93,258,"isSpacer"],[107,149,93,266],[108,8,93,266],[108,10,93,267],[109,6,94,2],[110,4,94,3],[111,6,94,3,"key"],[111,9,94,3],[112,6,94,3,"value"],[112,11,94,3],[112,13,95,2],[112,22,95,2,"_findRegion"],[112,33,95,13,"_findRegion"],[112,34,95,14,"cellIdx"],[112,41,95,21],[112,43,95,23],[113,8,96,4],[113,12,96,8,"firstIdx"],[113,20,96,16],[113,23,96,19],[113,24,96,20],[114,8,97,4],[114,12,97,8,"lastIdx"],[114,19,97,15],[114,22,97,18],[114,26,97,22],[114,27,97,23,"_regions"],[114,35,97,31],[114,36,97,32,"length"],[114,42,97,38],[114,45,97,41],[114,46,97,42],[115,8,98,4],[115,15,98,11,"firstIdx"],[115,23,98,19],[115,27,98,23,"lastIdx"],[115,34,98,30],[115,36,98,32],[116,10,99,6],[116,14,99,10,"middleIdx"],[116,23,99,19],[116,26,99,22,"Math"],[116,30,99,26],[116,31,99,27,"floor"],[116,36,99,32],[116,37,99,33],[116,38,99,34,"firstIdx"],[116,46,99,42],[116,49,99,45,"lastIdx"],[116,56,99,52],[116,60,99,56],[116,61,99,57],[116,62,99,58],[117,10,100,6],[117,14,100,10,"middleRegion"],[117,26,100,22],[117,29,100,25],[117,33,100,29],[117,34,100,30,"_regions"],[117,42,100,38],[117,43,100,39,"middleIdx"],[117,52,100,48],[117,53,100,49],[118,10,101,6],[118,14,101,10,"cellIdx"],[118,21,101,17],[118,25,101,21,"middleRegion"],[118,37,101,33],[118,38,101,34,"first"],[118,43,101,39],[118,47,101,43,"cellIdx"],[118,54,101,50],[118,58,101,54,"middleRegion"],[118,70,101,66],[118,71,101,67,"last"],[118,75,101,71],[118,77,101,73],[119,12,102,8],[119,19,102,15],[119,20,102,16,"middleRegion"],[119,32,102,28],[119,34,102,30,"middleIdx"],[119,43,102,39],[119,44,102,40],[120,10,103,6],[120,11,103,7],[120,17,103,13],[120,21,103,17,"cellIdx"],[120,28,103,24],[120,31,103,27,"middleRegion"],[120,43,103,39],[120,44,103,40,"first"],[120,49,103,45],[120,51,103,47],[121,12,104,8,"lastIdx"],[121,19,104,15],[121,22,104,18,"middleIdx"],[121,31,104,27],[121,34,104,30],[121,35,104,31],[122,10,105,6],[122,11,105,7],[122,17,105,13],[122,21,105,17,"cellIdx"],[122,28,105,24],[122,31,105,27,"middleRegion"],[122,43,105,39],[122,44,105,40,"last"],[122,48,105,44],[122,50,105,46],[123,12,106,8,"firstIdx"],[123,20,106,16],[123,23,106,19,"middleIdx"],[123,32,106,28],[123,35,106,31],[123,36,106,32],[124,10,107,6],[125,8,108,4],[126,8,109,4],[126,9,109,5],[126,10,109,6],[126,12,109,8,"_invariant"],[126,22,109,18],[126,23,109,19,"default"],[126,30,109,26],[126,32,109,28],[126,37,109,33],[126,39,109,35],[126,83,109,79],[126,86,109,82,"cellIdx"],[126,93,109,89],[126,94,109,90],[127,6,110,2],[128,4,110,3],[129,2,110,3],[130,2,112,0,"exports"],[130,9,112,7],[130,10,112,8,"CellRenderMask"],[130,24,112,22],[130,27,112,25,"CellRenderMask"],[130,41,112,39],[131,0,112,40],[131,3]],"functionMap":{"names":["<global>","CellRenderMask","constructor","enumerateRegions","addCells","numCells","equals","_regions.every$argument_0","_findRegion"],"mappings":"AAA;ACiB;ECC;GDY;EEC;GFE;EGC;GHqD;EIC;GJE;EKC;uHCC,mJD;GLC;EOC;GPe;CDC"},"hasCjsExports":true},"type":"js/module"}]}