{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"expo-constants","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":39,"index":39}}],"key":"pPv5KzfRT0rL6NCr7G9k0o4d1W8=","exportNames":["*"],"imports":1}},{"name":"./Schemes","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":40},"end":{"line":2,"column":59,"index":99}}],"key":"n/tFEHLQPHdXg5i1nrK9VhhMvhA=","exportNames":["*"],"imports":1}},{"name":"./validateURL","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":100},"end":{"line":3,"column":44,"index":144}}],"key":"QglbFjhSs1PLl8wx6icnjPl9qpg=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.createURL = createURL;\n  exports.parse = parse;\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _expoConstants = require(_dependencyMap[1], \"expo-constants\");\n  var Constants = _interopDefault(_expoConstants);\n  var _Schemes = require(_dependencyMap[2], \"./Schemes\");\n  var _validateURL = require(_dependencyMap[3], \"./validateURL\");\n  function getHostUri() {\n    var _Constants$expoConfig;\n    if ((_Constants$expoConfig = Constants.default.expoConfig) != null && _Constants$expoConfig.hostUri) {\n      return Constants.default.expoConfig.hostUri;\n    } else if (!(0, _Schemes.hasCustomScheme)()) {\n      // we're probably not using up-to-date xdl, so just fake it for now\n      // we have to remove the /--/ on the end since this will be inserted again later\n      return removeScheme(Constants.default.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n    } else {\n      return null;\n    }\n  }\n  function isExpoHosted() {\n    var _Constants$expoGoConf;\n    var hostUri = getHostUri();\n    return !!(hostUri && (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test|expo\\.dev)(:.*)?(\\/.*)?$/.test(hostUri) || (_Constants$expoGoConf = Constants.default.expoGoConfig) != null && _Constants$expoGoConf.developer));\n  }\n  function removeScheme(url) {\n    return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n  }\n  function removePort(url) {\n    return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n  }\n  function removeLeadingSlash(url) {\n    return url.replace(/^\\//, '');\n  }\n  function removeTrailingSlashAndQueryString(url) {\n    return url.replace(/\\/?\\?.*$/, '');\n  }\n  function ensureLeadingSlash(input, shouldAppend) {\n    var hasSlash = input.startsWith('/');\n    if (hasSlash && !shouldAppend) {\n      return input.substring(1);\n    } else if (!hasSlash && shouldAppend) {\n      return `/${input}`;\n    }\n    return input;\n  }\n  // @needsAudit\n  /**\n   * Helper method for constructing a deep link into your app, given an optional path and set of query\n   * parameters. Creates a URI scheme with two slashes by default.\n   *\n   * The scheme must be defined in the [app config](./../config/app) under `expo.scheme`\n   * or `expo.{android,ios}.scheme`. Platform-specific schemes defined under `expo.{android,ios}.scheme`\n   * take precedence over universal schemes defined under `expo.scheme`.\n   *\n   * # Examples\n   * - Development and production builds: `<scheme>://path` - uses the optional `scheme` property if provided, and otherwise uses the first scheme defined by your app config\n   * - Web (dev): `https://localhost:19006/path`\n   * - Web (prod): `https://myapp.com/path`\n   * - Expo Go (dev): `exp://128.0.0.1:8081/--/path`\n   *\n   * The behavior of this method in Expo Go for published updates is undefined and should not be relied upon.\n   * The created URL in this case is neither stable nor predictable during the lifetime of the app.\n   * If a stable URL is needed, for example in authorization callbacks, a build (or development build)\n   * of your application should be used and the scheme provided.\n   *\n   * @param path Addition path components to append to the base URL.\n   * @param namedParameters Additional options object.\n   * @return A URL string which points to your app with the given deep link information.\n   */\n  function createURL(path) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      scheme = _ref.scheme,\n      _ref$queryParams = _ref.queryParams,\n      queryParams = _ref$queryParams === void 0 ? {} : _ref$queryParams,\n      _ref$isTripleSlashed = _ref.isTripleSlashed,\n      isTripleSlashed = _ref$isTripleSlashed === void 0 ? false : _ref$isTripleSlashed;\n    var resolvedScheme = (0, _Schemes.resolveScheme)({\n      scheme: scheme\n    });\n    var hostUri = getHostUri() || '';\n    if ((0, _Schemes.hasCustomScheme)() && isExpoHosted()) {\n      hostUri = '';\n    }\n    if (path) {\n      if (isExpoHosted() && hostUri) {\n        path = `/--/${removeLeadingSlash(path)}`;\n      }\n      if (isTripleSlashed && !path.startsWith('/')) {\n        path = `/${path}`;\n      }\n    } else {\n      path = '';\n    }\n    // merge user-provided query params with any that were already in the hostUri\n    // e.g. release-channel\n    var queryString = '';\n    var queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n    if (queryStringMatchResult) {\n      hostUri = queryStringMatchResult[1];\n      queryString = queryStringMatchResult[2];\n      var paramsFromHostUri = {};\n      try {\n        paramsFromHostUri = Object.fromEntries(\n        // @ts-ignore: [Symbol.iterator] is indeed, available on every platform.\n        new URLSearchParams(queryString));\n      } catch (_unused) {}\n      queryParams = Object.assign({}, queryParams, paramsFromHostUri);\n    }\n    queryString = new URLSearchParams(\n    // For legacy purposes, we'll strip out the nullish values before creating the URL.\n    Object.fromEntries(Object.entries(queryParams).filter(function (_ref2) {\n      var _ref3 = (0, _slicedToArray.default)(_ref2, 2),\n        value = _ref3[1];\n      return value != null;\n    }))).toString();\n    if (queryString) {\n      queryString = `?${queryString}`;\n    }\n    hostUri = ensureLeadingSlash(hostUri, !isTripleSlashed);\n    // URLSearchParams.stringify already encodes query parameters, so we only need to encode the remaining part of the URL.\n    var encodedURI = encodeURI(`${resolvedScheme}:${isTripleSlashed ? '/' : ''}/${hostUri}${path}`);\n    return `${encodedURI}${queryString}`;\n  }\n  // @needsAudit\n  /**\n   * Helper method for parsing out deep link information from a URL.\n   * @param url A URL that points to the currently running experience (for example, an output of `Linking.createURL()`).\n   * @return A `ParsedURL` object.\n   */\n  function parse(url) {\n    (0, _validateURL.validateURL)(url);\n    var queryParams = {};\n    var path = null;\n    var hostname = null;\n    var scheme = null;\n    try {\n      var parsed = new URL(url);\n      parsed.searchParams.forEach(function (value, key) {\n        queryParams[key] = decodeURIComponent(value);\n      });\n      path = parsed.pathname || null;\n      hostname = parsed.hostname || null;\n      scheme = parsed.protocol || null;\n    } catch (_unused2) {\n      path = url;\n    }\n    var hostUri = getHostUri() || '';\n    var hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));\n    if (scheme) {\n      // Remove colon at end\n      scheme = scheme.substring(0, scheme.length - 1);\n    }\n    if (path) {\n      path = removeLeadingSlash(path);\n      var expoPrefix = null;\n      if (hostUriStripped) {\n        var parts = hostUriStripped.split('/');\n        expoPrefix = parts.slice(1).concat(['--/']).join('/');\n      }\n      if (isExpoHosted() && !(0, _Schemes.hasCustomScheme)() && expoPrefix && path.startsWith(expoPrefix)) {\n        path = path.substring(expoPrefix.length);\n        hostname = null;\n      } else if (path.indexOf('+') > -1) {\n        path = path.substring(path.indexOf('+') + 1);\n      }\n    }\n    return {\n      hostname: hostname,\n      path: path,\n      queryParams: queryParams,\n      scheme: scheme\n    };\n  }\n});","lineCount":186,"map":[[12,2,69,0,"exports"],[12,9,69,0],[12,10,69,0,"createURL"],[12,19,69,0],[12,22,69,0,"createURL"],[12,31,69,0],[13,2,122,0,"exports"],[13,9,122,0],[13,10,122,0,"parse"],[13,15,122,0],[13,18,122,0,"parse"],[13,23,122,0],[14,2,167,1],[14,6,167,1,"_babelRuntimeHelpersSlicedToArray"],[14,39,167,1],[14,42,167,1,"require"],[14,49,167,1],[14,50,167,1,"_dependencyMap"],[14,64,167,1],[15,2,167,1],[15,6,167,1,"_slicedToArray"],[15,20,167,1],[15,23,167,1,"_interopDefault"],[15,38,167,1],[15,39,167,1,"_babelRuntimeHelpersSlicedToArray"],[15,72,167,1],[16,2,1,0],[16,6,1,0,"_expoConstants"],[16,20,1,0],[16,23,1,0,"require"],[16,30,1,0],[16,31,1,0,"_dependencyMap"],[16,45,1,0],[17,2,1,0],[17,6,1,0,"Constants"],[17,15,1,0],[17,18,1,0,"_interopDefault"],[17,33,1,0],[17,34,1,0,"_expoConstants"],[17,48,1,0],[18,2,2,0],[18,6,2,0,"_Schemes"],[18,14,2,0],[18,17,2,0,"require"],[18,24,2,0],[18,25,2,0,"_dependencyMap"],[18,39,2,0],[19,2,3,0],[19,6,3,0,"_validateURL"],[19,18,3,0],[19,21,3,0,"require"],[19,28,3,0],[19,29,3,0,"_dependencyMap"],[19,43,3,0],[20,2,4,0],[20,11,4,9,"getHostUri"],[20,21,4,19,"getHostUri"],[20,22,4,19],[20,24,4,22],[21,4,4,22],[21,8,4,22,"_Constants$expoConfig"],[21,29,4,22],[22,4,5,4],[22,9,5,4,"_Constants$expoConfig"],[22,30,5,4],[22,33,5,8,"Constants"],[22,42,5,17],[22,43,5,17,"default"],[22,50,5,17],[22,51,5,18,"expoConfig"],[22,61,5,28],[22,74,5,8,"_Constants$expoConfig"],[22,95,5,8],[22,96,5,30,"hostUri"],[22,103,5,37],[22,105,5,39],[23,6,6,8],[23,13,6,15,"Constants"],[23,22,6,24],[23,23,6,24,"default"],[23,30,6,24],[23,31,6,25,"expoConfig"],[23,41,6,35],[23,42,6,36,"hostUri"],[23,49,6,43],[24,4,7,4],[24,5,7,5],[24,11,8,9],[24,15,8,13],[24,16,8,14],[24,20,8,14,"hasCustomScheme"],[24,28,8,29],[24,29,8,29,"hasCustomScheme"],[24,44,8,29],[24,46,8,30],[24,47,8,31],[24,49,8,33],[25,6,9,8],[26,6,10,8],[27,6,11,8],[27,13,11,15,"removeScheme"],[27,25,11,27],[27,26,11,28,"Constants"],[27,35,11,37],[27,36,11,37,"default"],[27,43,11,37],[27,44,11,38,"linkingUri"],[27,54,11,48],[27,55,11,49],[27,56,11,50,"replace"],[27,63,11,57],[27,64,11,58],[27,79,11,73],[27,81,11,75],[27,83,11,77],[27,84,11,78],[28,4,12,4],[28,5,12,5],[28,11,13,9],[29,6,14,8],[29,13,14,15],[29,17,14,19],[30,4,15,4],[31,2,16,0],[32,2,17,0],[32,11,17,9,"isExpoHosted"],[32,23,17,21,"isExpoHosted"],[32,24,17,21],[32,26,17,24],[33,4,17,24],[33,8,17,24,"_Constants$expoGoConf"],[33,29,17,24],[34,4,18,4],[34,8,18,10,"hostUri"],[34,15,18,17],[34,18,18,20,"getHostUri"],[34,28,18,30],[34,29,18,31],[34,30,18,32],[35,4,19,4],[35,11,19,11],[35,12,19,12],[35,14,19,14,"hostUri"],[35,21,19,21],[35,26,20,9],[35,103,20,86],[35,104,20,87,"test"],[35,108,20,91],[35,109,20,92,"hostUri"],[35,116,20,99],[35,117,20,100],[35,122,20,100,"_Constants$expoGoConf"],[35,143,20,100],[35,146,21,12,"Constants"],[35,155,21,21],[35,156,21,21,"default"],[35,163,21,21],[35,164,21,22,"expoGoConfig"],[35,176,21,34],[35,189,21,12,"_Constants$expoGoConf"],[35,210,21,12],[35,211,21,36,"developer"],[35,220,21,45],[35,221,21,46],[35,222,21,47],[36,2,22,0],[37,2,23,0],[37,11,23,9,"removeScheme"],[37,23,23,21,"removeScheme"],[37,24,23,22,"url"],[37,27,23,25],[37,29,23,27],[38,4,24,4],[38,11,24,11,"url"],[38,14,24,14],[38,15,24,15,"replace"],[38,22,24,22],[38,23,24,23],[38,46,24,46],[38,48,24,48],[38,50,24,50],[38,51,24,51],[39,2,25,0],[40,2,26,0],[40,11,26,9,"removePort"],[40,21,26,19,"removePort"],[40,22,26,20,"url"],[40,25,26,23],[40,27,26,25],[41,4,27,4],[41,11,27,11,"url"],[41,14,27,14],[41,15,27,15,"replace"],[41,22,27,22],[41,23,27,23],[41,60,27,60],[41,62,27,62],[41,64,27,64],[41,65,27,65],[42,2,28,0],[43,2,29,0],[43,11,29,9,"removeLeadingSlash"],[43,29,29,27,"removeLeadingSlash"],[43,30,29,28,"url"],[43,33,29,31],[43,35,29,33],[44,4,30,4],[44,11,30,11,"url"],[44,14,30,14],[44,15,30,15,"replace"],[44,22,30,22],[44,23,30,23],[44,28,30,28],[44,30,30,30],[44,32,30,32],[44,33,30,33],[45,2,31,0],[46,2,32,0],[46,11,32,9,"removeTrailingSlashAndQueryString"],[46,44,32,42,"removeTrailingSlashAndQueryString"],[46,45,32,43,"url"],[46,48,32,46],[46,50,32,48],[47,4,33,4],[47,11,33,11,"url"],[47,14,33,14],[47,15,33,15,"replace"],[47,22,33,22],[47,23,33,23],[47,33,33,33],[47,35,33,35],[47,37,33,37],[47,38,33,38],[48,2,34,0],[49,2,35,0],[49,11,35,9,"ensureLeadingSlash"],[49,29,35,27,"ensureLeadingSlash"],[49,30,35,28,"input"],[49,35,35,33],[49,37,35,35,"shouldAppend"],[49,49,35,47],[49,51,35,49],[50,4,36,4],[50,8,36,10,"hasSlash"],[50,16,36,18],[50,19,36,21,"input"],[50,24,36,26],[50,25,36,27,"startsWith"],[50,35,36,37],[50,36,36,38],[50,39,36,41],[50,40,36,42],[51,4,37,4],[51,8,37,8,"hasSlash"],[51,16,37,16],[51,20,37,20],[51,21,37,21,"shouldAppend"],[51,33,37,33],[51,35,37,35],[52,6,38,8],[52,13,38,15,"input"],[52,18,38,20],[52,19,38,21,"substring"],[52,28,38,30],[52,29,38,31],[52,30,38,32],[52,31,38,33],[53,4,39,4],[53,5,39,5],[53,11,40,9],[53,15,40,13],[53,16,40,14,"hasSlash"],[53,24,40,22],[53,28,40,26,"shouldAppend"],[53,40,40,38],[53,42,40,40],[54,6,41,8],[54,13,41,15],[54,17,41,19,"input"],[54,22,41,24],[54,24,41,26],[55,4,42,4],[56,4,43,4],[56,11,43,11,"input"],[56,16,43,16],[57,2,44,0],[58,2,45,0],[59,2,46,0],[60,0,47,0],[61,0,48,0],[62,0,49,0],[63,0,50,0],[64,0,51,0],[65,0,52,0],[66,0,53,0],[67,0,54,0],[68,0,55,0],[69,0,56,0],[70,0,57,0],[71,0,58,0],[72,0,59,0],[73,0,60,0],[74,0,61,0],[75,0,62,0],[76,0,63,0],[77,0,64,0],[78,0,65,0],[79,0,66,0],[80,0,67,0],[81,0,68,0],[82,2,69,7],[82,11,69,16,"createURL"],[82,20,69,25,"createURL"],[82,21,69,26,"path"],[82,25,69,30],[82,27,69,92],[83,4,69,92],[83,8,69,92,"_ref"],[83,12,69,92],[83,15,69,92,"arguments"],[83,24,69,92],[83,25,69,92,"length"],[83,31,69,92],[83,39,69,92,"arguments"],[83,48,69,92],[83,56,69,92,"undefined"],[83,65,69,92],[83,68,69,92,"arguments"],[83,77,69,92],[83,83,69,88],[83,84,69,89],[83,85,69,90],[84,6,69,34,"scheme"],[84,12,69,40],[84,15,69,40,"_ref"],[84,19,69,40],[84,20,69,34,"scheme"],[84,26,69,40],[85,6,69,40,"_ref$queryParams"],[85,22,69,40],[85,25,69,40,"_ref"],[85,29,69,40],[85,30,69,42,"queryParams"],[85,41,69,53],[86,6,69,42,"queryParams"],[86,17,69,53],[86,20,69,53,"_ref$queryParams"],[86,36,69,53],[86,50,69,56],[86,51,69,57],[86,52,69,58],[86,55,69,58,"_ref$queryParams"],[86,71,69,58],[87,6,69,58,"_ref$isTripleSlashed"],[87,26,69,58],[87,29,69,58,"_ref"],[87,33,69,58],[87,34,69,60,"isTripleSlashed"],[87,49,69,75],[88,6,69,60,"isTripleSlashed"],[88,21,69,75],[88,24,69,75,"_ref$isTripleSlashed"],[88,44,69,75],[88,58,69,78],[88,63,69,83],[88,66,69,83,"_ref$isTripleSlashed"],[88,86,69,83],[89,4,70,4],[89,8,70,10,"resolvedScheme"],[89,22,70,24],[89,25,70,27],[89,29,70,27,"resolveScheme"],[89,37,70,40],[89,38,70,40,"resolveScheme"],[89,51,70,40],[89,53,70,41],[90,6,70,43,"scheme"],[90,12,70,49],[90,14,70,43,"scheme"],[91,4,70,50],[91,5,70,51],[91,6,70,52],[92,4,71,4],[92,8,71,8,"hostUri"],[92,15,71,15],[92,18,71,18,"getHostUri"],[92,28,71,28],[92,29,71,29],[92,30,71,30],[92,34,71,34],[92,36,71,36],[93,4,72,4],[93,8,72,8],[93,12,72,8,"hasCustomScheme"],[93,20,72,23],[93,21,72,23,"hasCustomScheme"],[93,36,72,23],[93,38,72,24],[93,39,72,25],[93,43,72,29,"isExpoHosted"],[93,55,72,41],[93,56,72,42],[93,57,72,43],[93,59,72,45],[94,6,73,8,"hostUri"],[94,13,73,15],[94,16,73,18],[94,18,73,20],[95,4,74,4],[96,4,75,4],[96,8,75,8,"path"],[96,12,75,12],[96,14,75,14],[97,6,76,8],[97,10,76,12,"isExpoHosted"],[97,22,76,24],[97,23,76,25],[97,24,76,26],[97,28,76,30,"hostUri"],[97,35,76,37],[97,37,76,39],[98,8,77,12,"path"],[98,12,77,16],[98,15,77,19],[98,22,77,26,"removeLeadingSlash"],[98,40,77,44],[98,41,77,45,"path"],[98,45,77,49],[98,46,77,50],[98,48,77,52],[99,6,78,8],[100,6,79,8],[100,10,79,12,"isTripleSlashed"],[100,25,79,27],[100,29,79,31],[100,30,79,32,"path"],[100,34,79,36],[100,35,79,37,"startsWith"],[100,45,79,47],[100,46,79,48],[100,49,79,51],[100,50,79,52],[100,52,79,54],[101,8,80,12,"path"],[101,12,80,16],[101,15,80,19],[101,19,80,23,"path"],[101,23,80,27],[101,25,80,29],[102,6,81,8],[103,4,82,4],[103,5,82,5],[103,11,83,9],[104,6,84,8,"path"],[104,10,84,12],[104,13,84,15],[104,15,84,17],[105,4,85,4],[106,4,86,4],[107,4,87,4],[108,4,88,4],[108,8,88,8,"queryString"],[108,19,88,19],[108,22,88,22],[108,24,88,24],[109,4,89,4],[109,8,89,10,"queryStringMatchResult"],[109,30,89,32],[109,33,89,35,"hostUri"],[109,40,89,42],[109,41,89,43,"match"],[109,46,89,48],[109,47,89,49],[109,59,89,61],[109,60,89,62],[110,4,90,4],[110,8,90,8,"queryStringMatchResult"],[110,30,90,30],[110,32,90,32],[111,6,91,8,"hostUri"],[111,13,91,15],[111,16,91,18,"queryStringMatchResult"],[111,38,91,40],[111,39,91,41],[111,40,91,42],[111,41,91,43],[112,6,92,8,"queryString"],[112,17,92,19],[112,20,92,22,"queryStringMatchResult"],[112,42,92,44],[112,43,92,45],[112,44,92,46],[112,45,92,47],[113,6,93,8],[113,10,93,12,"paramsFromHostUri"],[113,27,93,29],[113,30,93,32],[113,31,93,33],[113,32,93,34],[114,6,94,8],[114,10,94,12],[115,8,95,12,"paramsFromHostUri"],[115,25,95,29],[115,28,95,32,"Object"],[115,34,95,38],[115,35,95,39,"fromEntries"],[115,46,95,50],[116,8,96,12],[117,8,97,12],[117,12,97,16,"URLSearchParams"],[117,27,97,31],[117,28,97,32,"queryString"],[117,39,97,43],[117,40,97,44],[117,41,97,45],[118,6,98,8],[118,7,98,9],[118,8,99,8],[118,15,99,8,"_unused"],[118,22,99,8],[118,24,99,14],[118,25,99,16],[119,6,100,8,"queryParams"],[119,17,100,19],[119,20,100,19,"Object"],[119,26,100,19],[119,27,100,19,"assign"],[119,33,100,19],[119,38,101,15,"queryParams"],[119,49,101,26],[119,51,102,15,"paramsFromHostUri"],[119,68,102,32],[119,69,103,9],[120,4,104,4],[121,4,105,4,"queryString"],[121,15,105,15],[121,18,105,18],[121,22,105,22,"URLSearchParams"],[121,37,105,37],[122,4,106,4],[123,4,107,4,"Object"],[123,10,107,10],[123,11,107,11,"fromEntries"],[123,22,107,22],[123,23,107,23,"Object"],[123,29,107,29],[123,30,107,30,"entries"],[123,37,107,37],[123,38,107,38,"queryParams"],[123,49,107,49],[123,50,107,50],[123,51,107,51,"filter"],[123,57,107,57],[123,58,107,58],[123,68,107,58,"_ref2"],[123,73,107,58],[124,6,107,58],[124,10,107,58,"_ref3"],[124,15,107,58],[124,22,107,58,"_slicedToArray"],[124,36,107,58],[124,37,107,58,"default"],[124,44,107,58],[124,46,107,58,"_ref2"],[124,51,107,58],[125,8,107,62,"value"],[125,13,107,67],[125,16,107,67,"_ref3"],[125,21,107,67],[126,6,107,67],[126,13,107,73,"value"],[126,18,107,78],[126,22,107,82],[126,26,107,86],[127,4,107,86],[127,6,107,87],[127,7,107,88],[127,8,107,89],[127,9,107,90,"toString"],[127,17,107,98],[127,18,107,99],[127,19,107,100],[128,4,108,4],[128,8,108,8,"queryString"],[128,19,108,19],[128,21,108,21],[129,6,109,8,"queryString"],[129,17,109,19],[129,20,109,22],[129,24,109,26,"queryString"],[129,35,109,37],[129,37,109,39],[130,4,110,4],[131,4,111,4,"hostUri"],[131,11,111,11],[131,14,111,14,"ensureLeadingSlash"],[131,32,111,32],[131,33,111,33,"hostUri"],[131,40,111,40],[131,42,111,42],[131,43,111,43,"isTripleSlashed"],[131,58,111,58],[131,59,111,59],[132,4,112,4],[133,4,113,4],[133,8,113,10,"encodedURI"],[133,18,113,20],[133,21,113,23,"encodeURI"],[133,30,113,32],[133,31,113,33],[133,34,113,36,"resolvedScheme"],[133,48,113,50],[133,52,113,54,"isTripleSlashed"],[133,67,113,69],[133,70,113,72],[133,73,113,75],[133,76,113,78],[133,78,113,80],[133,82,113,84,"hostUri"],[133,89,113,91],[133,92,113,94,"path"],[133,96,113,98],[133,98,113,100],[133,99,113,101],[134,4,114,4],[134,11,114,11],[134,14,114,14,"encodedURI"],[134,24,114,24],[134,27,114,27,"queryString"],[134,38,114,38],[134,40,114,40],[135,2,115,0],[136,2,116,0],[137,2,117,0],[138,0,118,0],[139,0,119,0],[140,0,120,0],[141,0,121,0],[142,2,122,7],[142,11,122,16,"parse"],[142,16,122,21,"parse"],[142,17,122,22,"url"],[142,20,122,25],[142,22,122,27],[143,4,123,4],[143,8,123,4,"validateURL"],[143,20,123,15],[143,21,123,15,"validateURL"],[143,32,123,15],[143,34,123,16,"url"],[143,37,123,19],[143,38,123,20],[144,4,124,4],[144,8,124,10,"queryParams"],[144,19,124,21],[144,22,124,24],[144,23,124,25],[144,24,124,26],[145,4,125,4],[145,8,125,8,"path"],[145,12,125,12],[145,15,125,15],[145,19,125,19],[146,4,126,4],[146,8,126,8,"hostname"],[146,16,126,16],[146,19,126,19],[146,23,126,23],[147,4,127,4],[147,8,127,8,"scheme"],[147,14,127,14],[147,17,127,17],[147,21,127,21],[148,4,128,4],[148,8,128,8],[149,6,129,8],[149,10,129,14,"parsed"],[149,16,129,20],[149,19,129,23],[149,23,129,27,"URL"],[149,26,129,30],[149,27,129,31,"url"],[149,30,129,34],[149,31,129,35],[150,6,130,8,"parsed"],[150,12,130,14],[150,13,130,15,"searchParams"],[150,25,130,27],[150,26,130,28,"forEach"],[150,33,130,35],[150,34,130,36],[150,44,130,37,"value"],[150,49,130,42],[150,51,130,44,"key"],[150,54,130,47],[150,56,130,52],[151,8,131,12,"queryParams"],[151,19,131,23],[151,20,131,24,"key"],[151,23,131,27],[151,24,131,28],[151,27,131,31,"decodeURIComponent"],[151,45,131,49],[151,46,131,50,"value"],[151,51,131,55],[151,52,131,56],[152,6,132,8],[152,7,132,9],[152,8,132,10],[153,6,133,8,"path"],[153,10,133,12],[153,13,133,15,"parsed"],[153,19,133,21],[153,20,133,22,"pathname"],[153,28,133,30],[153,32,133,34],[153,36,133,38],[154,6,134,8,"hostname"],[154,14,134,16],[154,17,134,19,"parsed"],[154,23,134,25],[154,24,134,26,"hostname"],[154,32,134,34],[154,36,134,38],[154,40,134,42],[155,6,135,8,"scheme"],[155,12,135,14],[155,15,135,17,"parsed"],[155,21,135,23],[155,22,135,24,"protocol"],[155,30,135,32],[155,34,135,36],[155,38,135,40],[156,4,136,4],[156,5,136,5],[156,6,137,4],[156,13,137,4,"_unused2"],[156,21,137,4],[156,23,137,10],[157,6,138,8,"path"],[157,10,138,12],[157,13,138,15,"url"],[157,16,138,18],[158,4,139,4],[159,4,140,4],[159,8,140,10,"hostUri"],[159,15,140,17],[159,18,140,20,"getHostUri"],[159,28,140,30],[159,29,140,31],[159,30,140,32],[159,34,140,36],[159,36,140,38],[160,4,141,4],[160,8,141,10,"hostUriStripped"],[160,23,141,25],[160,26,141,28,"removePort"],[160,36,141,38],[160,37,141,39,"removeTrailingSlashAndQueryString"],[160,70,141,72],[160,71,141,73,"hostUri"],[160,78,141,80],[160,79,141,81],[160,80,141,82],[161,4,142,4],[161,8,142,8,"scheme"],[161,14,142,14],[161,16,142,16],[162,6,143,8],[163,6,144,8,"scheme"],[163,12,144,14],[163,15,144,17,"scheme"],[163,21,144,23],[163,22,144,24,"substring"],[163,31,144,33],[163,32,144,34],[163,33,144,35],[163,35,144,37,"scheme"],[163,41,144,43],[163,42,144,44,"length"],[163,48,144,50],[163,51,144,53],[163,52,144,54],[163,53,144,55],[164,4,145,4],[165,4,146,4],[165,8,146,8,"path"],[165,12,146,12],[165,14,146,14],[166,6,147,8,"path"],[166,10,147,12],[166,13,147,15,"removeLeadingSlash"],[166,31,147,33],[166,32,147,34,"path"],[166,36,147,38],[166,37,147,39],[167,6,148,8],[167,10,148,12,"expoPrefix"],[167,20,148,22],[167,23,148,25],[167,27,148,29],[168,6,149,8],[168,10,149,12,"hostUriStripped"],[168,25,149,27],[168,27,149,29],[169,8,150,12],[169,12,150,18,"parts"],[169,17,150,23],[169,20,150,26,"hostUriStripped"],[169,35,150,41],[169,36,150,42,"split"],[169,41,150,47],[169,42,150,48],[169,45,150,51],[169,46,150,52],[170,8,151,12,"expoPrefix"],[170,18,151,22],[170,21,151,25,"parts"],[170,26,151,30],[170,27,151,31,"slice"],[170,32,151,36],[170,33,151,37],[170,34,151,38],[170,35,151,39],[170,36,151,40,"concat"],[170,42,151,46],[170,43,151,47],[170,44,151,48],[170,49,151,53],[170,50,151,54],[170,51,151,55],[170,52,151,56,"join"],[170,56,151,60],[170,57,151,61],[170,60,151,64],[170,61,151,65],[171,6,152,8],[172,6,153,8],[172,10,153,12,"isExpoHosted"],[172,22,153,24],[172,23,153,25],[172,24,153,26],[172,28,153,30],[172,29,153,31],[172,33,153,31,"hasCustomScheme"],[172,41,153,46],[172,42,153,46,"hasCustomScheme"],[172,57,153,46],[172,59,153,47],[172,60,153,48],[172,64,153,52,"expoPrefix"],[172,74,153,62],[172,78,153,66,"path"],[172,82,153,70],[172,83,153,71,"startsWith"],[172,93,153,81],[172,94,153,82,"expoPrefix"],[172,104,153,92],[172,105,153,93],[172,107,153,95],[173,8,154,12,"path"],[173,12,154,16],[173,15,154,19,"path"],[173,19,154,23],[173,20,154,24,"substring"],[173,29,154,33],[173,30,154,34,"expoPrefix"],[173,40,154,44],[173,41,154,45,"length"],[173,47,154,51],[173,48,154,52],[174,8,155,12,"hostname"],[174,16,155,20],[174,19,155,23],[174,23,155,27],[175,6,156,8],[175,7,156,9],[175,13,157,13],[175,17,157,17,"path"],[175,21,157,21],[175,22,157,22,"indexOf"],[175,29,157,29],[175,30,157,30],[175,33,157,33],[175,34,157,34],[175,37,157,37],[175,38,157,38],[175,39,157,39],[175,41,157,41],[176,8,158,12,"path"],[176,12,158,16],[176,15,158,19,"path"],[176,19,158,23],[176,20,158,24,"substring"],[176,29,158,33],[176,30,158,34,"path"],[176,34,158,38],[176,35,158,39,"indexOf"],[176,42,158,46],[176,43,158,47],[176,46,158,50],[176,47,158,51],[176,50,158,54],[176,51,158,55],[176,52,158,56],[177,6,159,8],[178,4,160,4],[179,4,161,4],[179,11,161,11],[180,6,162,8,"hostname"],[180,14,162,16],[180,16,162,8,"hostname"],[180,24,162,16],[181,6,163,8,"path"],[181,10,163,12],[181,12,163,8,"path"],[181,16,163,12],[182,6,164,8,"queryParams"],[182,17,164,19],[182,19,164,8,"queryParams"],[182,30,164,19],[183,6,165,8,"scheme"],[183,12,165,14],[183,14,165,8,"scheme"],[184,4,166,4],[184,5,166,5],[185,2,167,0],[186,0,167,1],[186,3]],"functionMap":{"names":["<global>","getHostUri","isExpoHosted","removeScheme","removePort","removeLeadingSlash","removeTrailingSlashAndQueryString","ensureLeadingSlash","createURL","Object.entries.filter$argument_0","parse","parsed.searchParams.forEach$argument_0"],"mappings":"AAA;ACG;CDY;AEC;CFK;AGC;CHE;AIC;CJE;AKC;CLE;AMC;CNE;AOC;CPS;OQyB;0DCsC,4BD;CRQ;OUO;oCCQ;SDE;CVmC"},"hasCjsExports":false},"type":"js/module"}]}