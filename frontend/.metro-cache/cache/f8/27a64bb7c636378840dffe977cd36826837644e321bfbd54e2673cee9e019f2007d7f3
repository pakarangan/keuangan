{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@react-navigation/core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":227,"index":242}}],"key":"Wm75LgE4xYscVWo0KoLFlflJQCo=","exportNames":["*"],"imports":1}},{"name":"fast-deep-equal","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":243},"end":{"line":4,"column":38,"index":281}}],"key":"kmUMBZlZK8fLQ5NsiSOBIMofZVo=","exportNames":["*"],"imports":1}},{"name":"react","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":282},"end":{"line":5,"column":31,"index":313}}],"key":"RtGiGa+/H7VrI7GDQDLhO1UbpU8=","exportNames":["*"],"imports":1}},{"name":"./createMemoryHistory.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":314},"end":{"line":6,"column":63,"index":377}}],"key":"A5sfS3fG0SatnHOyroudNhe0KN0=","exportNames":["*"],"imports":1}},{"name":"./ServerContext.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":378},"end":{"line":7,"column":51,"index":429}}],"key":"+Hz1a4I7q6hCkPilSOm0KYt2/D0=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  function _interopNamespace(e) {\n    if (e && e.__esModule) return e;\n    var n = {};\n    if (e) Object.keys(e).forEach(function (k) {\n      var d = Object.getOwnPropertyDescriptor(e, k);\n      Object.defineProperty(n, k, d.get ? d : {\n        enumerable: true,\n        get: function () {\n          return e[k];\n        }\n      });\n    });\n    n.default = e;\n    return n;\n  }\n  Object.defineProperty(exports, \"series\", {\n    enumerable: true,\n    get: function () {\n      return series;\n    }\n  });\n  exports.useLinking = useLinking;\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _babelRuntimeHelpersSlicedToArray = require(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\");\n  var _slicedToArray = _interopDefault(_babelRuntimeHelpersSlicedToArray);\n  var _reactNavigationCore = require(_dependencyMap[2], \"@react-navigation/core\");\n  var _fastDeepEqual = require(_dependencyMap[3], \"fast-deep-equal\");\n  var isEqual = _interopDefault(_fastDeepEqual);\n  var _react = require(_dependencyMap[4], \"react\");\n  var React = _interopNamespace(_react);\n  var _createMemoryHistoryJs = require(_dependencyMap[5], \"./createMemoryHistory.js\");\n  var _ServerContextJs = require(_dependencyMap[6], \"./ServerContext.js\");\n  /**\n   * Find the matching navigation state that changed between 2 navigation states\n   * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n   */\n  var _findMatchingState = function findMatchingState(a, b) {\n    if (a === undefined || b === undefined || a.key !== b.key) {\n      return [undefined, undefined];\n    }\n\n    // Tab and drawer will have `history` property, but stack will have history in `routes`\n    var aHistoryLength = a.history ? a.history.length : a.routes.length;\n    var bHistoryLength = b.history ? b.history.length : b.routes.length;\n    var aRoute = a.routes[a.index];\n    var bRoute = b.routes[b.index];\n    var aChildState = aRoute.state;\n    var bChildState = bRoute.state;\n\n    // Stop here if this is the state object that changed:\n    // - history length is different\n    // - focused routes are different\n    // - one of them doesn't have child state\n    // - child state keys are different\n    if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n      return [a, b];\n    }\n    return _findMatchingState(aChildState, bChildState);\n  };\n\n  /**\n   * Run async function in series as it's called.\n   */\n  var series = function series(cb) {\n    var queue = Promise.resolve();\n    var callback = function callback() {\n      // eslint-disable-next-line promise/no-callback-in-promise\n      queue = queue.then(cb);\n    };\n    return callback;\n  };\n  var linkingHandlers = [];\n  function useLinking(ref, _ref, onUnhandledLinking) {\n    var _ref$enabled = _ref.enabled,\n      enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n      config = _ref.config,\n      _ref$getStateFromPath = _ref.getStateFromPath,\n      getStateFromPath = _ref$getStateFromPath === void 0 ? _reactNavigationCore.getStateFromPath : _ref$getStateFromPath,\n      _ref$getPathFromState = _ref.getPathFromState,\n      getPathFromState = _ref$getPathFromState === void 0 ? _reactNavigationCore.getPathFromState : _ref$getPathFromState,\n      _ref$getActionFromSta = _ref.getActionFromState,\n      getActionFromState = _ref$getActionFromSta === void 0 ? _reactNavigationCore.getActionFromState : _ref$getActionFromSta;\n    var independent = (0, _reactNavigationCore.useNavigationIndependentTree)();\n    React.useEffect(function () {\n      if (process.env.NODE_ENV === 'production') {\n        return undefined;\n      }\n      if (independent) {\n        return undefined;\n      }\n      if (enabled !== false && linkingHandlers.length) {\n        console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n      }\n      var handler = Symbol();\n      if (enabled !== false) {\n        linkingHandlers.push(handler);\n      }\n      return function () {\n        var index = linkingHandlers.indexOf(handler);\n        if (index > -1) {\n          linkingHandlers.splice(index, 1);\n        }\n      };\n    }, [enabled, independent]);\n    var _React$useState = React.useState(_createMemoryHistoryJs.createMemoryHistory),\n      _React$useState2 = (0, _slicedToArray.default)(_React$useState, 1),\n      history = _React$useState2[0];\n\n    // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n    // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n    // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n    var enabledRef = React.useRef(enabled);\n    var configRef = React.useRef(config);\n    var getStateFromPathRef = React.useRef(getStateFromPath);\n    var getPathFromStateRef = React.useRef(getPathFromState);\n    var getActionFromStateRef = React.useRef(getActionFromState);\n    React.useEffect(function () {\n      enabledRef.current = enabled;\n      configRef.current = config;\n      getStateFromPathRef.current = getStateFromPath;\n      getPathFromStateRef.current = getPathFromState;\n      getActionFromStateRef.current = getActionFromState;\n    });\n    var validateRoutesNotExistInRootState = React.useCallback(function (state) {\n      var navigation = ref.current;\n      var rootState = navigation == null ? void 0 : navigation.getRootState();\n      // Make sure that the routes in the state exist in the root navigator\n      // Otherwise there's an error in the linking configuration\n      return state == null ? void 0 : state.routes.some(function (r) {\n        return !(rootState != null && rootState.routeNames.includes(r.name));\n      });\n    }, [ref]);\n    var server = React.useContext(_ServerContextJs.ServerContext);\n    var getInitialState = React.useCallback(function () {\n      var value;\n      if (enabledRef.current) {\n        var _server$location;\n        var _location = (_server$location = server == null ? void 0 : server.location) != null ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n        var path = _location ? _location.pathname + _location.search : undefined;\n        if (path) {\n          value = getStateFromPathRef.current(path, configRef.current);\n        }\n\n        // If the link were handled, it gets cleared in NavigationContainer\n        onUnhandledLinking(path);\n      }\n      var thenable = {\n        then: function then(onfulfilled) {\n          return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n        },\n        catch: function _catch() {\n          return thenable;\n        }\n      };\n      return thenable;\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    var previousIndexRef = React.useRef(undefined);\n    var previousStateRef = React.useRef(undefined);\n    var pendingPopStatePathRef = React.useRef(undefined);\n    React.useEffect(function () {\n      previousIndexRef.current = history.index;\n      return history.listen(function () {\n        var _previousIndexRef$cur;\n        var navigation = ref.current;\n        if (!navigation || !enabled) {\n          return;\n        }\n        var _window = window,\n          location = _window.location;\n        var path = location.pathname + location.search;\n        var index = history.index;\n        var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) != null ? _previousIndexRef$cur : 0;\n        previousIndexRef.current = index;\n        pendingPopStatePathRef.current = path;\n\n        // When browser back/forward is clicked, we first need to check if state object for this index exists\n        // If it does we'll reset to that state object\n        // Otherwise, we'll handle it like a regular deep link\n        var record = history.get(index);\n        if ((record == null ? void 0 : record.path) === path && record != null && record.state) {\n          navigation.resetRoot(record.state);\n          return;\n        }\n        var state = getStateFromPathRef.current(path, configRef.current);\n\n        // We should only dispatch an action when going forward\n        // Otherwise the action will likely add items to history, which would mess things up\n        if (state) {\n          // If the link were handled, it gets cleared in NavigationContainer\n          onUnhandledLinking(path);\n          // Make sure that the routes in the state exist in the root navigator\n          // Otherwise there's an error in the linking configuration\n          if (validateRoutesNotExistInRootState(state)) {\n            return;\n          }\n          if (index > previousIndex) {\n            var action = getActionFromStateRef.current(state, configRef.current);\n            if (action !== undefined) {\n              try {\n                navigation.dispatch(action);\n              } catch (e) {\n                // Ignore any errors from deep linking.\n                // This could happen in case of malformed links, navigation object not being initialized etc.\n                console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n              }\n            } else {\n              navigation.resetRoot(state);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          // if current path didn't return any state, we should revert to initial state\n          navigation.resetRoot(state);\n        }\n      });\n    }, [enabled, history, onUnhandledLinking, ref, validateRoutesNotExistInRootState]);\n    React.useEffect(function () {\n      var _ref$current;\n      if (!enabled) {\n        return;\n      }\n      var getPathForRoute = function getPathForRoute(route, state) {\n        var path;\n\n        // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n        // This makes sure that we preserve the original URL for wildcard routes\n        if (route != null && route.path) {\n          var stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n          if (stateForPath) {\n            var focusedRoute = (0, _reactNavigationCore.findFocusedRoute)(stateForPath);\n            if (focusedRoute && focusedRoute.name === route.name && (0, isEqual.default)(focusedRoute.params, route.params)) {\n              path = route.path;\n            }\n          }\n        }\n        if (path == null) {\n          path = getPathFromStateRef.current(state, configRef.current);\n        }\n        var previousRoute = previousStateRef.current ? (0, _reactNavigationCore.findFocusedRoute)(previousStateRef.current) : undefined;\n\n        // Preserve the hash if the route didn't change\n        if (previousRoute && route && 'key' in previousRoute && 'key' in route && previousRoute.key === route.key) {\n          path = path + location.hash;\n        }\n        return path;\n      };\n      if (ref.current) {\n        // We need to record the current metadata on the first render if they aren't set\n        // This will allow the initial state to be in the history entry\n        var state = ref.current.getRootState();\n        if (state) {\n          var route = (0, _reactNavigationCore.findFocusedRoute)(state);\n          var path = getPathForRoute(route, state);\n          if (previousStateRef.current === undefined) {\n            previousStateRef.current = state;\n          }\n          history.replace({\n            path: path,\n            state: state\n          });\n        }\n      }\n      var onStateChange = /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator.default)(function* () {\n          var navigation = ref.current;\n          if (!navigation || !enabled) {\n            return;\n          }\n          var previousState = previousStateRef.current;\n          var state = navigation.getRootState();\n\n          // root state may not available, for example when root navigators switch inside the container\n          if (!state) {\n            return;\n          }\n          var pendingPath = pendingPopStatePathRef.current;\n          var route = (0, _reactNavigationCore.findFocusedRoute)(state);\n          var path = getPathForRoute(route, state);\n          previousStateRef.current = state;\n          pendingPopStatePathRef.current = undefined;\n\n          // To detect the kind of state change, we need to:\n          // - Find the common focused navigation state in previous and current state\n          // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n          // - If no common focused navigation state found, it's a replace\n          var _findMatchingState2 = _findMatchingState(previousState, state),\n            _findMatchingState3 = (0, _slicedToArray.default)(_findMatchingState2, 2),\n            previousFocusedState = _findMatchingState3[0],\n            focusedState = _findMatchingState3[1];\n          if (previousFocusedState && focusedState &&\n          // We should only handle push/pop if path changed from what was in last `popstate`\n          // Otherwise it's likely a change triggered by `popstate`\n          path !== pendingPath) {\n            var historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n            if (historyDelta > 0) {\n              // If history length is increased, we should pushState\n              // Note that path might not actually change here, for example, drawer open should pushState\n              history.push({\n                path: path,\n                state: state\n              });\n            } else if (historyDelta < 0) {\n              // If history length is decreased, i.e. entries were removed, we want to go back\n\n              var nextIndex = history.backIndex({\n                path: path\n              });\n              var currentIndex = history.index;\n              try {\n                if (nextIndex !== -1 && nextIndex < currentIndex &&\n                // We should only go back if the entry exists and it's less than current index\n                history.get(nextIndex)) {\n                  // An existing entry for this path exists and it's less than current index, go back to that\n                  yield history.go(nextIndex - currentIndex);\n                } else {\n                  // We couldn't find an existing entry to go back to, so we'll go back by the delta\n                  // This won't be correct if multiple routes were pushed in one go before\n                  // Usually this shouldn't happen and this is a fallback for that\n                  yield history.go(historyDelta);\n                }\n\n                // Store the updated state as well as fix the path if incorrect\n                history.replace({\n                  path: path,\n                  state: state\n                });\n              } catch (e) {\n                // The navigation was interrupted\n              }\n            } else {\n              // If history length is unchanged, we want to replaceState\n              history.replace({\n                path: path,\n                state: state\n              });\n            }\n          } else {\n            // If no common navigation state was found, assume it's a replace\n            // This would happen if the user did a reset/conditionally changed navigators\n            history.replace({\n              path: path,\n              state: state\n            });\n          }\n        });\n        return function onStateChange() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n      // This could happen since `history.go(n)` is asynchronous\n      // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n      return (_ref$current = ref.current) == null ? void 0 : _ref$current.addListener('state', series(onStateChange));\n    }, [enabled, history, ref]);\n    return {\n      getInitialState: getInitialState\n    };\n  }\n});","lineCount":374,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13],[7,11,1,13,"_interopDefault"],[7,27,1,13,"e"],[7,28,1,13],[8,4,1,13],[8,11,1,13,"e"],[8,12,1,13],[8,16,1,13,"e"],[8,17,1,13],[8,18,1,13,"__esModule"],[8,28,1,13],[8,31,1,13,"e"],[8,32,1,13],[9,6,1,13,"default"],[9,13,1,13],[9,15,1,13,"e"],[10,4,1,13],[11,2,1,13],[12,2,1,13],[12,11,1,13,"_interopNamespace"],[12,29,1,13,"e"],[12,30,1,13],[13,4,1,13],[13,8,1,13,"e"],[13,9,1,13],[13,13,1,13,"e"],[13,14,1,13],[13,15,1,13,"__esModule"],[13,25,1,13],[13,34,1,13,"e"],[13,35,1,13],[14,4,1,13],[14,8,1,13,"n"],[14,9,1,13],[15,4,1,13],[15,8,1,13,"e"],[15,9,1,13],[15,11,1,13,"Object"],[15,17,1,13],[15,18,1,13,"keys"],[15,22,1,13],[15,23,1,13,"e"],[15,24,1,13],[15,26,1,13,"forEach"],[15,33,1,13],[15,44,1,13,"k"],[15,45,1,13],[16,6,1,13],[16,10,1,13,"d"],[16,11,1,13],[16,14,1,13,"Object"],[16,20,1,13],[16,21,1,13,"getOwnPropertyDescriptor"],[16,45,1,13],[16,46,1,13,"e"],[16,47,1,13],[16,49,1,13,"k"],[16,50,1,13],[17,6,1,13,"Object"],[17,12,1,13],[17,13,1,13,"defineProperty"],[17,27,1,13],[17,28,1,13,"n"],[17,29,1,13],[17,31,1,13,"k"],[17,32,1,13],[17,34,1,13,"d"],[17,35,1,13],[17,36,1,13,"get"],[17,39,1,13],[17,42,1,13,"d"],[17,43,1,13],[18,8,1,13,"enumerable"],[18,18,1,13],[19,8,1,13,"get"],[19,11,1,13],[19,22,1,13,"get"],[19,23,1,13],[20,10,1,13],[20,17,1,13,"e"],[20,18,1,13],[20,19,1,13,"k"],[20,20,1,13],[21,8,1,13],[22,6,1,13],[23,4,1,13],[24,4,1,13,"n"],[24,5,1,13],[24,6,1,13,"default"],[24,13,1,13],[24,16,1,13,"e"],[24,17,1,13],[25,4,1,13],[25,11,1,13,"n"],[25,12,1,13],[26,2,1,13],[27,2,39,0,"Object"],[27,8,39,0],[27,9,39,0,"defineProperty"],[27,23,39,0],[27,24,39,0,"exports"],[27,31,39,0],[28,4,39,0,"enumerable"],[28,14,39,0],[29,4,39,0,"get"],[29,7,39,0],[29,18,39,0,"get"],[29,19,39,0],[30,6,39,0],[30,13,39,0,"series"],[30,19,39,0],[31,4,39,0],[32,2,39,0],[33,2,48,0,"exports"],[33,9,48,0],[33,10,48,0,"useLinking"],[33,20,48,0],[33,23,48,0,"useLinking"],[33,33,48,0],[34,2,319,1],[34,6,319,1,"_babelRuntimeHelpersAsyncToGenerator"],[34,42,319,1],[34,45,319,1,"require"],[34,52,319,1],[34,53,319,1,"_dependencyMap"],[34,67,319,1],[35,2,319,1],[35,6,319,1,"_asyncToGenerator"],[35,23,319,1],[35,26,319,1,"_interopDefault"],[35,41,319,1],[35,42,319,1,"_babelRuntimeHelpersAsyncToGenerator"],[35,78,319,1],[36,2,319,1],[36,6,319,1,"_babelRuntimeHelpersSlicedToArray"],[36,39,319,1],[36,42,319,1,"require"],[36,49,319,1],[36,50,319,1,"_dependencyMap"],[36,64,319,1],[37,2,319,1],[37,6,319,1,"_slicedToArray"],[37,20,319,1],[37,23,319,1,"_interopDefault"],[37,38,319,1],[37,39,319,1,"_babelRuntimeHelpersSlicedToArray"],[37,72,319,1],[38,2,3,0],[38,6,3,0,"_reactNavigationCore"],[38,26,3,0],[38,29,3,0,"require"],[38,36,3,0],[38,37,3,0,"_dependencyMap"],[38,51,3,0],[39,2,4,0],[39,6,4,0,"_fastDeepEqual"],[39,20,4,0],[39,23,4,0,"require"],[39,30,4,0],[39,31,4,0,"_dependencyMap"],[39,45,4,0],[40,2,4,0],[40,6,4,0,"isEqual"],[40,13,4,0],[40,16,4,0,"_interopDefault"],[40,31,4,0],[40,32,4,0,"_fastDeepEqual"],[40,46,4,0],[41,2,5,0],[41,6,5,0,"_react"],[41,12,5,0],[41,15,5,0,"require"],[41,22,5,0],[41,23,5,0,"_dependencyMap"],[41,37,5,0],[42,2,5,0],[42,6,5,0,"React"],[42,11,5,0],[42,14,5,0,"_interopNamespace"],[42,31,5,0],[42,32,5,0,"_react"],[42,38,5,0],[43,2,6,0],[43,6,6,0,"_createMemoryHistoryJs"],[43,28,6,0],[43,31,6,0,"require"],[43,38,6,0],[43,39,6,0,"_dependencyMap"],[43,53,6,0],[44,2,7,0],[44,6,7,0,"_ServerContextJs"],[44,22,7,0],[44,25,7,0,"require"],[44,32,7,0],[44,33,7,0,"_dependencyMap"],[44,47,7,0],[45,2,8,0],[46,0,9,0],[47,0,10,0],[48,0,11,0],[49,2,12,0],[49,6,12,6,"findMatchingState"],[49,24,12,23],[49,27,12,26],[49,36,12,6,"findMatchingState"],[49,53,12,23,"findMatchingState"],[49,54,12,27,"a"],[49,55,12,28],[49,57,12,30,"b"],[49,58,12,31],[49,60,12,36],[50,4,13,2],[50,8,13,6,"a"],[50,9,13,7],[50,14,13,12,"undefined"],[50,23,13,21],[50,27,13,25,"b"],[50,28,13,26],[50,33,13,31,"undefined"],[50,42,13,40],[50,46,13,44,"a"],[50,47,13,45],[50,48,13,46,"key"],[50,51,13,49],[50,56,13,54,"b"],[50,57,13,55],[50,58,13,56,"key"],[50,61,13,59],[50,63,13,61],[51,6,14,4],[51,13,14,11],[51,14,14,12,"undefined"],[51,23,14,21],[51,25,14,23,"undefined"],[51,34,14,32],[51,35,14,33],[52,4,15,2],[54,4,17,2],[55,4,18,2],[55,8,18,8,"aHistoryLength"],[55,22,18,22],[55,25,18,25,"a"],[55,26,18,26],[55,27,18,27,"history"],[55,34,18,34],[55,37,18,37,"a"],[55,38,18,38],[55,39,18,39,"history"],[55,46,18,46],[55,47,18,47,"length"],[55,53,18,53],[55,56,18,56,"a"],[55,57,18,57],[55,58,18,58,"routes"],[55,64,18,64],[55,65,18,65,"length"],[55,71,18,71],[56,4,19,2],[56,8,19,8,"bHistoryLength"],[56,22,19,22],[56,25,19,25,"b"],[56,26,19,26],[56,27,19,27,"history"],[56,34,19,34],[56,37,19,37,"b"],[56,38,19,38],[56,39,19,39,"history"],[56,46,19,46],[56,47,19,47,"length"],[56,53,19,53],[56,56,19,56,"b"],[56,57,19,57],[56,58,19,58,"routes"],[56,64,19,64],[56,65,19,65,"length"],[56,71,19,71],[57,4,20,2],[57,8,20,8,"aRoute"],[57,14,20,14],[57,17,20,17,"a"],[57,18,20,18],[57,19,20,19,"routes"],[57,25,20,25],[57,26,20,26,"a"],[57,27,20,27],[57,28,20,28,"index"],[57,33,20,33],[57,34,20,34],[58,4,21,2],[58,8,21,8,"bRoute"],[58,14,21,14],[58,17,21,17,"b"],[58,18,21,18],[58,19,21,19,"routes"],[58,25,21,25],[58,26,21,26,"b"],[58,27,21,27],[58,28,21,28,"index"],[58,33,21,33],[58,34,21,34],[59,4,22,2],[59,8,22,8,"aChildState"],[59,19,22,19],[59,22,22,22,"aRoute"],[59,28,22,28],[59,29,22,29,"state"],[59,34,22,34],[60,4,23,2],[60,8,23,8,"bChildState"],[60,19,23,19],[60,22,23,22,"bRoute"],[60,28,23,28],[60,29,23,29,"state"],[60,34,23,34],[62,4,25,2],[63,4,26,2],[64,4,27,2],[65,4,28,2],[66,4,29,2],[67,4,30,2],[67,8,30,6,"aHistoryLength"],[67,22,30,20],[67,27,30,25,"bHistoryLength"],[67,41,30,39],[67,45,30,43,"aRoute"],[67,51,30,49],[67,52,30,50,"key"],[67,55,30,53],[67,60,30,58,"bRoute"],[67,66,30,64],[67,67,30,65,"key"],[67,70,30,68],[67,74,30,72,"aChildState"],[67,85,30,83],[67,90,30,88,"undefined"],[67,99,30,97],[67,103,30,101,"bChildState"],[67,114,30,112],[67,119,30,117,"undefined"],[67,128,30,126],[67,132,30,130,"aChildState"],[67,143,30,141],[67,144,30,142,"key"],[67,147,30,145],[67,152,30,150,"bChildState"],[67,163,30,161],[67,164,30,162,"key"],[67,167,30,165],[67,169,30,167],[68,6,31,4],[68,13,31,11],[68,14,31,12,"a"],[68,15,31,13],[68,17,31,15,"b"],[68,18,31,16],[68,19,31,17],[69,4,32,2],[70,4,33,2],[70,11,33,9,"findMatchingState"],[70,29,33,26],[70,30,33,27,"aChildState"],[70,41,33,38],[70,43,33,40,"bChildState"],[70,54,33,51],[70,55,33,52],[71,2,34,0],[71,3,34,1],[73,2,36,0],[74,0,37,0],[75,0,38,0],[76,2,39,7],[76,6,39,13,"series"],[76,12,39,19],[76,15,39,22],[76,24,39,13,"series"],[76,30,39,19,"series"],[76,31,39,22,"cb"],[76,33,39,24],[76,35,39,28],[77,4,40,2],[77,8,40,6,"queue"],[77,13,40,11],[77,16,40,14,"Promise"],[77,23,40,21],[77,24,40,22,"resolve"],[77,31,40,29],[77,32,40,30],[77,33,40,31],[78,4,41,2],[78,8,41,8,"callback"],[78,16,41,16],[78,19,41,19],[78,28,41,8,"callback"],[78,36,41,16,"callback"],[78,37,41,16],[78,39,41,25],[79,6,42,4],[80,6,43,4,"queue"],[80,11,43,9],[80,14,43,12,"queue"],[80,19,43,17],[80,20,43,18,"then"],[80,24,43,22],[80,25,43,23,"cb"],[80,27,43,25],[80,28,43,26],[81,4,44,2],[81,5,44,3],[82,4,45,2],[82,11,45,9,"callback"],[82,19,45,17],[83,2,46,0],[83,3,46,1],[84,2,47,0],[84,6,47,6,"linkingHandlers"],[84,21,47,21],[84,24,47,24],[84,26,47,26],[85,2,48,7],[85,11,48,16,"useLinking"],[85,21,48,26,"useLinking"],[85,22,48,27,"ref"],[85,25,48,30],[85,27,48,30,"_ref"],[85,31,48,30],[85,33,54,3,"onUnhandledLinking"],[85,51,54,21],[85,53,54,23],[86,4,54,23],[86,8,54,23,"_ref$enabled"],[86,20,54,23],[86,23,54,23,"_ref"],[86,27,54,23],[86,28,49,2,"enabled"],[86,35,49,9],[87,6,49,2,"enabled"],[87,13,49,9],[87,16,49,9,"_ref$enabled"],[87,28,49,9],[87,42,49,12],[87,46,49,16],[87,49,49,16,"_ref$enabled"],[87,61,49,16],[88,6,50,2,"config"],[88,12,50,8],[88,15,50,8,"_ref"],[88,19,50,8],[88,20,50,2,"config"],[88,26,50,8],[89,6,50,8,"_ref$getStateFromPath"],[89,27,50,8],[89,30,50,8,"_ref"],[89,34,50,8],[89,35,51,2,"getStateFromPath"],[89,51,51,18],[90,6,51,2,"getStateFromPath"],[90,22,51,18],[90,25,51,18,"_ref$getStateFromPath"],[90,46,51,18],[90,60,51,21,"getStateFromPathDefault"],[90,80,51,44],[90,81,51,44,"getStateFromPath"],[90,97,51,44],[90,100,51,44,"_ref$getStateFromPath"],[90,121,51,44],[91,6,51,44,"_ref$getPathFromState"],[91,27,51,44],[91,30,51,44,"_ref"],[91,34,51,44],[91,35,52,2,"getPathFromState"],[91,51,52,18],[92,6,52,2,"getPathFromState"],[92,22,52,18],[92,25,52,18,"_ref$getPathFromState"],[92,46,52,18],[92,60,52,21,"getPathFromStateDefault"],[92,80,52,44],[92,81,52,44,"getPathFromState"],[92,97,52,44],[92,100,52,44,"_ref$getPathFromState"],[92,121,52,44],[93,6,52,44,"_ref$getActionFromSta"],[93,27,52,44],[93,30,52,44,"_ref"],[93,34,52,44],[93,35,53,2,"getActionFromState"],[93,53,53,20],[94,6,53,2,"getActionFromState"],[94,24,53,20],[94,27,53,20,"_ref$getActionFromSta"],[94,48,53,20],[94,62,53,23,"getActionFromStateDefault"],[94,82,53,48],[94,83,53,48,"getActionFromState"],[94,101,53,48],[94,104,53,48,"_ref$getActionFromSta"],[94,125,53,48],[95,4,55,2],[95,8,55,8,"independent"],[95,19,55,19],[95,22,55,22],[95,26,55,22,"useNavigationIndependentTree"],[95,46,55,50],[95,47,55,50,"useNavigationIndependentTree"],[95,75,55,50],[95,77,55,51],[95,78,55,52],[96,4,56,2,"React"],[96,9,56,7],[96,10,56,8,"useEffect"],[96,19,56,17],[96,20,56,18],[96,32,56,24],[97,6,57,4],[97,10,57,8,"process"],[97,17,57,15],[97,18,57,16,"env"],[97,21,57,19],[97,22,57,20,"NODE_ENV"],[97,30,57,28],[97,35,57,33],[97,47,57,45],[97,49,57,47],[98,8,58,6],[98,15,58,13,"undefined"],[98,24,58,22],[99,6,59,4],[100,6,60,4],[100,10,60,8,"independent"],[100,21,60,19],[100,23,60,21],[101,8,61,6],[101,15,61,13,"undefined"],[101,24,61,22],[102,6,62,4],[103,6,63,4],[103,10,63,8,"enabled"],[103,17,63,15],[103,22,63,20],[103,27,63,25],[103,31,63,29,"linkingHandlers"],[103,46,63,44],[103,47,63,45,"length"],[103,53,63,51],[103,55,63,53],[104,8,64,6,"console"],[104,15,64,13],[104,16,64,14,"error"],[104,21,64,19],[104,22,64,20],[104,23,64,21],[104,196,64,194],[104,198,64,196],[104,285,64,283],[104,287,64,285],[104,347,64,345],[104,348,64,346],[104,349,64,347,"join"],[104,353,64,351],[104,354,64,352],[104,358,64,356],[104,359,64,357],[104,360,64,358,"trim"],[104,364,64,362],[104,365,64,363],[104,366,64,364],[104,367,64,365],[105,6,65,4],[106,6,66,4],[106,10,66,10,"handler"],[106,17,66,17],[106,20,66,20,"Symbol"],[106,26,66,26],[106,27,66,27],[106,28,66,28],[107,6,67,4],[107,10,67,8,"enabled"],[107,17,67,15],[107,22,67,20],[107,27,67,25],[107,29,67,27],[108,8,68,6,"linkingHandlers"],[108,23,68,21],[108,24,68,22,"push"],[108,28,68,26],[108,29,68,27,"handler"],[108,36,68,34],[108,37,68,35],[109,6,69,4],[110,6,70,4],[110,13,70,11],[110,25,70,17],[111,8,71,6],[111,12,71,12,"index"],[111,17,71,17],[111,20,71,20,"linkingHandlers"],[111,35,71,35],[111,36,71,36,"indexOf"],[111,43,71,43],[111,44,71,44,"handler"],[111,51,71,51],[111,52,71,52],[112,8,72,6],[112,12,72,10,"index"],[112,17,72,15],[112,20,72,18],[112,21,72,19],[112,22,72,20],[112,24,72,22],[113,10,73,8,"linkingHandlers"],[113,25,73,23],[113,26,73,24,"splice"],[113,32,73,30],[113,33,73,31,"index"],[113,38,73,36],[113,40,73,38],[113,41,73,39],[113,42,73,40],[114,8,74,6],[115,6,75,4],[115,7,75,5],[116,4,76,2],[116,5,76,3],[116,7,76,5],[116,8,76,6,"enabled"],[116,15,76,13],[116,17,76,15,"independent"],[116,28,76,26],[116,29,76,27],[116,30,76,28],[117,4,77,2],[117,8,77,2,"_React$useState"],[117,23,77,2],[117,26,77,20,"React"],[117,31,77,25],[117,32,77,26,"useState"],[117,40,77,34],[117,41,77,35,"createMemoryHistory"],[117,63,77,54],[117,64,77,54,"createMemoryHistory"],[117,83,77,54],[117,84,77,55],[118,6,77,55,"_React$useState2"],[118,22,77,55],[118,29,77,55,"_slicedToArray"],[118,43,77,55],[118,44,77,55,"default"],[118,51,77,55],[118,53,77,55,"_React$useState"],[118,68,77,55],[119,6,77,9,"history"],[119,13,77,16],[119,16,77,16,"_React$useState2"],[119,32,77,16],[121,4,79,2],[122,4,80,2],[123,4,81,2],[124,4,82,2],[124,8,82,8,"enabledRef"],[124,18,82,18],[124,21,82,21,"React"],[124,26,82,26],[124,27,82,27,"useRef"],[124,33,82,33],[124,34,82,34,"enabled"],[124,41,82,41],[124,42,82,42],[125,4,83,2],[125,8,83,8,"configRef"],[125,17,83,17],[125,20,83,20,"React"],[125,25,83,25],[125,26,83,26,"useRef"],[125,32,83,32],[125,33,83,33,"config"],[125,39,83,39],[125,40,83,40],[126,4,84,2],[126,8,84,8,"getStateFromPathRef"],[126,27,84,27],[126,30,84,30,"React"],[126,35,84,35],[126,36,84,36,"useRef"],[126,42,84,42],[126,43,84,43,"getStateFromPath"],[126,59,84,59],[126,60,84,60],[127,4,85,2],[127,8,85,8,"getPathFromStateRef"],[127,27,85,27],[127,30,85,30,"React"],[127,35,85,35],[127,36,85,36,"useRef"],[127,42,85,42],[127,43,85,43,"getPathFromState"],[127,59,85,59],[127,60,85,60],[128,4,86,2],[128,8,86,8,"getActionFromStateRef"],[128,29,86,29],[128,32,86,32,"React"],[128,37,86,37],[128,38,86,38,"useRef"],[128,44,86,44],[128,45,86,45,"getActionFromState"],[128,63,86,63],[128,64,86,64],[129,4,87,2,"React"],[129,9,87,7],[129,10,87,8,"useEffect"],[129,19,87,17],[129,20,87,18],[129,32,87,24],[130,6,88,4,"enabledRef"],[130,16,88,14],[130,17,88,15,"current"],[130,24,88,22],[130,27,88,25,"enabled"],[130,34,88,32],[131,6,89,4,"configRef"],[131,15,89,13],[131,16,89,14,"current"],[131,23,89,21],[131,26,89,24,"config"],[131,32,89,30],[132,6,90,4,"getStateFromPathRef"],[132,25,90,23],[132,26,90,24,"current"],[132,33,90,31],[132,36,90,34,"getStateFromPath"],[132,52,90,50],[133,6,91,4,"getPathFromStateRef"],[133,25,91,23],[133,26,91,24,"current"],[133,33,91,31],[133,36,91,34,"getPathFromState"],[133,52,91,50],[134,6,92,4,"getActionFromStateRef"],[134,27,92,25],[134,28,92,26,"current"],[134,35,92,33],[134,38,92,36,"getActionFromState"],[134,56,92,54],[135,4,93,2],[135,5,93,3],[135,6,93,4],[136,4,94,2],[136,8,94,8,"validateRoutesNotExistInRootState"],[136,41,94,41],[136,44,94,44,"React"],[136,49,94,49],[136,50,94,50,"useCallback"],[136,61,94,61],[136,62,94,62],[136,72,94,62,"state"],[136,77,94,67],[136,79,94,71],[137,6,95,4],[137,10,95,10,"navigation"],[137,20,95,20],[137,23,95,23,"ref"],[137,26,95,26],[137,27,95,27,"current"],[137,34,95,34],[138,6,96,4],[138,10,96,10,"rootState"],[138,19,96,19],[138,22,96,22,"navigation"],[138,32,96,32],[138,52,96,22,"navigation"],[138,62,96,32],[138,63,96,34,"getRootState"],[138,75,96,46],[138,76,96,47],[138,77,96,48],[139,6,97,4],[140,6,98,4],[141,6,99,4],[141,13,99,11,"state"],[141,18,99,16],[141,38,99,11,"state"],[141,43,99,16],[141,44,99,18,"routes"],[141,50,99,24],[141,51,99,25,"some"],[141,55,99,29],[141,56,99,30],[141,66,99,30,"r"],[141,67,99,31],[142,8,99,31],[142,15,99,35],[142,17,99,36,"rootState"],[142,26,99,45],[142,38,99,36,"rootState"],[142,47,99,45],[142,48,99,47,"routeNames"],[142,58,99,57],[142,59,99,58,"includes"],[142,67,99,66],[142,68,99,67,"r"],[142,69,99,68],[142,70,99,69,"name"],[142,74,99,73],[142,75,99,74],[143,6,99,74],[143,8,99,75],[144,4,100,2],[144,5,100,3],[144,7,100,5],[144,8,100,6,"ref"],[144,11,100,9],[144,12,100,10],[144,13,100,11],[145,4,101,2],[145,8,101,8,"server"],[145,14,101,14],[145,17,101,17,"React"],[145,22,101,22],[145,23,101,23,"useContext"],[145,33,101,33],[145,34,101,34,"ServerContext"],[145,50,101,47],[145,51,101,47,"ServerContext"],[145,64,101,47],[145,65,101,48],[146,4,102,2],[146,8,102,8,"getInitialState"],[146,23,102,23],[146,26,102,26,"React"],[146,31,102,31],[146,32,102,32,"useCallback"],[146,43,102,43],[146,44,102,44],[146,56,102,50],[147,6,103,4],[147,10,103,8,"value"],[147,15,103,13],[148,6,104,4],[148,10,104,8,"enabledRef"],[148,20,104,18],[148,21,104,19,"current"],[148,28,104,26],[148,30,104,28],[149,8,104,28],[149,12,104,28,"_server$location"],[149,28,104,28],[150,8,105,6],[150,12,105,12,"location"],[150,21,105,20],[150,25,105,20,"_server$location"],[150,41,105,20],[150,44,105,23,"server"],[150,50,105,29],[150,70,105,23,"server"],[150,76,105,29],[150,77,105,31,"location"],[150,85,105,39],[150,97,105,39,"_server$location"],[150,113,105,39],[150,116,105,44],[150,123,105,51,"window"],[150,129,105,57],[150,134,105,62],[150,145,105,73],[150,148,105,76,"window"],[150,154,105,82],[150,155,105,83,"location"],[150,163,105,91],[150,166,105,94,"undefined"],[150,175,105,104],[151,8,106,6],[151,12,106,12,"path"],[151,16,106,16],[151,19,106,19,"location"],[151,28,106,27],[151,31,106,30,"location"],[151,40,106,38],[151,41,106,39,"pathname"],[151,49,106,47],[151,52,106,50,"location"],[151,61,106,58],[151,62,106,59,"search"],[151,68,106,65],[151,71,106,68,"undefined"],[151,80,106,77],[152,8,107,6],[152,12,107,10,"path"],[152,16,107,14],[152,18,107,16],[153,10,108,8,"value"],[153,15,108,13],[153,18,108,16,"getStateFromPathRef"],[153,37,108,35],[153,38,108,36,"current"],[153,45,108,43],[153,46,108,44,"path"],[153,50,108,48],[153,52,108,50,"configRef"],[153,61,108,59],[153,62,108,60,"current"],[153,69,108,67],[153,70,108,68],[154,8,109,6],[156,8,111,6],[157,8,112,6,"onUnhandledLinking"],[157,26,112,24],[157,27,112,25,"path"],[157,31,112,29],[157,32,112,30],[158,6,113,4],[159,6,114,4],[159,10,114,10,"thenable"],[159,18,114,18],[159,21,114,21],[160,8,115,6,"then"],[160,12,115,10],[160,23,115,6,"then"],[160,27,115,10,"then"],[160,28,115,11,"onfulfilled"],[160,39,115,22],[160,41,115,24],[161,10,116,8],[161,17,116,15,"Promise"],[161,24,116,22],[161,25,116,23,"resolve"],[161,32,116,30],[161,33,116,31,"onfulfilled"],[161,44,116,42],[161,47,116,45,"onfulfilled"],[161,58,116,56],[161,59,116,57,"value"],[161,64,116,62],[161,65,116,63],[161,68,116,66,"value"],[161,73,116,71],[161,74,116,72],[162,8,117,6],[162,9,117,7],[163,8,118,6,"catch"],[163,13,118,11],[163,24,118,6,"catch"],[163,30,118,11,"catch"],[163,31,118,11],[163,33,118,14],[164,10,119,8],[164,17,119,15,"thenable"],[164,25,119,23],[165,8,120,6],[166,6,121,4],[166,7,121,5],[167,6,122,4],[167,13,122,11,"thenable"],[167,21,122,19],[168,6,123,4],[169,4,124,2],[169,5,124,3],[169,7,124,5],[169,9,124,7],[169,10,124,8],[170,4,125,2],[170,8,125,8,"previousIndexRef"],[170,24,125,24],[170,27,125,27,"React"],[170,32,125,32],[170,33,125,33,"useRef"],[170,39,125,39],[170,40,125,40,"undefined"],[170,49,125,49],[170,50,125,50],[171,4,126,2],[171,8,126,8,"previousStateRef"],[171,24,126,24],[171,27,126,27,"React"],[171,32,126,32],[171,33,126,33,"useRef"],[171,39,126,39],[171,40,126,40,"undefined"],[171,49,126,49],[171,50,126,50],[172,4,127,2],[172,8,127,8,"pendingPopStatePathRef"],[172,30,127,30],[172,33,127,33,"React"],[172,38,127,38],[172,39,127,39,"useRef"],[172,45,127,45],[172,46,127,46,"undefined"],[172,55,127,55],[172,56,127,56],[173,4,128,2,"React"],[173,9,128,7],[173,10,128,8,"useEffect"],[173,19,128,17],[173,20,128,18],[173,32,128,24],[174,6,129,4,"previousIndexRef"],[174,22,129,20],[174,23,129,21,"current"],[174,30,129,28],[174,33,129,31,"history"],[174,40,129,38],[174,41,129,39,"index"],[174,46,129,44],[175,6,130,4],[175,13,130,11,"history"],[175,20,130,18],[175,21,130,19,"listen"],[175,27,130,25],[175,28,130,26],[175,40,130,32],[176,8,130,32],[176,12,130,32,"_previousIndexRef$cur"],[176,33,130,32],[177,8,131,6],[177,12,131,12,"navigation"],[177,22,131,22],[177,25,131,25,"ref"],[177,28,131,28],[177,29,131,29,"current"],[177,36,131,36],[178,8,132,6],[178,12,132,10],[178,13,132,11,"navigation"],[178,23,132,21],[178,27,132,25],[178,28,132,26,"enabled"],[178,35,132,33],[178,37,132,35],[179,10,133,8],[180,8,134,6],[181,8,135,6],[181,12,135,6,"_window"],[181,19,135,6],[181,22,137,10,"window"],[181,28,137,16],[182,10,136,8,"location"],[182,18,136,16],[182,21,136,16,"_window"],[182,28,136,16],[182,29,136,8,"location"],[182,37,136,16],[183,8,138,6],[183,12,138,12,"path"],[183,16,138,16],[183,19,138,19,"location"],[183,27,138,27],[183,28,138,28,"pathname"],[183,36,138,36],[183,39,138,39,"location"],[183,47,138,47],[183,48,138,48,"search"],[183,54,138,54],[184,8,139,6],[184,12,139,12,"index"],[184,17,139,17],[184,20,139,20,"history"],[184,27,139,27],[184,28,139,28,"index"],[184,33,139,33],[185,8,140,6],[185,12,140,12,"previousIndex"],[185,25,140,25],[185,29,140,25,"_previousIndexRef$cur"],[185,50,140,25],[185,53,140,28,"previousIndexRef"],[185,69,140,44],[185,70,140,45,"current"],[185,77,140,52],[185,89,140,52,"_previousIndexRef$cur"],[185,110,140,52],[185,113,140,56],[185,114,140,57],[186,8,141,6,"previousIndexRef"],[186,24,141,22],[186,25,141,23,"current"],[186,32,141,30],[186,35,141,33,"index"],[186,40,141,38],[187,8,142,6,"pendingPopStatePathRef"],[187,30,142,28],[187,31,142,29,"current"],[187,38,142,36],[187,41,142,39,"path"],[187,45,142,43],[189,8,144,6],[190,8,145,6],[191,8,146,6],[192,8,147,6],[192,12,147,12,"record"],[192,18,147,18],[192,21,147,21,"history"],[192,28,147,28],[192,29,147,29,"get"],[192,32,147,32],[192,33,147,33,"index"],[192,38,147,38],[192,39,147,39],[193,8,148,6],[193,12,148,10],[193,13,148,10,"record"],[193,19,148,16],[193,39,148,10,"record"],[193,45,148,16],[193,46,148,18,"path"],[193,50,148,22],[193,56,148,27,"path"],[193,60,148,31],[193,64,148,35,"record"],[193,70,148,41],[193,82,148,35,"record"],[193,88,148,41],[193,89,148,43,"state"],[193,94,148,48],[193,96,148,50],[194,10,149,8,"navigation"],[194,20,149,18],[194,21,149,19,"resetRoot"],[194,30,149,28],[194,31,149,29,"record"],[194,37,149,35],[194,38,149,36,"state"],[194,43,149,41],[194,44,149,42],[195,10,150,8],[196,8,151,6],[197,8,152,6],[197,12,152,12,"state"],[197,17,152,17],[197,20,152,20,"getStateFromPathRef"],[197,39,152,39],[197,40,152,40,"current"],[197,47,152,47],[197,48,152,48,"path"],[197,52,152,52],[197,54,152,54,"configRef"],[197,63,152,63],[197,64,152,64,"current"],[197,71,152,71],[197,72,152,72],[199,8,154,6],[200,8,155,6],[201,8,156,6],[201,12,156,10,"state"],[201,17,156,15],[201,19,156,17],[202,10,157,8],[203,10,158,8,"onUnhandledLinking"],[203,28,158,26],[203,29,158,27,"path"],[203,33,158,31],[203,34,158,32],[204,10,159,8],[205,10,160,8],[206,10,161,8],[206,14,161,12,"validateRoutesNotExistInRootState"],[206,47,161,45],[206,48,161,46,"state"],[206,53,161,51],[206,54,161,52],[206,56,161,54],[207,12,162,10],[208,10,163,8],[209,10,164,8],[209,14,164,12,"index"],[209,19,164,17],[209,22,164,20,"previousIndex"],[209,35,164,33],[209,37,164,35],[210,12,165,10],[210,16,165,16,"action"],[210,22,165,22],[210,25,165,25,"getActionFromStateRef"],[210,46,165,46],[210,47,165,47,"current"],[210,54,165,54],[210,55,165,55,"state"],[210,60,165,60],[210,62,165,62,"configRef"],[210,71,165,71],[210,72,165,72,"current"],[210,79,165,79],[210,80,165,80],[211,12,166,10],[211,16,166,14,"action"],[211,22,166,20],[211,27,166,25,"undefined"],[211,36,166,34],[211,38,166,36],[212,14,167,12],[212,18,167,16],[213,16,168,14,"navigation"],[213,26,168,24],[213,27,168,25,"dispatch"],[213,35,168,33],[213,36,168,34,"action"],[213,42,168,40],[213,43,168,41],[214,14,169,12],[214,15,169,13],[214,16,169,14],[214,23,169,21,"e"],[214,24,169,22],[214,26,169,24],[215,16,170,14],[216,16,171,14],[217,16,172,14,"console"],[217,23,172,21],[217,24,172,22,"warn"],[217,28,172,26],[217,29,172,27],[217,82,172,80,"path"],[217,86,172,84],[217,92,172,90],[217,99,172,97,"e"],[217,100,172,98],[217,105,172,103],[217,113,172,111],[217,117,172,115,"e"],[217,118,172,116],[217,122,172,120],[217,126,172,124],[217,130,172,128],[217,139,172,137],[217,143,172,141,"e"],[217,144,172,142],[217,147,172,145,"e"],[217,148,172,146],[217,149,172,147,"message"],[217,156,172,154],[217,159,172,157,"e"],[217,160,172,158],[217,162,172,160],[217,163,172,161],[218,14,173,12],[219,12,174,10],[219,13,174,11],[219,19,174,17],[220,14,175,12,"navigation"],[220,24,175,22],[220,25,175,23,"resetRoot"],[220,34,175,32],[220,35,175,33,"state"],[220,40,175,38],[220,41,175,39],[221,12,176,10],[222,10,177,8],[222,11,177,9],[222,17,177,15],[223,12,178,10,"navigation"],[223,22,178,20],[223,23,178,21,"resetRoot"],[223,32,178,30],[223,33,178,31,"state"],[223,38,178,36],[223,39,178,37],[224,10,179,8],[225,8,180,6],[225,9,180,7],[225,15,180,13],[226,10,181,8],[227,10,182,8,"navigation"],[227,20,182,18],[227,21,182,19,"resetRoot"],[227,30,182,28],[227,31,182,29,"state"],[227,36,182,34],[227,37,182,35],[228,8,183,6],[229,6,184,4],[229,7,184,5],[229,8,184,6],[230,4,185,2],[230,5,185,3],[230,7,185,5],[230,8,185,6,"enabled"],[230,15,185,13],[230,17,185,15,"history"],[230,24,185,22],[230,26,185,24,"onUnhandledLinking"],[230,44,185,42],[230,46,185,44,"ref"],[230,49,185,47],[230,51,185,49,"validateRoutesNotExistInRootState"],[230,84,185,82],[230,85,185,83],[230,86,185,84],[231,4,186,2,"React"],[231,9,186,7],[231,10,186,8,"useEffect"],[231,19,186,17],[231,20,186,18],[231,32,186,24],[232,6,186,24],[232,10,186,24,"_ref$current"],[232,22,186,24],[233,6,187,4],[233,10,187,8],[233,11,187,9,"enabled"],[233,18,187,16],[233,20,187,18],[234,8,188,6],[235,6,189,4],[236,6,190,4],[236,10,190,10,"getPathForRoute"],[236,25,190,25],[236,28,190,28],[236,37,190,10,"getPathForRoute"],[236,52,190,25,"getPathForRoute"],[236,53,190,29,"route"],[236,58,190,34],[236,60,190,36,"state"],[236,65,190,41],[236,67,190,46],[237,8,191,6],[237,12,191,10,"path"],[237,16,191,14],[239,8,193,6],[240,8,194,6],[241,8,195,6],[241,12,195,10,"route"],[241,17,195,15],[241,29,195,10,"route"],[241,34,195,15],[241,35,195,17,"path"],[241,39,195,21],[241,41,195,23],[242,10,196,8],[242,14,196,14,"stateForPath"],[242,26,196,26],[242,29,196,29,"getStateFromPathRef"],[242,48,196,48],[242,49,196,49,"current"],[242,56,196,56],[242,57,196,57,"route"],[242,62,196,62],[242,63,196,63,"path"],[242,67,196,67],[242,69,196,69,"configRef"],[242,78,196,78],[242,79,196,79,"current"],[242,86,196,86],[242,87,196,87],[243,10,197,8],[243,14,197,12,"stateForPath"],[243,26,197,24],[243,28,197,26],[244,12,198,10],[244,16,198,16,"focusedRoute"],[244,28,198,28],[244,31,198,31],[244,35,198,31,"findFocusedRoute"],[244,55,198,47],[244,56,198,47,"findFocusedRoute"],[244,72,198,47],[244,74,198,48,"stateForPath"],[244,86,198,60],[244,87,198,61],[245,12,199,10],[245,16,199,14,"focusedRoute"],[245,28,199,26],[245,32,199,30,"focusedRoute"],[245,44,199,42],[245,45,199,43,"name"],[245,49,199,47],[245,54,199,52,"route"],[245,59,199,57],[245,60,199,58,"name"],[245,64,199,62],[245,68,199,66],[245,72,199,66,"isEqual"],[245,79,199,73],[245,80,199,73,"default"],[245,87,199,73],[245,89,199,74,"focusedRoute"],[245,101,199,86],[245,102,199,87,"params"],[245,108,199,93],[245,110,199,95,"route"],[245,115,199,100],[245,116,199,101,"params"],[245,122,199,107],[245,123,199,108],[245,125,199,110],[246,14,200,12,"path"],[246,18,200,16],[246,21,200,19,"route"],[246,26,200,24],[246,27,200,25,"path"],[246,31,200,29],[247,12,201,10],[248,10,202,8],[249,8,203,6],[250,8,204,6],[250,12,204,10,"path"],[250,16,204,14],[250,20,204,18],[250,24,204,22],[250,26,204,24],[251,10,205,8,"path"],[251,14,205,12],[251,17,205,15,"getPathFromStateRef"],[251,36,205,34],[251,37,205,35,"current"],[251,44,205,42],[251,45,205,43,"state"],[251,50,205,48],[251,52,205,50,"configRef"],[251,61,205,59],[251,62,205,60,"current"],[251,69,205,67],[251,70,205,68],[252,8,206,6],[253,8,207,6],[253,12,207,12,"previousRoute"],[253,25,207,25],[253,28,207,28,"previousStateRef"],[253,44,207,44],[253,45,207,45,"current"],[253,52,207,52],[253,55,207,55],[253,59,207,55,"findFocusedRoute"],[253,79,207,71],[253,80,207,71,"findFocusedRoute"],[253,96,207,71],[253,98,207,72,"previousStateRef"],[253,114,207,88],[253,115,207,89,"current"],[253,122,207,96],[253,123,207,97],[253,126,207,100,"undefined"],[253,135,207,109],[255,8,209,6],[256,8,210,6],[256,12,210,10,"previousRoute"],[256,25,210,23],[256,29,210,27,"route"],[256,34,210,32],[256,38,210,36],[256,43,210,41],[256,47,210,45,"previousRoute"],[256,60,210,58],[256,64,210,62],[256,69,210,67],[256,73,210,71,"route"],[256,78,210,76],[256,82,210,80,"previousRoute"],[256,95,210,93],[256,96,210,94,"key"],[256,99,210,97],[256,104,210,102,"route"],[256,109,210,107],[256,110,210,108,"key"],[256,113,210,111],[256,115,210,113],[257,10,211,8,"path"],[257,14,211,12],[257,17,211,15,"path"],[257,21,211,19],[257,24,211,22,"location"],[257,32,211,30],[257,33,211,31,"hash"],[257,37,211,35],[258,8,212,6],[259,8,213,6],[259,15,213,13,"path"],[259,19,213,17],[260,6,214,4],[260,7,214,5],[261,6,215,4],[261,10,215,8,"ref"],[261,13,215,11],[261,14,215,12,"current"],[261,21,215,19],[261,23,215,21],[262,8,216,6],[263,8,217,6],[264,8,218,6],[264,12,218,12,"state"],[264,17,218,17],[264,20,218,20,"ref"],[264,23,218,23],[264,24,218,24,"current"],[264,31,218,31],[264,32,218,32,"getRootState"],[264,44,218,44],[264,45,218,45],[264,46,218,46],[265,8,219,6],[265,12,219,10,"state"],[265,17,219,15],[265,19,219,17],[266,10,220,8],[266,14,220,14,"route"],[266,19,220,19],[266,22,220,22],[266,26,220,22,"findFocusedRoute"],[266,46,220,38],[266,47,220,38,"findFocusedRoute"],[266,63,220,38],[266,65,220,39,"state"],[266,70,220,44],[266,71,220,45],[267,10,221,8],[267,14,221,14,"path"],[267,18,221,18],[267,21,221,21,"getPathForRoute"],[267,36,221,36],[267,37,221,37,"route"],[267,42,221,42],[267,44,221,44,"state"],[267,49,221,49],[267,50,221,50],[268,10,222,8],[268,14,222,12,"previousStateRef"],[268,30,222,28],[268,31,222,29,"current"],[268,38,222,36],[268,43,222,41,"undefined"],[268,52,222,50],[268,54,222,52],[269,12,223,10,"previousStateRef"],[269,28,223,26],[269,29,223,27,"current"],[269,36,223,34],[269,39,223,37,"state"],[269,44,223,42],[270,10,224,8],[271,10,225,8,"history"],[271,17,225,15],[271,18,225,16,"replace"],[271,25,225,23],[271,26,225,24],[272,12,226,10,"path"],[272,16,226,14],[272,18,226,10,"path"],[272,22,226,14],[273,12,227,10,"state"],[273,17,227,15],[273,19,227,10,"state"],[274,10,228,8],[274,11,228,9],[274,12,228,10],[275,8,229,6],[276,6,230,4],[277,6,231,4],[277,10,231,10,"onStateChange"],[277,23,231,23],[278,8,231,23],[278,12,231,23,"_ref2"],[278,17,231,23],[278,24,231,23,"_asyncToGenerator"],[278,41,231,23],[278,42,231,23,"default"],[278,49,231,23],[278,51,231,26],[278,64,231,38],[279,10,232,6],[279,14,232,12,"navigation"],[279,24,232,22],[279,27,232,25,"ref"],[279,30,232,28],[279,31,232,29,"current"],[279,38,232,36],[280,10,233,6],[280,14,233,10],[280,15,233,11,"navigation"],[280,25,233,21],[280,29,233,25],[280,30,233,26,"enabled"],[280,37,233,33],[280,39,233,35],[281,12,234,8],[282,10,235,6],[283,10,236,6],[283,14,236,12,"previousState"],[283,27,236,25],[283,30,236,28,"previousStateRef"],[283,46,236,44],[283,47,236,45,"current"],[283,54,236,52],[284,10,237,6],[284,14,237,12,"state"],[284,19,237,17],[284,22,237,20,"navigation"],[284,32,237,30],[284,33,237,31,"getRootState"],[284,45,237,43],[284,46,237,44],[284,47,237,45],[286,10,239,6],[287,10,240,6],[287,14,240,10],[287,15,240,11,"state"],[287,20,240,16],[287,22,240,18],[288,12,241,8],[289,10,242,6],[290,10,243,6],[290,14,243,12,"pendingPath"],[290,25,243,23],[290,28,243,26,"pendingPopStatePathRef"],[290,50,243,48],[290,51,243,49,"current"],[290,58,243,56],[291,10,244,6],[291,14,244,12,"route"],[291,19,244,17],[291,22,244,20],[291,26,244,20,"findFocusedRoute"],[291,46,244,36],[291,47,244,36,"findFocusedRoute"],[291,63,244,36],[291,65,244,37,"state"],[291,70,244,42],[291,71,244,43],[292,10,245,6],[292,14,245,12,"path"],[292,18,245,16],[292,21,245,19,"getPathForRoute"],[292,36,245,34],[292,37,245,35,"route"],[292,42,245,40],[292,44,245,42,"state"],[292,49,245,47],[292,50,245,48],[293,10,246,6,"previousStateRef"],[293,26,246,22],[293,27,246,23,"current"],[293,34,246,30],[293,37,246,33,"state"],[293,42,246,38],[294,10,247,6,"pendingPopStatePathRef"],[294,32,247,28],[294,33,247,29,"current"],[294,40,247,36],[294,43,247,39,"undefined"],[294,52,247,48],[296,10,249,6],[297,10,250,6],[298,10,251,6],[299,10,252,6],[300,10,253,6],[300,14,253,6,"_findMatchingState2"],[300,33,253,6],[300,36,253,51,"findMatchingState"],[300,54,253,68],[300,55,253,69,"previousState"],[300,68,253,82],[300,70,253,84,"state"],[300,75,253,89],[300,76,253,90],[301,12,253,90,"_findMatchingState3"],[301,31,253,90],[301,38,253,90,"_slicedToArray"],[301,52,253,90],[301,53,253,90,"default"],[301,60,253,90],[301,62,253,90,"_findMatchingState2"],[301,81,253,90],[302,12,253,13,"previousFocusedState"],[302,32,253,33],[302,35,253,33,"_findMatchingState3"],[302,54,253,33],[303,12,253,35,"focusedState"],[303,24,253,47],[303,27,253,47,"_findMatchingState3"],[303,46,253,47],[304,10,254,6],[304,14,254,10,"previousFocusedState"],[304,34,254,30],[304,38,254,34,"focusedState"],[304,50,254,46],[305,10,255,6],[306,10,256,6],[307,10,257,6,"path"],[307,14,257,10],[307,19,257,15,"pendingPath"],[307,30,257,26],[307,32,257,28],[308,12,258,8],[308,16,258,14,"historyDelta"],[308,28,258,26],[308,31,258,29],[308,32,258,30,"focusedState"],[308,44,258,42],[308,45,258,43,"history"],[308,52,258,50],[308,55,258,53,"focusedState"],[308,67,258,65],[308,68,258,66,"history"],[308,75,258,73],[308,76,258,74,"length"],[308,82,258,80],[308,85,258,83,"focusedState"],[308,97,258,95],[308,98,258,96,"routes"],[308,104,258,102],[308,105,258,103,"length"],[308,111,258,109],[308,116,258,114,"previousFocusedState"],[308,136,258,134],[308,137,258,135,"history"],[308,144,258,142],[308,147,258,145,"previousFocusedState"],[308,167,258,165],[308,168,258,166,"history"],[308,175,258,173],[308,176,258,174,"length"],[308,182,258,180],[308,185,258,183,"previousFocusedState"],[308,205,258,203],[308,206,258,204,"routes"],[308,212,258,210],[308,213,258,211,"length"],[308,219,258,217],[308,220,258,218],[309,12,259,8],[309,16,259,12,"historyDelta"],[309,28,259,24],[309,31,259,27],[309,32,259,28],[309,34,259,30],[310,14,260,10],[311,14,261,10],[312,14,262,10,"history"],[312,21,262,17],[312,22,262,18,"push"],[312,26,262,22],[312,27,262,23],[313,16,263,12,"path"],[313,20,263,16],[313,22,263,12,"path"],[313,26,263,16],[314,16,264,12,"state"],[314,21,264,17],[314,23,264,12,"state"],[315,14,265,10],[315,15,265,11],[315,16,265,12],[316,12,266,8],[316,13,266,9],[316,19,266,15],[316,23,266,19,"historyDelta"],[316,35,266,31],[316,38,266,34],[316,39,266,35],[316,41,266,37],[317,14,267,10],[319,14,269,10],[319,18,269,16,"nextIndex"],[319,27,269,25],[319,30,269,28,"history"],[319,37,269,35],[319,38,269,36,"backIndex"],[319,47,269,45],[319,48,269,46],[320,16,270,12,"path"],[320,20,270,16],[320,22,270,12,"path"],[321,14,271,10],[321,15,271,11],[321,16,271,12],[322,14,272,10],[322,18,272,16,"currentIndex"],[322,30,272,28],[322,33,272,31,"history"],[322,40,272,38],[322,41,272,39,"index"],[322,46,272,44],[323,14,273,10],[323,18,273,14],[324,16,274,12],[324,20,274,16,"nextIndex"],[324,29,274,25],[324,34,274,30],[324,35,274,31],[324,36,274,32],[324,40,274,36,"nextIndex"],[324,49,274,45],[324,52,274,48,"currentIndex"],[324,64,274,60],[325,16,275,12],[326,16,276,12,"history"],[326,23,276,19],[326,24,276,20,"get"],[326,27,276,23],[326,28,276,24,"nextIndex"],[326,37,276,33],[326,38,276,34],[326,40,276,36],[327,18,277,14],[328,18,278,14],[328,24,278,20,"history"],[328,31,278,27],[328,32,278,28,"go"],[328,34,278,30],[328,35,278,31,"nextIndex"],[328,44,278,40],[328,47,278,43,"currentIndex"],[328,59,278,55],[328,60,278,56],[329,16,279,12],[329,17,279,13],[329,23,279,19],[330,18,280,14],[331,18,281,14],[332,18,282,14],[333,18,283,14],[333,24,283,20,"history"],[333,31,283,27],[333,32,283,28,"go"],[333,34,283,30],[333,35,283,31,"historyDelta"],[333,47,283,43],[333,48,283,44],[334,16,284,12],[336,16,286,12],[337,16,287,12,"history"],[337,23,287,19],[337,24,287,20,"replace"],[337,31,287,27],[337,32,287,28],[338,18,288,14,"path"],[338,22,288,18],[338,24,288,14,"path"],[338,28,288,18],[339,18,289,14,"state"],[339,23,289,19],[339,25,289,14,"state"],[340,16,290,12],[340,17,290,13],[340,18,290,14],[341,14,291,10],[341,15,291,11],[341,16,291,12],[341,23,291,19,"e"],[341,24,291,20],[341,26,291,22],[342,16,292,12],[343,14,292,12],[344,12,294,8],[344,13,294,9],[344,19,294,15],[345,14,295,10],[346,14,296,10,"history"],[346,21,296,17],[346,22,296,18,"replace"],[346,29,296,25],[346,30,296,26],[347,16,297,12,"path"],[347,20,297,16],[347,22,297,12,"path"],[347,26,297,16],[348,16,298,12,"state"],[348,21,298,17],[348,23,298,12,"state"],[349,14,299,10],[349,15,299,11],[349,16,299,12],[350,12,300,8],[351,10,301,6],[351,11,301,7],[351,17,301,13],[352,12,302,8],[353,12,303,8],[354,12,304,8,"history"],[354,19,304,15],[354,20,304,16,"replace"],[354,27,304,23],[354,28,304,24],[355,14,305,10,"path"],[355,18,305,14],[355,20,305,10,"path"],[355,24,305,14],[356,14,306,10,"state"],[356,19,306,15],[356,21,306,10,"state"],[357,12,307,8],[357,13,307,9],[357,14,307,10],[358,10,308,6],[359,8,309,4],[359,9,309,5],[360,8,309,5],[360,24,231,10,"onStateChange"],[360,37,231,23,"onStateChange"],[360,38,231,23],[361,10,231,23],[361,17,231,23,"_ref2"],[361,22,231,23],[361,23,231,23,"apply"],[361,28,231,23],[361,35,231,23,"arguments"],[361,44,231,23],[362,8,231,23],[363,6,231,23],[363,9,309,5],[365,6,311,4],[366,6,312,4],[367,6,313,4],[368,6,314,4],[368,14,314,4,"_ref$current"],[368,26,314,4],[368,29,314,11,"ref"],[368,32,314,14],[368,33,314,15,"current"],[368,40,314,22],[368,61,314,11,"_ref$current"],[368,73,314,11],[368,74,314,24,"addListener"],[368,85,314,35],[368,86,314,36],[368,93,314,43],[368,95,314,45,"series"],[368,101,314,51],[368,102,314,52,"onStateChange"],[368,115,314,65],[368,116,314,66],[368,117,314,67],[369,4,315,2],[369,5,315,3],[369,7,315,5],[369,8,315,6,"enabled"],[369,15,315,13],[369,17,315,15,"history"],[369,24,315,22],[369,26,315,24,"ref"],[369,29,315,27],[369,30,315,28],[369,31,315,29],[370,4,316,2],[370,11,316,9],[371,6,317,4,"getInitialState"],[371,21,317,19],[371,23,317,4,"getInitialState"],[372,4,318,2],[372,5,318,3],[373,2,319,0],[374,0,319,1],[374,3]],"functionMap":{"names":["<global>","findMatchingState","series","callback","useLinking","React.useEffect$argument_0","<anonymous>","validateRoutesNotExistInRootState","state.routes.some$argument_0","getInitialState","thenable.then","thenable._catch","history.listen$argument_0","getPathForRoute","onStateChange"],"mappings":"AAA;0BCW;CDsB;sBEK;mBCE;GDG;CFE;OIE;kBCQ;WCc;KDK;GDC;kBCW;GDM;8DGC;8BCK,4CD;GHC;4CKE;MCa;ODE;MEC;OFE;GLI;kBCI;0BOE;KPsD;GDC;kBCC;4BQI;KRwB;0BSiB;KT8E;GDM;CJI"},"hasCjsExports":false},"type":"js/module"}]}