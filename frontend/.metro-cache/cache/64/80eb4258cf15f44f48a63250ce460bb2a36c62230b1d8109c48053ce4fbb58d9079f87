{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"5y7e5+zC7teYEEC6niD9f5zII1M=","exportNames":["*"],"imports":1}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kiCFfIx1MWoD4noR0gEoyrFAUKE=","exportNames":["*"],"imports":1}},{"name":"query-string","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":39,"column":33,"index":1606},"end":{"line":39,"column":56,"index":1629}}],"key":"CQ4f6+ZdkmuRCkqw6zIINc/cka0=","exportNames":["*"],"imports":1}},{"name":"./getPathFromState-forks","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":40,"column":26,"index":1658},"end":{"line":40,"column":61,"index":1693}}],"key":"t0FyaMgwHS2Lt2mTiJkOs7AsCtY=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = require(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\").default;\n  var _toConsumableArray = require(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\").default;\n  var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = {\n        enumerable: true,\n        get: function get() {\n          return m[k];\n        }\n      };\n    }\n    Object.defineProperty(o, k2, desc);\n  } : function (o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n  });\n  var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n    Object.defineProperty(o, \"default\", {\n      enumerable: true,\n      value: v\n    });\n  } : function (o, v) {\n    o[\"default\"] = v;\n  });\n  var __importStar = this && this.__importStar || function () {\n    var _ownKeys = function ownKeys(o) {\n      _ownKeys = Object.getOwnPropertyNames || function (o) {\n        var ar = [];\n        for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n        return ar;\n      };\n      return _ownKeys(o);\n    };\n    return function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k = _ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n      __setModuleDefault(result, mod);\n      return result;\n    };\n  }();\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getPathFromState = getPathFromState;\n  exports.getPathDataFromState = getPathDataFromState;\n  exports.appendBaseUrl = appendBaseUrl;\n  var queryString = __importStar(require(_dependencyMap[2], \"query-string\"));\n  var expo = __importStar(require(_dependencyMap[3], \"./getPathFromState-forks\"));\n  // END FORK\n  var _getActiveRoute = function getActiveRoute(state) {\n    var route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n    if (route.state) {\n      return _getActiveRoute(route.state);\n    }\n    return route;\n  };\n  var cachedNormalizedConfigs = [undefined, {}];\n  /**\n   * Utility to serialize a navigation state object to a path string.\n   *\n   * @example\n   * ```js\n   * getPathFromState(\n   *   {\n   *     routes: [\n   *       {\n   *         name: 'Chat',\n   *         params: { author: 'Jane', id: 42 },\n   *       },\n   *     ],\n   *   },\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         stringify: { author: author => author.toLowerCase() }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   *\n   * @param state Navigation state to serialize.\n   * @param options Extra options to fine-tune how to serialize the path.\n   * @returns Path representing the state, e.g. /foo/bar?count=42.\n   */\n  function getPathFromState(state, options) {\n    return getPathDataFromState(state, options).path;\n  }\n  function getPathDataFromState(state, options) {\n    if (state == null) {\n      throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n    }\n    if (options) {\n      // START FORK\n      expo.validatePathConfig(options);\n      // validatePathConfig(options);\n      // END FORK\n    }\n    // Create a normalized configs object which will be easier to use\n    if (cachedNormalizedConfigs[0] !== (options == null ? void 0 : options.screens)) {\n      cachedNormalizedConfigs = [options == null ? void 0 : options.screens, options != null && options.screens ? createNormalizedConfigs(options.screens) : {}];\n    }\n    var configs = cachedNormalizedConfigs[1];\n    var path = '/';\n    var current = state;\n    var allParams = {};\n    var _loop = function _loop() {\n      var index = typeof current.index === 'number' ? current.index : 0;\n      var route = current.routes[index];\n      var pattern;\n      var focusedParams;\n      var focusedRoute = _getActiveRoute(state);\n      var currentOptions = configs;\n      // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n      var nestedRouteNames = [];\n      var hasNext = true;\n      while (route.name in currentOptions && hasNext) {\n        pattern = currentOptions[route.name].pattern;\n        nestedRouteNames.push(route.name);\n        if (route.params) {\n          var _currentOptions$route;\n          var stringify = (_currentOptions$route = currentOptions[route.name]) == null ? void 0 : _currentOptions$route.stringify;\n          // START FORK\n          // This mutates allParams\n          var currentParams = expo.fixCurrentParams(allParams, route, stringify);\n          // const currentParams = Object.fromEntries(\n          //   Object.entries(route.params).map(([key, value]) => [\n          //     key,\n          //     stringify?.[key] ? stringify[key](value) : String(value),\n          //   ])\n          // );\n          // if (pattern) {\n          //   Object.assign(allParams, currentParams);\n          // }\n          // END FORK\n          if (focusedRoute === route) {\n            var _pattern;\n            // If this is the focused route, keep the params for later use\n            // We save it here since it's been stringified already\n            focusedParams = Object.assign({}, currentParams);\n            (_pattern = pattern) == null || _pattern.split('/').filter(function (p) {\n              return expo.isDynamicPart(p);\n            })\n            // eslint-disable-next-line no-loop-func\n            .forEach(function (p) {\n              var name = expo.getParamName(p);\n              // Remove the params present in the pattern since we'll only use the rest for query string\n              if (focusedParams) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete focusedParams[name];\n              }\n            });\n          }\n        }\n        // If there is no `screens` property or no nested state, we return pattern\n        if (!currentOptions[route.name].screens || route.state === undefined) {\n          var _currentOptions$route2;\n          // START FORK\n          // Expo Router allows you to navigate to a (group) and not specify a target screen\n          // This is different from React Navigation, which requires a target screen\n          // We need to handle this case here, by selecting either the index screen or the first screen of the group\n          // IMPORTANT: This does not affect groups that use _layout files with initialRouteNames\n          // Layout files create a new route config. This only affects groups without layouts that have their screens\n          // hoisted.\n          // Example:\n          // - /home/_layout\n          // - /home/(a|b|c)/index          --> Hoisted to /home/_layout navigator\n          // - /home/(a|b|c)/other          --> Hoisted to /home/_layout navigator\n          // - /home/(profile)/me           --> Hoisted to /home/_layout navigator\n          //\n          // route.push('/home/(a)')        --> This should navigate to /home/(a)/index\n          // route.push('/home/(profile)')  --> This should navigate to /home/(profile)/me\n          var screens = currentOptions[route.name].screens;\n          // Determine what screen the user wants to navigate to. If no screen is specified, assume there is an index screen\n          // In the examples above, this ensures that /home/(a) navigates to /home/(a)/index\n          var targetScreen =\n          // This is typed as unknown, so we need to add these extra assertions\n          route.params && 'screen' in route.params && typeof route.params.screen === 'string' ? route.params.screen : 'index';\n          // If the target screen is not in the screens object, default to the first screen\n          // In the examples above, this ensures that /home/(profile) navigates to /home/(profile)/me\n          // As there is no index screen in the group\n          var screen = screens ? screens[targetScreen] ? targetScreen : Object.keys(screens)[0] : undefined;\n          if (screen && screens && (_currentOptions$route2 = currentOptions[route.name].screens) != null && _currentOptions$route2[screen]) {\n            route = Object.assign({}, screens[screen], {\n              name: screen,\n              key: screen\n            });\n            currentOptions = screens;\n          } else {\n            hasNext = false;\n          }\n          // hasNext = false;\n          // END FORK\n        } else {\n          index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n          var nextRoute = route.state.routes[index];\n          var nestedConfig = currentOptions[route.name].screens;\n          // if there is config for next route name, we go deeper\n          if (nestedConfig && nextRoute.name in nestedConfig) {\n            route = nextRoute;\n            currentOptions = nestedConfig;\n          } else {\n            // If not, there is no sense in going deeper in config\n            hasNext = false;\n          }\n        }\n      }\n      if (pattern === undefined) {\n        pattern = nestedRouteNames.join('/');\n      }\n      if (currentOptions[route.name] !== undefined) {\n        var _configs$route$name;\n        // START FORK\n        path += expo.getPathWithConventionsCollapsed(Object.assign({}, options, {\n          pattern: pattern,\n          route: route,\n          params: allParams,\n          initialRouteName: (_configs$route$name = configs[route.name]) == null ? void 0 : _configs$route$name.initialRouteName\n        }));\n        // path += pattern\n        //   .split('/')\n        //   .map((p) => {\n        //     const name = getParamName(p);\n        //     // We don't know what to show for wildcard patterns\n        //     // Showing the route name seems ok, though whatever we show here will be incorrect\n        //     // Since the page doesn't actually exist\n        //     if (p === '*') {\n        //       return route.name;\n        //     }\n        //     // If the path has a pattern for a param, put the param in the path\n        //     if (p.startsWith(':')) {\n        //       const value = allParams[name];\n        //       if (value === undefined && p.endsWith('?')) {\n        //         // Optional params without value assigned in route.params should be ignored\n        //         return '';\n        //       }\n        //       // Valid characters according to\n        //       // https://datatracker.ietf.org/doc/html/rfc3986#section-3.3 (see pchar definition)\n        //       return String(value).replace(/[^A-Za-z0-9\\-._~!$&'()*+,;=:@]/g, (char) =>\n        //         encodeURIComponent(char)\n        //       );\n        //     }\n        //     return encodeURIComponent(p);\n        //   })\n        //   .join('/');\n        // } else {\n      } else if (!route.name.startsWith('+')) {\n        path += encodeURIComponent(route.name);\n      }\n      // END FORK\n      if (!focusedParams) {\n        focusedParams = focusedRoute.params;\n      }\n      if (route.state) {\n        path += '/';\n      } else if (focusedParams) {\n        for (var param in focusedParams) {\n          if (focusedParams[param] === 'undefined') {\n            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n            delete focusedParams[param];\n          }\n        }\n        // START FORK\n        delete focusedParams['#'];\n        // END FORK\n        var query = queryString.stringify(focusedParams, {\n          sort: false\n        });\n        if (query) {\n          path += `?${query}`;\n        }\n      }\n      current = route.state;\n    };\n    while (current) {\n      _loop();\n    }\n    // Remove multiple as well as trailing slashes\n    path = path.replace(/\\/+/g, '/');\n    path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n    // Include the root path if specified\n    if (options != null && options.path) {\n      path = joinPaths(options.path, path);\n    }\n    // START FORK\n    path = expo.appendBaseUrl(path);\n    if (allParams['#']) {\n      path += `#${allParams['#']}`;\n    }\n    // END FORK\n    // START FORK\n    return {\n      path: path,\n      params: allParams\n    };\n    // END FORK\n  }\n  // const getParamName = (pattern: string) => pattern.replace(/^:/, '').replace(/\\?$/, '');\n  var joinPaths = function joinPaths() {\n    var _ref;\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return (_ref = []).concat.apply(_ref, _toConsumableArray(paths.map(function (p) {\n      return p.split('/');\n    }))).filter(Boolean).join('/');\n  };\n  var createConfigItem = function createConfigItem(config, parentPattern) {\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var _pattern2 = parentPattern ? joinPaths(parentPattern, config) : config;\n      return {\n        pattern: _pattern2\n      };\n    }\n    if (config.exact && config.path === undefined) {\n      throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n    }\n    // If an object is specified as the value (e.g. Foo: { ... }),\n    // It can have `path` property and `screens` prop which has nested configs\n    var pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n    var screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n    return {\n      // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n      pattern: pattern == null ? void 0 : pattern.split('/').filter(Boolean).join('/'),\n      stringify: config.stringify,\n      screens: screens\n    };\n  };\n  var createNormalizedConfigs = function createNormalizedConfigs(options, pattern) {\n    return Object.fromEntries(Object.entries(options).map(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        name = _ref3[0],\n        c = _ref3[1];\n      var result = createConfigItem(c, pattern);\n      return [name, result];\n    }));\n  };\n  function appendBaseUrl(path) {\n    var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    if (process.env.NODE_ENV !== 'development') {\n      if (baseUrl) {\n        return `/${baseUrl.replace(/^\\/+/, '').replace(/\\/$/, '')}${path}`;\n      }\n    }\n    return path;\n  }\n});","lineCount":355,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"require"],[4,30,1,13],[4,31,1,13,"_dependencyMap"],[4,45,1,13],[4,90,1,13,"default"],[4,97,1,13],[5,2,1,13],[5,6,1,13,"_toConsumableArray"],[5,24,1,13],[5,27,1,13,"require"],[5,34,1,13],[5,35,1,13,"_dependencyMap"],[5,49,1,13],[5,98,1,13,"default"],[5,105,1,13],[6,2,2,0],[6,6,2,4,"__createBinding"],[6,21,2,19],[6,24,2,23],[6,28,2,27],[6,32,2,31],[6,36,2,35],[6,37,2,36,"__createBinding"],[6,52,2,51],[6,57,2,57,"Object"],[6,63,2,63],[6,64,2,64,"create"],[6,70,2,70],[6,73,2,74],[6,83,2,83,"o"],[6,84,2,84],[6,86,2,86,"m"],[6,87,2,87],[6,89,2,89,"k"],[6,90,2,90],[6,92,2,92,"k2"],[6,94,2,94],[6,96,2,96],[7,4,3,4],[7,8,3,8,"k2"],[7,10,3,10],[7,15,3,15,"undefined"],[7,24,3,24],[7,26,3,26,"k2"],[7,28,3,28],[7,31,3,31,"k"],[7,32,3,32],[8,4,4,4],[8,8,4,8,"desc"],[8,12,4,12],[8,15,4,15,"Object"],[8,21,4,21],[8,22,4,22,"getOwnPropertyDescriptor"],[8,46,4,46],[8,47,4,47,"m"],[8,48,4,48],[8,50,4,50,"k"],[8,51,4,51],[8,52,4,52],[9,4,5,4],[9,8,5,8],[9,9,5,9,"desc"],[9,13,5,13],[9,18,5,18],[9,23,5,23],[9,27,5,27,"desc"],[9,31,5,31],[9,34,5,34],[9,35,5,35,"m"],[9,36,5,36],[9,37,5,37,"__esModule"],[9,47,5,47],[9,50,5,50,"desc"],[9,54,5,54],[9,55,5,55,"writable"],[9,63,5,63],[9,67,5,67,"desc"],[9,71,5,71],[9,72,5,72,"configurable"],[9,84,5,84],[9,85,5,85],[9,87,5,87],[10,6,6,6,"desc"],[10,10,6,10],[10,13,6,13],[11,8,6,15,"enumerable"],[11,18,6,25],[11,20,6,27],[11,24,6,31],[12,8,6,33,"get"],[12,11,6,36],[12,13,6,38],[12,22,6,33,"get"],[12,25,6,36,"get"],[12,26,6,36],[12,28,6,49],[13,10,6,51],[13,17,6,58,"m"],[13,18,6,59],[13,19,6,60,"k"],[13,20,6,61],[13,21,6,62],[14,8,6,64],[15,6,6,66],[15,7,6,67],[16,4,7,4],[17,4,8,4,"Object"],[17,10,8,10],[17,11,8,11,"defineProperty"],[17,25,8,25],[17,26,8,26,"o"],[17,27,8,27],[17,29,8,29,"k2"],[17,31,8,31],[17,33,8,33,"desc"],[17,37,8,37],[17,38,8,38],[18,2,9,0],[18,3,9,1],[18,6,9,6],[18,16,9,15,"o"],[18,17,9,16],[18,19,9,18,"m"],[18,20,9,19],[18,22,9,21,"k"],[18,23,9,22],[18,25,9,24,"k2"],[18,27,9,26],[18,29,9,28],[19,4,10,4],[19,8,10,8,"k2"],[19,10,10,10],[19,15,10,15,"undefined"],[19,24,10,24],[19,26,10,26,"k2"],[19,28,10,28],[19,31,10,31,"k"],[19,32,10,32],[20,4,11,4,"o"],[20,5,11,5],[20,6,11,6,"k2"],[20,8,11,8],[20,9,11,9],[20,12,11,12,"m"],[20,13,11,13],[20,14,11,14,"k"],[20,15,11,15],[20,16,11,16],[21,2,12,0],[21,3,12,2],[21,4,12,3],[22,2,13,0],[22,6,13,4,"__setModuleDefault"],[22,24,13,22],[22,27,13,26],[22,31,13,30],[22,35,13,34],[22,39,13,38],[22,40,13,39,"__setModuleDefault"],[22,58,13,57],[22,63,13,63,"Object"],[22,69,13,69],[22,70,13,70,"create"],[22,76,13,76],[22,79,13,80],[22,89,13,89,"o"],[22,90,13,90],[22,92,13,92,"v"],[22,93,13,93],[22,95,13,95],[23,4,14,4,"Object"],[23,10,14,10],[23,11,14,11,"defineProperty"],[23,25,14,25],[23,26,14,26,"o"],[23,27,14,27],[23,29,14,29],[23,38,14,38],[23,40,14,40],[24,6,14,42,"enumerable"],[24,16,14,52],[24,18,14,54],[24,22,14,58],[25,6,14,60,"value"],[25,11,14,65],[25,13,14,67,"v"],[26,4,14,69],[26,5,14,70],[26,6,14,71],[27,2,15,0],[27,3,15,1],[27,6,15,5],[27,16,15,14,"o"],[27,17,15,15],[27,19,15,17,"v"],[27,20,15,18],[27,22,15,20],[28,4,16,4,"o"],[28,5,16,5],[28,6,16,6],[28,15,16,15],[28,16,16,16],[28,19,16,19,"v"],[28,20,16,20],[29,2,17,0],[29,3,17,1],[29,4,17,2],[30,2,18,0],[30,6,18,4,"__importStar"],[30,18,18,16],[30,21,18,20],[30,25,18,24],[30,29,18,28],[30,33,18,32],[30,34,18,33,"__importStar"],[30,46,18,45],[30,50,18,51],[30,62,18,63],[31,4,19,4],[31,8,19,8,"ownKeys"],[31,16,19,15],[31,19,19,18],[31,28,19,8,"ownKeys"],[31,35,19,15,"ownKeys"],[31,36,19,27,"o"],[31,37,19,28],[31,39,19,30],[32,6,20,8,"ownKeys"],[32,14,20,15],[32,17,20,18,"Object"],[32,23,20,24],[32,24,20,25,"getOwnPropertyNames"],[32,43,20,44],[32,47,20,48],[32,57,20,58,"o"],[32,58,20,59],[32,60,20,61],[33,8,21,12],[33,12,21,16,"ar"],[33,14,21,18],[33,17,21,21],[33,19,21,23],[34,8,22,12],[34,13,22,17],[34,17,22,21,"k"],[34,18,22,22],[34,22,22,26,"o"],[34,23,22,27],[34,25,22,29],[34,29,22,33,"Object"],[34,35,22,39],[34,36,22,40,"prototype"],[34,45,22,49],[34,46,22,50,"hasOwnProperty"],[34,60,22,64],[34,61,22,65,"call"],[34,65,22,69],[34,66,22,70,"o"],[34,67,22,71],[34,69,22,73,"k"],[34,70,22,74],[34,71,22,75],[34,73,22,77,"ar"],[34,75,22,79],[34,76,22,80,"ar"],[34,78,22,82],[34,79,22,83,"length"],[34,85,22,89],[34,86,22,90],[34,89,22,93,"k"],[34,90,22,94],[35,8,23,12],[35,15,23,19,"ar"],[35,17,23,21],[36,6,24,8],[36,7,24,9],[37,6,25,8],[37,13,25,15,"ownKeys"],[37,21,25,22],[37,22,25,23,"o"],[37,23,25,24],[37,24,25,25],[38,4,26,4],[38,5,26,5],[39,4,27,4],[39,11,27,11],[39,21,27,21,"mod"],[39,24,27,24],[39,26,27,26],[40,6,28,8],[40,10,28,12,"mod"],[40,13,28,15],[40,17,28,19,"mod"],[40,20,28,22],[40,21,28,23,"__esModule"],[40,31,28,33],[40,33,28,35],[40,40,28,42,"mod"],[40,43,28,45],[41,6,29,8],[41,10,29,12,"result"],[41,16,29,18],[41,19,29,21],[41,20,29,22],[41,21,29,23],[42,6,30,8],[42,10,30,12,"mod"],[42,13,30,15],[42,17,30,19],[42,21,30,23],[42,23,30,25],[42,28,30,30],[42,32,30,34,"k"],[42,33,30,35],[42,36,30,38,"ownKeys"],[42,44,30,45],[42,45,30,46,"mod"],[42,48,30,49],[42,49,30,50],[42,51,30,52,"i"],[42,52,30,53],[42,55,30,56],[42,56,30,57],[42,58,30,59,"i"],[42,59,30,60],[42,62,30,63,"k"],[42,63,30,64],[42,64,30,65,"length"],[42,70,30,71],[42,72,30,73,"i"],[42,73,30,74],[42,75,30,76],[42,77,30,78],[42,81,30,82,"k"],[42,82,30,83],[42,83,30,84,"i"],[42,84,30,85],[42,85,30,86],[42,90,30,91],[42,99,30,100],[42,101,30,102,"__createBinding"],[42,116,30,117],[42,117,30,118,"result"],[42,123,30,124],[42,125,30,126,"mod"],[42,128,30,129],[42,130,30,131,"k"],[42,131,30,132],[42,132,30,133,"i"],[42,133,30,134],[42,134,30,135],[42,135,30,136],[43,6,31,8,"__setModuleDefault"],[43,24,31,26],[43,25,31,27,"result"],[43,31,31,33],[43,33,31,35,"mod"],[43,36,31,38],[43,37,31,39],[44,6,32,8],[44,13,32,15,"result"],[44,19,32,21],[45,4,33,4],[45,5,33,5],[46,2,34,0],[46,3,34,1],[46,4,34,3],[46,5,34,4],[47,2,35,0,"Object"],[47,8,35,6],[47,9,35,7,"defineProperty"],[47,23,35,21],[47,24,35,22,"exports"],[47,31,35,29],[47,33,35,31],[47,45,35,43],[47,47,35,45],[48,4,35,47,"value"],[48,9,35,52],[48,11,35,54],[49,2,35,59],[49,3,35,60],[49,4,35,61],[50,2,36,0,"exports"],[50,9,36,7],[50,10,36,8,"getPathFromState"],[50,26,36,24],[50,29,36,27,"getPathFromState"],[50,45,36,43],[51,2,37,0,"exports"],[51,9,37,7],[51,10,37,8,"getPathDataFromState"],[51,30,37,28],[51,33,37,31,"getPathDataFromState"],[51,53,37,51],[52,2,38,0,"exports"],[52,9,38,7],[52,10,38,8,"appendBaseUrl"],[52,23,38,21],[52,26,38,24,"appendBaseUrl"],[52,39,38,37],[53,2,39,0],[53,6,39,6,"queryString"],[53,17,39,17],[53,20,39,20,"__importStar"],[53,32,39,32],[53,33,39,33,"require"],[53,40,39,40],[53,41,39,40,"_dependencyMap"],[53,55,39,40],[53,74,39,55],[53,75,39,56],[53,76,39,57],[54,2,40,0],[54,6,40,6,"expo"],[54,10,40,10],[54,13,40,13,"__importStar"],[54,25,40,25],[54,26,40,26,"require"],[54,33,40,33],[54,34,40,33,"_dependencyMap"],[54,48,40,33],[54,79,40,60],[54,80,40,61],[54,81,40,62],[55,2,41,0],[56,2,42,0],[56,6,42,6,"getActiveRoute"],[56,21,42,20],[56,24,42,23],[56,33,42,6,"getActiveRoute"],[56,47,42,20,"getActiveRoute"],[56,48,42,24,"state"],[56,53,42,29],[56,55,42,34],[57,4,43,4],[57,8,43,10,"route"],[57,13,43,15],[57,16,43,18],[57,23,43,25,"state"],[57,28,43,30],[57,29,43,31,"index"],[57,34,43,36],[57,39,43,41],[57,47,43,49],[57,50,44,10,"state"],[57,55,44,15],[57,56,44,16,"routes"],[57,62,44,22],[57,63,44,23,"state"],[57,68,44,28],[57,69,44,29,"index"],[57,74,44,34],[57,75,44,35],[57,78,45,10,"state"],[57,83,45,15],[57,84,45,16,"routes"],[57,90,45,22],[57,91,45,23,"state"],[57,96,45,28],[57,97,45,29,"routes"],[57,103,45,35],[57,104,45,36,"length"],[57,110,45,42],[57,113,45,45],[57,114,45,46],[57,115,45,47],[58,4,46,4],[58,8,46,8,"route"],[58,13,46,13],[58,14,46,14,"state"],[58,19,46,19],[58,21,46,21],[59,6,47,8],[59,13,47,15,"getActiveRoute"],[59,28,47,29],[59,29,47,30,"route"],[59,34,47,35],[59,35,47,36,"state"],[59,40,47,41],[59,41,47,42],[60,4,48,4],[61,4,49,4],[61,11,49,11,"route"],[61,16,49,16],[62,2,50,0],[62,3,50,1],[63,2,51,0],[63,6,51,4,"cachedNormalizedConfigs"],[63,29,51,27],[63,32,51,30],[63,33,52,4,"undefined"],[63,42,52,13],[63,44,53,4],[63,45,53,5],[63,46,53,6],[63,47,54,1],[64,2,55,0],[65,0,56,0],[66,0,57,0],[67,0,58,0],[68,0,59,0],[69,0,60,0],[70,0,61,0],[71,0,62,0],[72,0,63,0],[73,0,64,0],[74,0,65,0],[75,0,66,0],[76,0,67,0],[77,0,68,0],[78,0,69,0],[79,0,70,0],[80,0,71,0],[81,0,72,0],[82,0,73,0],[83,0,74,0],[84,0,75,0],[85,0,76,0],[86,0,77,0],[87,0,78,0],[88,0,79,0],[89,0,80,0],[90,0,81,0],[91,0,82,0],[92,0,83,0],[93,2,84,0],[93,11,84,9,"getPathFromState"],[93,27,84,25,"getPathFromState"],[93,28,84,26,"state"],[93,33,84,31],[93,35,84,33,"options"],[93,42,84,40],[93,44,84,42],[94,4,85,4],[94,11,85,11,"getPathDataFromState"],[94,31,85,31],[94,32,85,32,"state"],[94,37,85,37],[94,39,85,39,"options"],[94,46,85,46],[94,47,85,47],[94,48,85,48,"path"],[94,52,85,52],[95,2,86,0],[96,2,87,0],[96,11,87,9,"getPathDataFromState"],[96,31,87,29,"getPathDataFromState"],[96,32,87,30,"state"],[96,37,87,35],[96,39,87,37,"options"],[96,46,87,44],[96,48,87,46],[97,4,88,4],[97,8,88,8,"state"],[97,13,88,13],[97,17,88,17],[97,21,88,21],[97,23,88,23],[98,6,89,8],[98,12,89,14,"Error"],[98,17,89,19],[98,18,89,20],[98,97,89,99],[98,98,89,100],[99,4,90,4],[100,4,91,4],[100,8,91,8,"options"],[100,15,91,15],[100,17,91,17],[101,6,92,8],[102,6,93,8,"expo"],[102,10,93,12],[102,11,93,13,"validatePathConfig"],[102,29,93,31],[102,30,93,32,"options"],[102,37,93,39],[102,38,93,40],[103,6,94,8],[104,6,95,8],[105,4,96,4],[106,4,97,4],[107,4,98,4],[107,8,98,8,"cachedNormalizedConfigs"],[107,31,98,31],[107,32,98,32],[107,33,98,33],[107,34,98,34],[107,40,98,39,"options"],[107,47,98,46],[107,67,98,39,"options"],[107,74,98,46],[107,75,98,48,"screens"],[107,82,98,55],[107,85,98,57],[108,6,99,8,"cachedNormalizedConfigs"],[108,29,99,31],[108,32,99,34],[108,33,100,12,"options"],[108,40,100,19],[108,60,100,12,"options"],[108,67,100,19],[108,68,100,21,"screens"],[108,75,100,28],[108,77,101,12,"options"],[108,84,101,19],[108,96,101,12,"options"],[108,103,101,19],[108,104,101,21,"screens"],[108,111,101,28],[108,114,101,31,"createNormalizedConfigs"],[108,137,101,54],[108,138,101,55,"options"],[108,145,101,62],[108,146,101,63,"screens"],[108,153,101,70],[108,154,101,71],[108,157,101,74],[108,158,101,75],[108,159,101,76],[108,160,102,9],[109,4,103,4],[110,4,104,4],[110,8,104,10,"configs"],[110,15,104,17],[110,18,104,20,"cachedNormalizedConfigs"],[110,41,104,43],[110,42,104,44],[110,43,104,45],[110,44,104,46],[111,4,105,4],[111,8,105,8,"path"],[111,12,105,12],[111,15,105,15],[111,18,105,18],[112,4,106,4],[112,8,106,8,"current"],[112,15,106,15],[112,18,106,18,"state"],[112,23,106,23],[113,4,107,4],[113,8,107,10,"allParams"],[113,17,107,19],[113,20,107,22],[113,21,107,23],[113,22,107,24],[114,4,107,25],[114,8,107,25,"_loop"],[114,13,107,25],[114,25,107,25,"_loop"],[114,31,107,25],[114,33,108,20],[115,6,109,8],[115,10,109,12,"index"],[115,15,109,17],[115,18,109,20],[115,25,109,27,"current"],[115,32,109,34],[115,33,109,35,"index"],[115,38,109,40],[115,43,109,45],[115,51,109,53],[115,54,109,56,"current"],[115,61,109,63],[115,62,109,64,"index"],[115,67,109,69],[115,70,109,72],[115,71,109,73],[116,6,110,8],[116,10,110,12,"route"],[116,15,110,17],[116,18,110,20,"current"],[116,25,110,27],[116,26,110,28,"routes"],[116,32,110,34],[116,33,110,35,"index"],[116,38,110,40],[116,39,110,41],[117,6,111,8],[117,10,111,12,"pattern"],[117,17,111,19],[118,6,112,8],[118,10,112,12,"focusedParams"],[118,23,112,25],[119,6,113,8],[119,10,113,14,"focusedRoute"],[119,22,113,26],[119,25,113,29,"getActiveRoute"],[119,40,113,43],[119,41,113,44,"state"],[119,46,113,49],[119,47,113,50],[120,6,114,8],[120,10,114,12,"currentOptions"],[120,24,114,26],[120,27,114,29,"configs"],[120,34,114,36],[121,6,115,8],[122,6,116,8],[122,10,116,14,"nestedRouteNames"],[122,26,116,30],[122,29,116,33],[122,31,116,35],[123,6,117,8],[123,10,117,12,"hasNext"],[123,17,117,19],[123,20,117,22],[123,24,117,26],[124,6,118,8],[124,13,118,15,"route"],[124,18,118,20],[124,19,118,21,"name"],[124,23,118,25],[124,27,118,29,"currentOptions"],[124,41,118,43],[124,45,118,47,"hasNext"],[124,52,118,54],[124,54,118,56],[125,8,119,12,"pattern"],[125,15,119,19],[125,18,119,22,"currentOptions"],[125,32,119,36],[125,33,119,37,"route"],[125,38,119,42],[125,39,119,43,"name"],[125,43,119,47],[125,44,119,48],[125,45,119,49,"pattern"],[125,52,119,56],[126,8,120,12,"nestedRouteNames"],[126,24,120,28],[126,25,120,29,"push"],[126,29,120,33],[126,30,120,34,"route"],[126,35,120,39],[126,36,120,40,"name"],[126,40,120,44],[126,41,120,45],[127,8,121,12],[127,12,121,16,"route"],[127,17,121,21],[127,18,121,22,"params"],[127,24,121,28],[127,26,121,30],[128,10,121,30],[128,14,121,30,"_currentOptions$route"],[128,35,121,30],[129,10,122,16],[129,14,122,22,"stringify"],[129,23,122,31],[129,27,122,31,"_currentOptions$route"],[129,48,122,31],[129,51,122,34,"currentOptions"],[129,65,122,48],[129,66,122,49,"route"],[129,71,122,54],[129,72,122,55,"name"],[129,76,122,59],[129,77,122,60],[129,98,122,34,"_currentOptions$route"],[129,119,122,34],[129,120,122,62,"stringify"],[129,129,122,71],[130,10,123,16],[131,10,124,16],[132,10,125,16],[132,14,125,22,"currentParams"],[132,27,125,35],[132,30,125,38,"expo"],[132,34,125,42],[132,35,125,43,"fixCurrentParams"],[132,51,125,59],[132,52,125,60,"allParams"],[132,61,125,69],[132,63,125,71,"route"],[132,68,125,76],[132,70,125,78,"stringify"],[132,79,125,87],[132,80,125,88],[133,10,126,16],[134,10,127,16],[135,10,128,16],[136,10,129,16],[137,10,130,16],[138,10,131,16],[139,10,132,16],[140,10,133,16],[141,10,134,16],[142,10,135,16],[143,10,136,16],[143,14,136,20,"focusedRoute"],[143,26,136,32],[143,31,136,37,"route"],[143,36,136,42],[143,38,136,44],[144,12,136,44],[144,16,136,44,"_pattern"],[144,24,136,44],[145,12,137,20],[146,12,138,20],[147,12,139,20,"focusedParams"],[147,25,139,33],[147,28,139,33,"Object"],[147,34,139,33],[147,35,139,33,"assign"],[147,41,139,33],[147,46,139,41,"currentParams"],[147,59,139,54],[147,60,139,56],[148,12,140,20],[148,13,140,20,"_pattern"],[148,21,140,20],[148,24,140,20,"pattern"],[148,31,140,27],[148,44,140,20,"_pattern"],[148,52,140,20],[148,53,141,26,"split"],[148,58,141,31],[148,59,141,32],[148,62,141,35],[148,63,141,36],[148,64,142,25,"filter"],[148,70,142,31],[148,71,142,32],[148,81,142,33,"p"],[148,82,142,34],[149,14,142,34],[149,21,142,39,"expo"],[149,25,142,43],[149,26,142,44,"isDynamicPart"],[149,39,142,57],[149,40,142,58,"p"],[149,41,142,59],[149,42,142,60],[150,12,142,60],[151,12,143,24],[152,12,143,24],[152,13,144,25,"forEach"],[152,20,144,32],[152,21,144,33],[152,31,144,34,"p"],[152,32,144,35],[152,34,144,40],[153,14,145,24],[153,18,145,30,"name"],[153,22,145,34],[153,25,145,37,"expo"],[153,29,145,41],[153,30,145,42,"getParamName"],[153,42,145,54],[153,43,145,55,"p"],[153,44,145,56],[153,45,145,57],[154,14,146,24],[155,14,147,24],[155,18,147,28,"focusedParams"],[155,31,147,41],[155,33,147,43],[156,16,148,28],[157,16,149,28],[157,23,149,35,"focusedParams"],[157,36,149,48],[157,37,149,49,"name"],[157,41,149,53],[157,42,149,54],[158,14,150,24],[159,12,151,20],[159,13,151,21],[159,14,151,22],[160,10,152,16],[161,8,153,12],[162,8,154,12],[163,8,155,12],[163,12,155,16],[163,13,155,17,"currentOptions"],[163,27,155,31],[163,28,155,32,"route"],[163,33,155,37],[163,34,155,38,"name"],[163,38,155,42],[163,39,155,43],[163,40,155,44,"screens"],[163,47,155,51],[163,51,155,55,"route"],[163,56,155,60],[163,57,155,61,"state"],[163,62,155,66],[163,67,155,71,"undefined"],[163,76,155,80],[163,78,155,82],[164,10,155,82],[164,14,155,82,"_currentOptions$route2"],[164,36,155,82],[165,10,156,16],[166,10,157,16],[167,10,158,16],[168,10,159,16],[169,10,160,16],[170,10,161,16],[171,10,162,16],[172,10,163,16],[173,10,164,16],[174,10,165,16],[175,10,166,16],[176,10,167,16],[177,10,168,16],[178,10,169,16],[179,10,170,16],[180,10,171,16],[180,14,171,22,"screens"],[180,21,171,29],[180,24,171,32,"currentOptions"],[180,38,171,46],[180,39,171,47,"route"],[180,44,171,52],[180,45,171,53,"name"],[180,49,171,57],[180,50,171,58],[180,51,171,59,"screens"],[180,58,171,66],[181,10,172,16],[182,10,173,16],[183,10,174,16],[183,14,174,22,"targetScreen"],[183,26,174,34],[184,10,175,16],[185,10,176,16,"route"],[185,15,176,21],[185,16,176,22,"params"],[185,22,176,28],[185,26,176,32],[185,34,176,40],[185,38,176,44,"route"],[185,43,176,49],[185,44,176,50,"params"],[185,50,176,56],[185,54,176,60],[185,61,176,67,"route"],[185,66,176,72],[185,67,176,73,"params"],[185,73,176,79],[185,74,176,80,"screen"],[185,80,176,86],[185,85,176,91],[185,93,176,99],[185,96,177,22,"route"],[185,101,177,27],[185,102,177,28,"params"],[185,108,177,34],[185,109,177,35,"screen"],[185,115,177,41],[185,118,178,22],[185,125,178,29],[186,10,179,16],[187,10,180,16],[188,10,181,16],[189,10,182,16],[189,14,182,22,"screen"],[189,20,182,28],[189,23,182,31,"screens"],[189,30,182,38],[189,33,183,22,"screens"],[189,40,183,29],[189,41,183,30,"targetScreen"],[189,53,183,42],[189,54,183,43],[189,57,184,26,"targetScreen"],[189,69,184,38],[189,72,185,26,"Object"],[189,78,185,32],[189,79,185,33,"keys"],[189,83,185,37],[189,84,185,38,"screens"],[189,91,185,45],[189,92,185,46],[189,93,185,47],[189,94,185,48],[189,95,185,49],[189,98,186,22,"undefined"],[189,107,186,31],[190,10,187,16],[190,14,187,20,"screen"],[190,20,187,26],[190,24,187,30,"screens"],[190,31,187,37],[190,36,187,37,"_currentOptions$route2"],[190,58,187,37],[190,61,187,41,"currentOptions"],[190,75,187,55],[190,76,187,56,"route"],[190,81,187,61],[190,82,187,62,"name"],[190,86,187,66],[190,87,187,67],[190,88,187,68,"screens"],[190,95,187,75],[190,108,187,41,"_currentOptions$route2"],[190,130,187,41],[190,131,187,78,"screen"],[190,137,187,84],[190,138,187,85],[190,140,187,87],[191,12,188,20,"route"],[191,17,188,25],[191,20,188,25,"Object"],[191,26,188,25],[191,27,188,25,"assign"],[191,33,188,25],[191,38,188,33,"screens"],[191,45,188,40],[191,46,188,41,"screen"],[191,52,188,47],[191,53,188,48],[192,14,188,50,"name"],[192,18,188,54],[192,20,188,56,"screen"],[192,26,188,62],[193,14,188,64,"key"],[193,17,188,67],[193,19,188,69,"screen"],[194,12,188,75],[194,14,188,77],[195,12,189,20,"currentOptions"],[195,26,189,34],[195,29,189,37,"screens"],[195,36,189,44],[196,10,190,16],[196,11,190,17],[196,17,191,21],[197,12,192,20,"hasNext"],[197,19,192,27],[197,22,192,30],[197,27,192,35],[198,10,193,16],[199,10,194,16],[200,10,195,16],[201,8,196,12],[201,9,196,13],[201,15,197,17],[202,10,198,16,"index"],[202,15,198,21],[202,18,199,20],[202,25,199,27,"route"],[202,30,199,32],[202,31,199,33,"state"],[202,36,199,38],[202,37,199,39,"index"],[202,42,199,44],[202,47,199,49],[202,55,199,57],[202,58,199,60,"route"],[202,63,199,65],[202,64,199,66,"state"],[202,69,199,71],[202,70,199,72,"index"],[202,75,199,77],[202,78,199,80,"route"],[202,83,199,85],[202,84,199,86,"state"],[202,89,199,91],[202,90,199,92,"routes"],[202,96,199,98],[202,97,199,99,"length"],[202,103,199,105],[202,106,199,108],[202,107,199,109],[203,10,200,16],[203,14,200,22,"nextRoute"],[203,23,200,31],[203,26,200,34,"route"],[203,31,200,39],[203,32,200,40,"state"],[203,37,200,45],[203,38,200,46,"routes"],[203,44,200,52],[203,45,200,53,"index"],[203,50,200,58],[203,51,200,59],[204,10,201,16],[204,14,201,22,"nestedConfig"],[204,26,201,34],[204,29,201,37,"currentOptions"],[204,43,201,51],[204,44,201,52,"route"],[204,49,201,57],[204,50,201,58,"name"],[204,54,201,62],[204,55,201,63],[204,56,201,64,"screens"],[204,63,201,71],[205,10,202,16],[206,10,203,16],[206,14,203,20,"nestedConfig"],[206,26,203,32],[206,30,203,36,"nextRoute"],[206,39,203,45],[206,40,203,46,"name"],[206,44,203,50],[206,48,203,54,"nestedConfig"],[206,60,203,66],[206,62,203,68],[207,12,204,20,"route"],[207,17,204,25],[207,20,204,28,"nextRoute"],[207,29,204,37],[208,12,205,20,"currentOptions"],[208,26,205,34],[208,29,205,37,"nestedConfig"],[208,41,205,49],[209,10,206,16],[209,11,206,17],[209,17,207,21],[210,12,208,20],[211,12,209,20,"hasNext"],[211,19,209,27],[211,22,209,30],[211,27,209,35],[212,10,210,16],[213,8,211,12],[214,6,212,8],[215,6,213,8],[215,10,213,12,"pattern"],[215,17,213,19],[215,22,213,24,"undefined"],[215,31,213,33],[215,33,213,35],[216,8,214,12,"pattern"],[216,15,214,19],[216,18,214,22,"nestedRouteNames"],[216,34,214,38],[216,35,214,39,"join"],[216,39,214,43],[216,40,214,44],[216,43,214,47],[216,44,214,48],[217,6,215,8],[218,6,216,8],[218,10,216,12,"currentOptions"],[218,24,216,26],[218,25,216,27,"route"],[218,30,216,32],[218,31,216,33,"name"],[218,35,216,37],[218,36,216,38],[218,41,216,43,"undefined"],[218,50,216,52],[218,52,216,54],[219,8,216,54],[219,12,216,54,"_configs$route$name"],[219,31,216,54],[220,8,217,12],[221,8,218,12,"path"],[221,12,218,16],[221,16,218,20,"expo"],[221,20,218,24],[221,21,218,25,"getPathWithConventionsCollapsed"],[221,52,218,56],[221,53,218,56,"Object"],[221,59,218,56],[221,60,218,56,"assign"],[221,66,218,56],[221,71,219,19,"options"],[221,78,219,26],[222,10,220,16,"pattern"],[222,17,220,23],[222,19,220,16,"pattern"],[222,26,220,23],[223,10,221,16,"route"],[223,15,221,21],[223,17,221,16,"route"],[223,22,221,21],[224,10,222,16,"params"],[224,16,222,22],[224,18,222,24,"allParams"],[224,27,222,33],[225,10,223,16,"initialRouteName"],[225,26,223,32],[225,29,223,32,"_configs$route$name"],[225,48,223,32],[225,51,223,34,"configs"],[225,58,223,41],[225,59,223,42,"route"],[225,64,223,47],[225,65,223,48,"name"],[225,69,223,52],[225,70,223,53],[225,91,223,34,"_configs$route$name"],[225,110,223,34],[225,111,223,55,"initialRouteName"],[226,8,223,71],[226,10,224,13],[226,11,224,14],[227,8,225,12],[228,8,226,12],[229,8,227,12],[230,8,228,12],[231,8,229,12],[232,8,230,12],[233,8,231,12],[234,8,232,12],[235,8,233,12],[236,8,234,12],[237,8,235,12],[238,8,236,12],[239,8,237,12],[240,8,238,12],[241,8,239,12],[242,8,240,12],[243,8,241,12],[244,8,242,12],[245,8,243,12],[246,8,244,12],[247,8,245,12],[248,8,246,12],[249,8,247,12],[250,8,248,12],[251,8,249,12],[252,8,250,12],[253,8,251,12],[254,6,252,8],[254,7,252,9],[254,13,253,13],[254,17,253,17],[254,18,253,18,"route"],[254,23,253,23],[254,24,253,24,"name"],[254,28,253,28],[254,29,253,29,"startsWith"],[254,39,253,39],[254,40,253,40],[254,43,253,43],[254,44,253,44],[254,46,253,46],[255,8,254,12,"path"],[255,12,254,16],[255,16,254,20,"encodeURIComponent"],[255,34,254,38],[255,35,254,39,"route"],[255,40,254,44],[255,41,254,45,"name"],[255,45,254,49],[255,46,254,50],[256,6,255,8],[257,6,256,8],[258,6,257,8],[258,10,257,12],[258,11,257,13,"focusedParams"],[258,24,257,26],[258,26,257,28],[259,8,258,12,"focusedParams"],[259,21,258,25],[259,24,258,28,"focusedRoute"],[259,36,258,40],[259,37,258,41,"params"],[259,43,258,47],[260,6,259,8],[261,6,260,8],[261,10,260,12,"route"],[261,15,260,17],[261,16,260,18,"state"],[261,21,260,23],[261,23,260,25],[262,8,261,12,"path"],[262,12,261,16],[262,16,261,20],[262,19,261,23],[263,6,262,8],[263,7,262,9],[263,13,263,13],[263,17,263,17,"focusedParams"],[263,30,263,30],[263,32,263,32],[264,8,264,12],[264,13,264,17],[264,17,264,23,"param"],[264,22,264,28],[264,26,264,32,"focusedParams"],[264,39,264,45],[264,41,264,47],[265,10,265,16],[265,14,265,20,"focusedParams"],[265,27,265,33],[265,28,265,34,"param"],[265,33,265,39],[265,34,265,40],[265,39,265,45],[265,50,265,56],[265,52,265,58],[266,12,266,20],[267,12,267,20],[267,19,267,27,"focusedParams"],[267,32,267,40],[267,33,267,41,"param"],[267,38,267,46],[267,39,267,47],[268,10,268,16],[269,8,269,12],[270,8,270,12],[271,8,271,12],[271,15,271,19,"focusedParams"],[271,28,271,32],[271,29,271,33],[271,32,271,36],[271,33,271,37],[272,8,272,12],[273,8,273,12],[273,12,273,18,"query"],[273,17,273,23],[273,20,273,26,"queryString"],[273,31,273,37],[273,32,273,38,"stringify"],[273,41,273,47],[273,42,273,48,"focusedParams"],[273,55,273,61],[273,57,273,63],[274,10,273,65,"sort"],[274,14,273,69],[274,16,273,71],[275,8,273,77],[275,9,273,78],[275,10,273,79],[276,8,274,12],[276,12,274,16,"query"],[276,17,274,21],[276,19,274,23],[277,10,275,16,"path"],[277,14,275,20],[277,18,275,24],[277,22,275,28,"query"],[277,27,275,33],[277,29,275,35],[278,8,276,12],[279,6,277,8],[280,6,278,8,"current"],[280,13,278,15],[280,16,278,18,"route"],[280,21,278,23],[280,22,278,24,"state"],[280,27,278,29],[281,4,279,4],[281,5,279,5],[282,4,108,4],[282,11,108,11,"current"],[282,18,108,18],[283,6,108,18,"_loop"],[283,11,108,18],[284,4,108,18],[285,4,280,4],[286,4,281,4,"path"],[286,8,281,8],[286,11,281,11,"path"],[286,15,281,15],[286,16,281,16,"replace"],[286,23,281,23],[286,24,281,24],[286,30,281,30],[286,32,281,32],[286,35,281,35],[286,36,281,36],[287,4,282,4,"path"],[287,8,282,8],[287,11,282,11,"path"],[287,15,282,15],[287,16,282,16,"length"],[287,22,282,22],[287,25,282,25],[287,26,282,26],[287,29,282,29,"path"],[287,33,282,33],[287,34,282,34,"replace"],[287,41,282,41],[287,42,282,42],[287,47,282,47],[287,49,282,49],[287,51,282,51],[287,52,282,52],[287,55,282,55,"path"],[287,59,282,59],[288,4,283,4],[289,4,284,4],[289,8,284,8,"options"],[289,15,284,15],[289,27,284,8,"options"],[289,34,284,15],[289,35,284,17,"path"],[289,39,284,21],[289,41,284,23],[290,6,285,8,"path"],[290,10,285,12],[290,13,285,15,"joinPaths"],[290,22,285,24],[290,23,285,25,"options"],[290,30,285,32],[290,31,285,33,"path"],[290,35,285,37],[290,37,285,39,"path"],[290,41,285,43],[290,42,285,44],[291,4,286,4],[292,4,287,4],[293,4,288,4,"path"],[293,8,288,8],[293,11,288,11,"expo"],[293,15,288,15],[293,16,288,16,"appendBaseUrl"],[293,29,288,29],[293,30,288,30,"path"],[293,34,288,34],[293,35,288,35],[294,4,289,4],[294,8,289,8,"allParams"],[294,17,289,17],[294,18,289,18],[294,21,289,21],[294,22,289,22],[294,24,289,24],[295,6,290,8,"path"],[295,10,290,12],[295,14,290,16],[295,18,290,20,"allParams"],[295,27,290,29],[295,28,290,30],[295,31,290,33],[295,32,290,34],[295,34,290,36],[296,4,291,4],[297,4,292,4],[298,4,293,4],[299,4,294,4],[299,11,294,11],[300,6,294,13,"path"],[300,10,294,17],[300,12,294,13,"path"],[300,16,294,17],[301,6,294,19,"params"],[301,12,294,25],[301,14,294,27,"allParams"],[302,4,294,37],[302,5,294,38],[303,4,295,4],[304,2,296,0],[305,2,297,0],[306,2,298,0],[306,6,298,6,"joinPaths"],[306,15,298,15],[306,18,298,18],[306,27,298,6,"joinPaths"],[306,36,298,15,"joinPaths"],[306,37,298,15],[307,4,298,15],[307,8,298,15,"_ref"],[307,12,298,15],[308,4,298,15],[308,13,298,15,"_len"],[308,17,298,15],[308,20,298,15,"arguments"],[308,29,298,15],[308,30,298,15,"length"],[308,36,298,15],[308,38,298,22,"paths"],[308,43,298,27],[308,50,298,27,"Array"],[308,55,298,27],[308,56,298,27,"_len"],[308,60,298,27],[308,63,298,27,"_key"],[308,67,298,27],[308,73,298,27,"_key"],[308,77,298,27],[308,80,298,27,"_len"],[308,84,298,27],[308,86,298,27,"_key"],[308,90,298,27],[309,6,298,22,"paths"],[309,11,298,27],[309,12,298,27,"_key"],[309,16,298,27],[309,20,298,27,"arguments"],[309,29,298,27],[309,30,298,27,"_key"],[309,34,298,27],[310,4,298,27],[311,4,298,27],[311,11,298,32],[311,12,298,32,"_ref"],[311,16,298,32],[311,21,298,34],[311,23,299,5,"concat"],[311,29,299,11],[311,30,299,11,"apply"],[311,35,299,11],[311,36,299,11,"_ref"],[311,40,299,11],[311,42,299,11,"_toConsumableArray"],[311,60,299,11],[311,61,299,15,"paths"],[311,66,299,20],[311,67,299,21,"map"],[311,70,299,24],[311,71,299,25],[311,81,299,26,"p"],[311,82,299,27],[312,6,299,27],[312,13,299,32,"p"],[312,14,299,33],[312,15,299,34,"split"],[312,20,299,39],[312,21,299,40],[312,24,299,43],[312,25,299,44],[313,4,299,44],[313,6,299,45],[313,8,299,46],[313,9,300,5,"filter"],[313,15,300,11],[313,16,300,12,"Boolean"],[313,23,300,19],[313,24,300,20],[313,25,301,5,"join"],[313,29,301,9],[313,30,301,10],[313,33,301,13],[313,34,301,14],[314,2,301,14],[315,2,302,0],[315,6,302,6,"createConfigItem"],[315,22,302,22],[315,25,302,25],[315,34,302,6,"createConfigItem"],[315,50,302,22,"createConfigItem"],[315,51,302,26,"config"],[315,57,302,32],[315,59,302,34,"parentPattern"],[315,72,302,47],[315,74,302,52],[316,4,303,4],[316,8,303,8],[316,15,303,15,"config"],[316,21,303,21],[316,26,303,26],[316,34,303,34],[316,36,303,36],[317,6,304,8],[318,6,305,8],[318,10,305,14,"pattern"],[318,19,305,21],[318,22,305,24,"parentPattern"],[318,35,305,37],[318,38,305,40,"joinPaths"],[318,47,305,49],[318,48,305,50,"parentPattern"],[318,61,305,63],[318,63,305,65,"config"],[318,69,305,71],[318,70,305,72],[318,73,305,75,"config"],[318,79,305,81],[319,6,306,8],[319,13,306,15],[320,8,306,17,"pattern"],[320,15,306,24],[320,17,306,17,"pattern"],[321,6,306,25],[321,7,306,26],[322,4,307,4],[323,4,308,4],[323,8,308,8,"config"],[323,14,308,14],[323,15,308,15,"exact"],[323,20,308,20],[323,24,308,24,"config"],[323,30,308,30],[323,31,308,31,"path"],[323,35,308,35],[323,40,308,40,"undefined"],[323,49,308,49],[323,51,308,51],[324,6,309,8],[324,12,309,14],[324,16,309,18,"Error"],[324,21,309,23],[324,22,309,24],[324,172,309,174],[324,173,309,175],[325,4,310,4],[326,4,311,4],[327,4,312,4],[328,4,313,4],[328,8,313,10,"pattern"],[328,15,313,17],[328,18,313,20,"config"],[328,24,313,26],[328,25,313,27,"exact"],[328,30,313,32],[328,35,313,37],[328,39,313,41],[328,42,313,44,"joinPaths"],[328,51,313,53],[328,52,313,54,"parentPattern"],[328,65,313,67],[328,69,313,71],[328,71,313,73],[328,73,313,75,"config"],[328,79,313,81],[328,80,313,82,"path"],[328,84,313,86],[328,88,313,90],[328,90,313,92],[328,91,313,93],[328,94,313,96,"config"],[328,100,313,102],[328,101,313,103,"path"],[328,105,313,107],[328,109,313,111],[328,111,313,113],[329,4,314,4],[329,8,314,10,"screens"],[329,15,314,17],[329,18,314,20,"config"],[329,24,314,26],[329,25,314,27,"screens"],[329,32,314,34],[329,35,314,37,"createNormalizedConfigs"],[329,58,314,60],[329,59,314,61,"config"],[329,65,314,67],[329,66,314,68,"screens"],[329,73,314,75],[329,75,314,77,"pattern"],[329,82,314,84],[329,83,314,85],[329,86,314,88,"undefined"],[329,95,314,97],[330,4,315,4],[330,11,315,11],[331,6,316,8],[332,6,317,8,"pattern"],[332,13,317,15],[332,15,317,17,"pattern"],[332,22,317,24],[332,42,317,17,"pattern"],[332,49,317,24],[332,50,317,26,"split"],[332,55,317,31],[332,56,317,32],[332,59,317,35],[332,60,317,36],[332,61,317,37,"filter"],[332,67,317,43],[332,68,317,44,"Boolean"],[332,75,317,51],[332,76,317,52],[332,77,317,53,"join"],[332,81,317,57],[332,82,317,58],[332,85,317,61],[332,86,317,62],[333,6,318,8,"stringify"],[333,15,318,17],[333,17,318,19,"config"],[333,23,318,25],[333,24,318,26,"stringify"],[333,33,318,35],[334,6,319,8,"screens"],[334,13,319,15],[334,15,319,8,"screens"],[335,4,320,4],[335,5,320,5],[336,2,321,0],[336,3,321,1],[337,2,322,0],[337,6,322,6,"createNormalizedConfigs"],[337,29,322,29],[337,32,322,32],[337,41,322,6,"createNormalizedConfigs"],[337,64,322,29,"createNormalizedConfigs"],[337,65,322,33,"options"],[337,72,322,40],[337,74,322,42,"pattern"],[337,81,322,49],[338,4,322,49],[338,11,322,54,"Object"],[338,17,322,60],[338,18,322,61,"fromEntries"],[338,29,322,72],[338,30,322,73,"Object"],[338,36,322,79],[338,37,322,80,"entries"],[338,44,322,87],[338,45,322,88,"options"],[338,52,322,95],[338,53,322,96],[338,54,322,97,"map"],[338,57,322,100],[338,58,322,101],[338,68,322,101,"_ref2"],[338,73,322,101],[338,75,322,116],[339,6,322,116],[339,10,322,116,"_ref3"],[339,15,322,116],[339,18,322,116,"_slicedToArray"],[339,32,322,116],[339,33,322,116,"_ref2"],[339,38,322,116],[340,8,322,103,"name"],[340,12,322,107],[340,15,322,107,"_ref3"],[340,20,322,107],[341,8,322,109,"c"],[341,9,322,110],[341,12,322,110,"_ref3"],[341,17,322,110],[342,6,323,4],[342,10,323,10,"result"],[342,16,323,16],[342,19,323,19,"createConfigItem"],[342,35,323,35],[342,36,323,36,"c"],[342,37,323,37],[342,39,323,39,"pattern"],[342,46,323,46],[342,47,323,47],[343,6,324,4],[343,13,324,11],[343,14,324,12,"name"],[343,18,324,16],[343,20,324,18,"result"],[343,26,324,24],[343,27,324,25],[344,4,325,0],[344,5,325,1],[344,6,325,2],[344,7,325,3],[345,2,325,3],[346,2,326,0],[346,11,326,9,"appendBaseUrl"],[346,24,326,22,"appendBaseUrl"],[346,25,326,23,"path"],[346,29,326,27],[346,31,326,66],[347,4,326,66],[347,8,326,29,"baseUrl"],[347,15,326,36],[347,18,326,36,"arguments"],[347,27,326,36],[347,28,326,36,"length"],[347,34,326,36],[347,42,326,36,"arguments"],[347,51,326,36],[347,59,326,36,"undefined"],[347,68,326,36],[347,71,326,36,"arguments"],[347,80,326,36],[348,4,327,4],[348,8,327,8,"process"],[348,15,327,15],[348,16,327,16,"env"],[348,19,327,19],[348,20,327,20,"NODE_ENV"],[348,28,327,28],[348,33,327,33],[348,46,327,46],[348,48,327,48],[349,6,328,8],[349,10,328,12,"baseUrl"],[349,17,328,19],[349,19,328,21],[350,8,329,12],[350,15,329,19],[350,19,329,23,"baseUrl"],[350,26,329,30],[350,27,329,31,"replace"],[350,34,329,38],[350,35,329,39],[350,41,329,45],[350,43,329,47],[350,45,329,49],[350,46,329,50],[350,47,329,51,"replace"],[350,54,329,58],[350,55,329,59],[350,60,329,64],[350,62,329,66],[350,64,329,68],[350,65,329,69],[350,68,329,72,"path"],[350,72,329,76],[350,74,329,78],[351,6,330,8],[352,4,331,4],[353,4,332,4],[353,11,332,11,"path"],[353,15,332,15],[354,2,333,0],[355,0,333,1],[355,3]],"functionMap":{"names":["<global>","<anonymous>","desc.get","ownKeys","getActiveRoute","getPathFromState","getPathDataFromState","pattern.split.filter$argument_0","pattern.split.filter.forEach$argument_0","joinPaths","paths.map$argument_0","createConfigItem","createNormalizedConfigs","Object.entries.map$argument_0","appendBaseUrl"],"mappings":"AAA;0ECC;sCCI,2BD;CDG,KC;CDG;gFCC;CDE,IC;CDE;mDCC;kBEC;gDFC;SEI;KFE;CDQ;uBIQ;CJQ;AKkC;CLE;AMC;gCCuD,4BD;iCEE;qBFO;CNiJ;kBSE;yBCC,mBD;cTE;yBWC;CXmB;gCYC,qEC;CDG,EZ;AcC;CdO"},"hasCjsExports":true},"type":"js/module"}]}