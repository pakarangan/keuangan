{"dependencies":[{"name":"@babel/runtime/helpers/asyncToGenerator","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"YisBBiy2Xm9DEVdFebZ2nbgAHBo=","exportNames":["*"],"imports":1}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"],"imports":1}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":46,"index":125}}],"key":"7dk3JQGwGYesJt8OOG3pkBz+dtE=","exportNames":["*"],"imports":1}},{"name":"./Font.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":126},"end":{"line":3,"column":43,"index":169}}],"key":"iwvcxaVgfIXdww6iPrKSgtcaZy8=","exportNames":["*"],"imports":1}},{"name":"./FontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":70,"index":240}}],"key":"ubgLNxOkixzH8pVapAwap9wQ8XU=","exportNames":["*"],"imports":1}},{"name":"./memory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}}],"key":"wlrMBDc1MVhnZOig0xhYu83J328=","exportNames":["*"],"imports":1}},{"name":"./server","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":366},"end":{"line":6,"column":46,"index":412}}],"key":"QinwpQMs5c8GY+myVdgXEzx55Tw=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  exports.isLoaded = isLoaded;\n  exports.getLoadedFonts = getLoadedFonts;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function () {\n      return _FontTypes.FontDisplay;\n    }\n  });\n  var _babelRuntimeHelpersAsyncToGenerator = require(_dependencyMap[0], \"@babel/runtime/helpers/asyncToGenerator\");\n  var _asyncToGenerator = _interopDefault(_babelRuntimeHelpersAsyncToGenerator);\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _ExpoFontLoader = require(_dependencyMap[2], \"./ExpoFontLoader\");\n  var ExpoFontLoader = _interopDefault(_ExpoFontLoader);\n  var _FontTypes = require(_dependencyMap[3], \"./Font.types\");\n  var _FontLoader = require(_dependencyMap[4], \"./FontLoader\");\n  var _memory = require(_dependencyMap[5], \"./memory\");\n  var _server = require(_dependencyMap[6], \"./server\");\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      return (0, _memory.isLoadedInCache)(fontFamily) || !!ExpoFontLoader.default.isLoaded(fontFamily);\n    }\n    return (0, _memory.isLoadedNative)(fontFamily);\n  }\n  /**\n   * Synchronously get all the fonts that have been loaded.\n   * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n   *\n   * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n   */\n  function getLoadedFonts() {\n    return ExpoFontLoader.default.getLoadedFonts();\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in _memory.loadPromises;\n  }\n  // @needsAudit\n  /**\n   * An efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * > **Note**: We recommend using the [config plugin](#configuration-in-appjsonappconfigjs) instead whenever possible.\n   *\n   * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n   * with React Native `Text` elements.\n   * @param source The font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(fontFamilyOrFontMap, source) {\n    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n    // standard Expo SDK style guide.\n    var isServer = _expoModulesCore.Platform.OS === 'web' && typeof window === 'undefined';\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      var fontMap = fontFamilyOrFontMap;\n      var names = Object.keys(fontMap);\n      if (isServer) {\n        names.map(function (name) {\n          return (0, _server.registerStaticFont)(name, fontMap[name]);\n        });\n        return Promise.resolve();\n      }\n      return Promise.all(names.map(function (name) {\n        return loadFontInNamespaceAsync(name, fontMap[name]);\n      })).then(function () {});\n    }\n    if (isServer) {\n      (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);\n      return Promise.resolve();\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  function loadFontInNamespaceAsync(_x, _x2) {\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   * @hidden\n   */\n  function _loadFontInNamespaceAsync() {\n    _loadFontInNamespaceAsync = (0, _asyncToGenerator.default)(function* (fontFamily, source) {\n      if (!source) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n      }\n      // we consult the native module to see if the font is already loaded\n      // this is slower than checking the cache but can help avoid loading the same font n times\n      if (isLoaded(fontFamily)) {\n        return;\n      }\n      if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n        return _memory.loadPromises[fontFamily];\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      var asset = (0, _FontLoader.getAssetForSource)(source);\n      _memory.loadPromises[fontFamily] = (0, _asyncToGenerator.default)(function* () {\n        try {\n          yield (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n          (0, _memory.markLoaded)(fontFamily);\n        } finally {\n          delete _memory.loadPromises[fontFamily];\n        }\n      })();\n      yield _memory.loadPromises[fontFamily];\n    });\n    return _loadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function unloadAllAsync() {\n    return _unloadAllAsync.apply(this, arguments);\n  } // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * This is used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   * @hidden\n   */\n  function _unloadAllAsync() {\n    _unloadAllAsync = (0, _asyncToGenerator.default)(function* () {\n      if (!ExpoFontLoader.default.unloadAllAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n      }\n      if (Object.keys(_memory.loadPromises).length) {\n        throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);\n      }\n      (0, _memory.purgeCache)();\n      yield ExpoFontLoader.default.unloadAllAsync();\n    });\n    return _unloadAllAsync.apply(this, arguments);\n  }\n  function unloadAsync(_x3, _x4) {\n    return _unloadAsync.apply(this, arguments);\n  }\n  function _unloadAsync() {\n    _unloadAsync = (0, _asyncToGenerator.default)(function* (fontFamilyOrFontMap, options) {\n      if (!ExpoFontLoader.default.unloadAsync) {\n        throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n      }\n      if (typeof fontFamilyOrFontMap === 'object') {\n        if (options) {\n          throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n        }\n        var fontMap = fontFamilyOrFontMap;\n        var names = Object.keys(fontMap);\n        yield Promise.all(names.map(function (name) {\n          return unloadFontInNamespaceAsync(name, fontMap[name]);\n        }));\n        return;\n      }\n      return yield unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n    });\n    return _unloadAsync.apply(this, arguments);\n  }\n  function unloadFontInNamespaceAsync(_x5, _x6) {\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n  function _unloadFontInNamespaceAsync() {\n    _unloadFontInNamespaceAsync = (0, _asyncToGenerator.default)(function* (fontFamily, options) {\n      if (!isLoaded(fontFamily)) {\n        return;\n      } else {\n        (0, _memory.purgeFontFamilyFromCache)(fontFamily);\n      }\n      // Important: we want all callers that concurrently try to load the same font to await the same\n      // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n      // promise in the program, we need to create the promise synchronously without yielding the event\n      // loop from this point.\n      if (!fontFamily) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n      }\n      yield ExpoFontLoader.default.unloadAsync(fontFamily, options);\n    });\n    return _unloadFontInNamespaceAsync.apply(this, arguments);\n  }\n});","lineCount":213,"map":[[12,2,14,0,"exports"],[12,9,14,0],[12,10,14,0,"isLoaded"],[12,18,14,0],[12,21,14,0,"isLoaded"],[12,29,14,0],[13,2,26,0,"exports"],[13,9,26,0],[13,10,26,0,"getLoadedFonts"],[13,24,26,0],[13,27,26,0,"getLoadedFonts"],[13,41,26,0],[14,2,36,0,"exports"],[14,9,36,0],[14,10,36,0,"isLoading"],[14,19,36,0],[14,22,36,0,"isLoading"],[14,31,36,0],[15,2,54,0,"exports"],[15,9,54,0],[15,10,54,0,"loadAsync"],[15,19,54,0],[15,22,54,0,"loadAsync"],[15,31,54,0],[16,2,110,0,"exports"],[16,9,110,0],[16,10,110,0,"unloadAllAsync"],[16,24,110,0],[16,27,110,0,"unloadAllAsync"],[16,41,110,0],[17,2,130,0,"exports"],[17,9,130,0],[17,10,130,0,"unloadAsync"],[17,21,130,0],[17,24,130,0,"unloadAsync"],[17,35,130,0],[18,2,161,0,"Object"],[18,8,161,0],[18,9,161,0,"defineProperty"],[18,23,161,0],[18,24,161,0,"exports"],[18,31,161,0],[19,4,161,0,"enumerable"],[19,14,161,0],[20,4,161,0,"get"],[20,7,161,0],[20,18,161,0,"get"],[20,19,161,0],[21,6,161,0],[21,13,161,9,"FontDisplay"],[21,23,161,20],[21,24,161,20,"FontDisplay"],[21,35,161,20],[22,4,161,20],[23,2,161,20],[24,2,161,23],[24,6,161,23,"_babelRuntimeHelpersAsyncToGenerator"],[24,42,161,23],[24,45,161,23,"require"],[24,52,161,23],[24,53,161,23,"_dependencyMap"],[24,67,161,23],[25,2,161,23],[25,6,161,23,"_asyncToGenerator"],[25,23,161,23],[25,26,161,23,"_interopDefault"],[25,41,161,23],[25,42,161,23,"_babelRuntimeHelpersAsyncToGenerator"],[25,78,161,23],[26,2,1,0],[26,6,1,0,"_expoModulesCore"],[26,22,1,0],[26,25,1,0,"require"],[26,32,1,0],[26,33,1,0,"_dependencyMap"],[26,47,1,0],[27,2,2,0],[27,6,2,0,"_ExpoFontLoader"],[27,21,2,0],[27,24,2,0,"require"],[27,31,2,0],[27,32,2,0,"_dependencyMap"],[27,46,2,0],[28,2,2,0],[28,6,2,0,"ExpoFontLoader"],[28,20,2,0],[28,23,2,0,"_interopDefault"],[28,38,2,0],[28,39,2,0,"_ExpoFontLoader"],[28,54,2,0],[29,2,3,0],[29,6,3,0,"_FontTypes"],[29,16,3,0],[29,19,3,0,"require"],[29,26,3,0],[29,27,3,0,"_dependencyMap"],[29,41,3,0],[30,2,4,0],[30,6,4,0,"_FontLoader"],[30,17,4,0],[30,20,4,0,"require"],[30,27,4,0],[30,28,4,0,"_dependencyMap"],[30,42,4,0],[31,2,5,0],[31,6,5,0,"_memory"],[31,13,5,0],[31,16,5,0,"require"],[31,23,5,0],[31,24,5,0,"_dependencyMap"],[31,38,5,0],[32,2,6,0],[32,6,6,0,"_server"],[32,13,6,0],[32,16,6,0,"require"],[32,23,6,0],[32,24,6,0,"_dependencyMap"],[32,38,6,0],[33,2,7,0],[34,2,8,0],[35,0,9,0],[36,0,10,0],[37,0,11,0],[38,0,12,0],[39,0,13,0],[40,2,14,7],[40,11,14,16,"isLoaded"],[40,19,14,24,"isLoaded"],[40,20,14,25,"fontFamily"],[40,30,14,35],[40,32,14,37],[41,4,15,4],[41,8,15,8,"Platform"],[41,24,15,16],[41,25,15,16,"Platform"],[41,33,15,16],[41,34,15,17,"OS"],[41,36,15,19],[41,41,15,24],[41,46,15,29],[41,48,15,31],[42,6,16,8],[42,13,16,15],[42,17,16,15,"isLoadedInCache"],[42,24,16,30],[42,25,16,30,"isLoadedInCache"],[42,40,16,30],[42,42,16,31,"fontFamily"],[42,52,16,41],[42,53,16,42],[42,57,16,46],[42,58,16,47],[42,59,16,48,"ExpoFontLoader"],[42,73,16,62],[42,74,16,62,"default"],[42,81,16,62],[42,82,16,63,"isLoaded"],[42,90,16,71],[42,91,16,72,"fontFamily"],[42,101,16,82],[42,102,16,83],[43,4,17,4],[44,4,18,4],[44,11,18,11],[44,15,18,11,"isLoadedNative"],[44,22,18,25],[44,23,18,25,"isLoadedNative"],[44,37,18,25],[44,39,18,26,"fontFamily"],[44,49,18,36],[44,50,18,37],[45,2,19,0],[46,2,20,0],[47,0,21,0],[48,0,22,0],[49,0,23,0],[50,0,24,0],[51,0,25,0],[52,2,26,7],[52,11,26,16,"getLoadedFonts"],[52,25,26,30,"getLoadedFonts"],[52,26,26,30],[52,28,26,33],[53,4,27,4],[53,11,27,11,"ExpoFontLoader"],[53,25,27,25],[53,26,27,25,"default"],[53,33,27,25],[53,34,27,26,"getLoadedFonts"],[53,48,27,40],[53,49,27,41],[53,50,27,42],[54,2,28,0],[55,2,29,0],[56,2,30,0],[57,0,31,0],[58,0,32,0],[59,0,33,0],[60,0,34,0],[61,0,35,0],[62,2,36,7],[62,11,36,16,"isLoading"],[62,20,36,25,"isLoading"],[62,21,36,26,"fontFamily"],[62,31,36,36],[62,33,36,38],[63,4,37,4],[63,11,37,11,"fontFamily"],[63,21,37,21],[63,25,37,25,"loadPromises"],[63,32,37,37],[63,33,37,37,"loadPromises"],[63,45,37,37],[64,2,38,0],[65,2,39,0],[66,2,40,0],[67,0,41,0],[68,0,42,0],[69,0,43,0],[70,0,44,0],[71,0,45,0],[72,0,46,0],[73,0,47,0],[74,0,48,0],[75,0,49,0],[76,0,50,0],[77,0,51,0],[78,0,52,0],[79,0,53,0],[80,2,54,7],[80,11,54,16,"loadAsync"],[80,20,54,25,"loadAsync"],[80,21,54,26,"fontFamilyOrFontMap"],[80,40,54,45],[80,42,54,47,"source"],[80,48,54,53],[80,50,54,55],[81,4,55,4],[82,4,56,4],[83,4,57,4],[84,4,58,4],[84,8,58,10,"isServer"],[84,16,58,18],[84,19,58,21,"Platform"],[84,35,58,29],[84,36,58,29,"Platform"],[84,44,58,29],[84,45,58,30,"OS"],[84,47,58,32],[84,52,58,37],[84,57,58,42],[84,61,58,46],[84,68,58,53,"window"],[84,74,58,59],[84,79,58,64],[84,90,58,75],[85,4,59,4],[85,8,59,8],[85,15,59,15,"fontFamilyOrFontMap"],[85,34,59,34],[85,39,59,39],[85,47,59,47],[85,49,59,49],[86,6,60,8],[86,10,60,12,"source"],[86,16,60,18],[86,18,60,20],[87,8,61,12],[87,15,61,19,"Promise"],[87,22,61,26],[87,23,61,27,"reject"],[87,29,61,33],[87,30,61,34],[87,34,61,38,"CodedError"],[87,50,61,48],[87,51,61,48,"CodedError"],[87,61,61,48],[87,62,61,49],[87,76,61,63],[87,78,61,65],[87,132,61,119,"source"],[87,138,61,125],[87,244,61,231],[87,245,61,232],[87,246,61,233],[88,6,62,8],[89,6,63,8],[89,10,63,14,"fontMap"],[89,17,63,21],[89,20,63,24,"fontFamilyOrFontMap"],[89,39,63,43],[90,6,64,8],[90,10,64,14,"names"],[90,15,64,19],[90,18,64,22,"Object"],[90,24,64,28],[90,25,64,29,"keys"],[90,29,64,33],[90,30,64,34,"fontMap"],[90,37,64,41],[90,38,64,42],[91,6,65,8],[91,10,65,12,"isServer"],[91,18,65,20],[91,20,65,22],[92,8,66,12,"names"],[92,13,66,17],[92,14,66,18,"map"],[92,17,66,21],[92,18,66,22],[92,28,66,23,"name"],[92,32,66,27],[93,10,66,27],[93,17,66,32],[93,21,66,32,"registerStaticFont"],[93,28,66,50],[93,29,66,50,"registerStaticFont"],[93,47,66,50],[93,49,66,51,"name"],[93,53,66,55],[93,55,66,57,"fontMap"],[93,62,66,64],[93,63,66,65,"name"],[93,67,66,69],[93,68,66,70],[93,69,66,71],[94,8,66,71],[94,10,66,72],[95,8,67,12],[95,15,67,19,"Promise"],[95,22,67,26],[95,23,67,27,"resolve"],[95,30,67,34],[95,31,67,35],[95,32,67,36],[96,6,68,8],[97,6,69,8],[97,13,69,15,"Promise"],[97,20,69,22],[97,21,69,23,"all"],[97,24,69,26],[97,25,69,27,"names"],[97,30,69,32],[97,31,69,33,"map"],[97,34,69,36],[97,35,69,37],[97,45,69,38,"name"],[97,49,69,42],[98,8,69,42],[98,15,69,47,"loadFontInNamespaceAsync"],[98,39,69,71],[98,40,69,72,"name"],[98,44,69,76],[98,46,69,78,"fontMap"],[98,53,69,85],[98,54,69,86,"name"],[98,58,69,90],[98,59,69,91],[98,60,69,92],[99,6,69,92],[99,8,69,93],[99,9,69,94],[99,10,69,95,"then"],[99,14,69,99],[99,15,69,100],[99,27,69,106],[99,28,69,108],[99,29,69,109],[99,30,69,110],[100,4,70,4],[101,4,71,4],[101,8,71,8,"isServer"],[101,16,71,16],[101,18,71,18],[102,6,72,8],[102,10,72,8,"registerStaticFont"],[102,17,72,26],[102,18,72,26,"registerStaticFont"],[102,36,72,26],[102,38,72,27,"fontFamilyOrFontMap"],[102,57,72,46],[102,59,72,48,"source"],[102,65,72,54],[102,66,72,55],[103,6,73,8],[103,13,73,15,"Promise"],[103,20,73,22],[103,21,73,23,"resolve"],[103,28,73,30],[103,29,73,31],[103,30,73,32],[104,4,74,4],[105,4,75,4],[105,11,75,11,"loadFontInNamespaceAsync"],[105,35,75,35],[105,36,75,36,"fontFamilyOrFontMap"],[105,55,75,55],[105,57,75,57,"source"],[105,63,75,63],[105,64,75,64],[106,2,76,0],[107,2,76,1],[107,11,77,15,"loadFontInNamespaceAsync"],[107,35,77,39,"loadFontInNamespaceAsync"],[107,36,77,39,"_x"],[107,38,77,39],[107,40,77,39,"_x2"],[107,43,77,39],[108,4,77,39],[108,11,77,39,"_loadFontInNamespaceAsync"],[108,36,77,39],[108,37,77,39,"apply"],[108,42,77,39],[108,49,77,39,"arguments"],[108,58,77,39],[109,2,77,39],[109,4,105,0],[110,2,106,0],[111,0,107,0],[112,0,108,0],[113,0,109,0],[114,2,106,0],[114,11,106,0,"_loadFontInNamespaceAsync"],[114,37,106,0],[115,4,106,0,"_loadFontInNamespaceAsync"],[115,29,106,0],[115,36,106,0,"_asyncToGenerator"],[115,53,106,0],[115,54,106,0,"default"],[115,61,106,0],[115,63,77,0],[115,74,77,40,"fontFamily"],[115,84,77,50],[115,86,77,52,"source"],[115,92,77,58],[115,94,77,60],[116,6,78,4],[116,10,78,8],[116,11,78,9,"source"],[116,17,78,15],[116,19,78,17],[117,8,79,8],[117,14,79,14],[117,18,79,18,"CodedError"],[117,34,79,28],[117,35,79,28,"CodedError"],[117,45,79,28],[117,46,79,29],[117,63,79,46],[117,65,79,48],[117,114,79,97,"fontFamily"],[117,124,79,107],[117,130,79,113,"source"],[117,136,79,119],[117,206,79,189,"fontFamily"],[117,216,79,199],[117,219,79,202],[117,220,79,203],[118,6,80,4],[119,6,81,4],[120,6,82,4],[121,6,83,4],[121,10,83,8,"isLoaded"],[121,18,83,16],[121,19,83,17,"fontFamily"],[121,29,83,27],[121,30,83,28],[121,32,83,30],[122,8,84,8],[123,6,85,4],[124,6,86,4],[124,10,86,8,"loadPromises"],[124,17,86,20],[124,18,86,20,"loadPromises"],[124,30,86,20],[124,31,86,21,"hasOwnProperty"],[124,45,86,35],[124,46,86,36,"fontFamily"],[124,56,86,46],[124,57,86,47],[124,59,86,49],[125,8,87,8],[125,15,87,15,"loadPromises"],[125,22,87,27],[125,23,87,27,"loadPromises"],[125,35,87,27],[125,36,87,28,"fontFamily"],[125,46,87,38],[125,47,87,39],[126,6,88,4],[127,6,89,4],[128,6,90,4],[129,6,91,4],[130,6,92,4],[131,6,93,4],[131,10,93,10,"asset"],[131,15,93,15],[131,18,93,18],[131,22,93,18,"getAssetForSource"],[131,33,93,35],[131,34,93,35,"getAssetForSource"],[131,51,93,35],[131,53,93,36,"source"],[131,59,93,42],[131,60,93,43],[132,6,94,4,"loadPromises"],[132,13,94,16],[132,14,94,16,"loadPromises"],[132,26,94,16],[132,27,94,17,"fontFamily"],[132,37,94,27],[132,38,94,28],[132,41,94,31],[132,45,94,31,"_asyncToGenerator"],[132,62,94,31],[132,63,94,31,"default"],[132,70,94,31],[132,72,94,32],[132,85,94,44],[133,8,95,8],[133,12,95,12],[134,10,96,12],[134,16,96,18],[134,20,96,18,"loadSingleFontAsync"],[134,31,96,37],[134,32,96,37,"loadSingleFontAsync"],[134,51,96,37],[134,53,96,38,"fontFamily"],[134,63,96,48],[134,65,96,50,"asset"],[134,70,96,55],[134,71,96,56],[135,10,97,12],[135,14,97,12,"markLoaded"],[135,21,97,22],[135,22,97,22,"markLoaded"],[135,32,97,22],[135,34,97,23,"fontFamily"],[135,44,97,33],[135,45,97,34],[136,8,98,8],[136,9,98,9],[136,18,99,16],[137,10,100,12],[137,17,100,19,"loadPromises"],[137,24,100,31],[137,25,100,31,"loadPromises"],[137,37,100,31],[137,38,100,32,"fontFamily"],[137,48,100,42],[137,49,100,43],[138,8,101,8],[139,6,102,4],[139,7,102,5],[139,9,102,7],[139,10,102,8],[140,6,103,4],[140,12,103,10,"loadPromises"],[140,19,103,22],[140,20,103,22,"loadPromises"],[140,32,103,22],[140,33,103,23,"fontFamily"],[140,43,103,33],[140,44,103,34],[141,4,104,0],[141,5,104,1],[142,4,104,1],[142,11,104,1,"_loadFontInNamespaceAsync"],[142,36,104,1],[142,37,104,1,"apply"],[142,42,104,1],[142,49,104,1,"arguments"],[142,58,104,1],[143,2,104,1],[144,2,104,1],[144,11,110,22,"unloadAllAsync"],[144,25,110,36,"unloadAllAsync"],[144,26,110,36],[145,4,110,36],[145,11,110,36,"_unloadAllAsync"],[145,26,110,36],[145,27,110,36,"apply"],[145,32,110,36],[145,39,110,36,"arguments"],[145,48,110,36],[146,2,110,36],[146,4,120,0],[147,2,121,0],[148,0,122,0],[149,0,123,0],[150,0,124,0],[151,0,125,0],[152,0,126,0],[153,0,127,0],[154,0,128,0],[155,0,129,0],[156,2,121,0],[156,11,121,0,"_unloadAllAsync"],[156,27,121,0],[157,4,121,0,"_unloadAllAsync"],[157,19,121,0],[157,26,121,0,"_asyncToGenerator"],[157,43,121,0],[157,44,121,0,"default"],[157,51,121,0],[157,53,110,7],[157,66,110,39],[158,6,111,4],[158,10,111,8],[158,11,111,9,"ExpoFontLoader"],[158,25,111,23],[158,26,111,23,"default"],[158,33,111,23],[158,34,111,24,"unloadAllAsync"],[158,48,111,38],[158,50,111,40],[159,8,112,8],[159,14,112,14],[159,18,112,18,"UnavailabilityError"],[159,34,112,37],[159,35,112,37,"UnavailabilityError"],[159,54,112,37],[159,55,112,38],[159,66,112,49],[159,68,112,51],[159,84,112,67],[159,85,112,68],[160,6,113,4],[161,6,114,4],[161,10,114,8,"Object"],[161,16,114,14],[161,17,114,15,"keys"],[161,21,114,19],[161,22,114,20,"loadPromises"],[161,29,114,32],[161,30,114,32,"loadPromises"],[161,42,114,32],[161,43,114,33],[161,44,114,34,"length"],[161,50,114,40],[161,52,114,42],[162,8,115,8],[162,14,115,14],[162,18,115,18,"CodedError"],[162,34,115,28],[162,35,115,28,"CodedError"],[162,45,115,28],[162,46,115,29],[162,58,115,41],[162,60,115,43],[162,112,115,95,"Object"],[162,118,115,101],[162,119,115,102,"keys"],[162,123,115,106],[162,124,115,107,"loadPromises"],[162,131,115,119],[162,132,115,119,"loadPromises"],[162,144,115,119],[162,145,115,120],[162,146,115,121,"join"],[162,150,115,125],[162,151,115,126],[162,155,115,130],[162,156,115,131],[162,158,115,133],[162,159,115,134],[163,6,116,4],[164,6,117,4],[164,10,117,4,"purgeCache"],[164,17,117,14],[164,18,117,14,"purgeCache"],[164,28,117,14],[164,30,117,15],[164,31,117,16],[165,6,118,4],[165,12,118,10,"ExpoFontLoader"],[165,26,118,24],[165,27,118,24,"default"],[165,34,118,24],[165,35,118,25,"unloadAllAsync"],[165,49,118,39],[165,50,118,40],[165,51,118,41],[166,4,119,0],[166,5,119,1],[167,4,119,1],[167,11,119,1,"_unloadAllAsync"],[167,26,119,1],[167,27,119,1,"apply"],[167,32,119,1],[167,39,119,1,"arguments"],[167,48,119,1],[168,2,119,1],[169,2,119,1],[169,11,130,22,"unloadAsync"],[169,22,130,33,"unloadAsync"],[169,23,130,33,"_x3"],[169,26,130,33],[169,28,130,33,"_x4"],[169,31,130,33],[170,4,130,33],[170,11,130,33,"_unloadAsync"],[170,23,130,33],[170,24,130,33,"apply"],[170,29,130,33],[170,36,130,33,"arguments"],[170,45,130,33],[171,2,130,33],[172,2,130,33],[172,11,130,33,"_unloadAsync"],[172,24,130,33],[173,4,130,33,"_unloadAsync"],[173,16,130,33],[173,23,130,33,"_asyncToGenerator"],[173,40,130,33],[173,41,130,33,"default"],[173,48,130,33],[173,50,130,7],[173,61,130,34,"fontFamilyOrFontMap"],[173,80,130,53],[173,82,130,55,"options"],[173,89,130,62],[173,91,130,64],[174,6,131,4],[174,10,131,8],[174,11,131,9,"ExpoFontLoader"],[174,25,131,23],[174,26,131,23,"default"],[174,33,131,23],[174,34,131,24,"unloadAsync"],[174,45,131,35],[174,47,131,37],[175,8,132,8],[175,14,132,14],[175,18,132,18,"UnavailabilityError"],[175,34,132,37],[175,35,132,37,"UnavailabilityError"],[175,54,132,37],[175,55,132,38],[175,66,132,49],[175,68,132,51],[175,81,132,64],[175,82,132,65],[176,6,133,4],[177,6,134,4],[177,10,134,8],[177,17,134,15,"fontFamilyOrFontMap"],[177,36,134,34],[177,41,134,39],[177,49,134,47],[177,51,134,49],[178,8,135,8],[178,12,135,12,"options"],[178,19,135,19],[178,21,135,21],[179,10,136,12],[179,16,136,18],[179,20,136,22,"CodedError"],[179,36,136,32],[179,37,136,32,"CodedError"],[179,47,136,32],[179,48,136,33],[179,62,136,47],[179,64,136,49],[179,119,136,104,"options"],[179,126,136,111],[179,234,136,219],[179,235,136,220],[180,8,137,8],[181,8,138,8],[181,12,138,14,"fontMap"],[181,19,138,21],[181,22,138,24,"fontFamilyOrFontMap"],[181,41,138,43],[182,8,139,8],[182,12,139,14,"names"],[182,17,139,19],[182,20,139,22,"Object"],[182,26,139,28],[182,27,139,29,"keys"],[182,31,139,33],[182,32,139,34,"fontMap"],[182,39,139,41],[182,40,139,42],[183,8,140,8],[183,14,140,14,"Promise"],[183,21,140,21],[183,22,140,22,"all"],[183,25,140,25],[183,26,140,26,"names"],[183,31,140,31],[183,32,140,32,"map"],[183,35,140,35],[183,36,140,36],[183,46,140,37,"name"],[183,50,140,41],[184,10,140,41],[184,17,140,46,"unloadFontInNamespaceAsync"],[184,43,140,72],[184,44,140,73,"name"],[184,48,140,77],[184,50,140,79,"fontMap"],[184,57,140,86],[184,58,140,87,"name"],[184,62,140,91],[184,63,140,92],[184,64,140,93],[185,8,140,93],[185,10,140,94],[185,11,140,95],[186,8,141,8],[187,6,142,4],[188,6,143,4],[188,19,143,17,"unloadFontInNamespaceAsync"],[188,45,143,43],[188,46,143,44,"fontFamilyOrFontMap"],[188,65,143,63],[188,67,143,65,"options"],[188,74,143,72],[188,75,143,73],[189,4,144,0],[189,5,144,1],[190,4,144,1],[190,11,144,1,"_unloadAsync"],[190,23,144,1],[190,24,144,1,"apply"],[190,29,144,1],[190,36,144,1,"arguments"],[190,45,144,1],[191,2,144,1],[192,2,144,1],[192,11,145,15,"unloadFontInNamespaceAsync"],[192,37,145,41,"unloadFontInNamespaceAsync"],[192,38,145,41,"_x5"],[192,41,145,41],[192,43,145,41,"_x6"],[192,46,145,41],[193,4,145,41],[193,11,145,41,"_unloadFontInNamespaceAsync"],[193,38,145,41],[193,39,145,41,"apply"],[193,44,145,41],[193,51,145,41,"arguments"],[193,60,145,41],[194,2,145,41],[195,2,145,41],[195,11,145,41,"_unloadFontInNamespaceAsync"],[195,39,145,41],[196,4,145,41,"_unloadFontInNamespaceAsync"],[196,31,145,41],[196,38,145,41,"_asyncToGenerator"],[196,55,145,41],[196,56,145,41,"default"],[196,63,145,41],[196,65,145,0],[196,76,145,42,"fontFamily"],[196,86,145,52],[196,88,145,54,"options"],[196,95,145,61],[196,97,145,63],[197,6,146,4],[197,10,146,8],[197,11,146,9,"isLoaded"],[197,19,146,17],[197,20,146,18,"fontFamily"],[197,30,146,28],[197,31,146,29],[197,33,146,31],[198,8,147,8],[199,6,148,4],[199,7,148,5],[199,13,149,9],[200,8,150,8],[200,12,150,8,"purgeFontFamilyFromCache"],[200,19,150,32],[200,20,150,32,"purgeFontFamilyFromCache"],[200,44,150,32],[200,46,150,33,"fontFamily"],[200,56,150,43],[200,57,150,44],[201,6,151,4],[202,6,152,4],[203,6,153,4],[204,6,154,4],[205,6,155,4],[206,6,156,4],[206,10,156,8],[206,11,156,9,"fontFamily"],[206,21,156,19],[206,23,156,21],[207,8,157,8],[207,14,157,14],[207,18,157,18,"CodedError"],[207,34,157,28],[207,35,157,28,"CodedError"],[207,45,157,28],[207,46,157,29],[207,63,157,46],[207,65,157,48],[207,94,157,77],[207,95,157,78],[208,6,158,4],[209,6,159,4],[209,12,159,10,"ExpoFontLoader"],[209,26,159,24],[209,27,159,24,"default"],[209,34,159,24],[209,35,159,25,"unloadAsync"],[209,46,159,36],[209,47,159,37,"fontFamily"],[209,57,159,47],[209,59,159,49,"options"],[209,66,159,56],[209,67,159,57],[210,4,160,0],[210,5,160,1],[211,4,160,1],[211,11,160,1,"_unloadFontInNamespaceAsync"],[211,38,160,1],[211,39,160,1,"apply"],[211,44,160,1],[211,51,160,1,"arguments"],[211,60,160,1],[212,2,160,1],[213,0,160,1],[213,3]],"functionMap":{"names":["<global>","isLoaded","getLoadedFonts","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCa;CDK;OEO;CFE;OGQ;CHE;OIgB;sBCY,iDD;qCCG,uDD,QE,SF;CJO;AOC;gCCiB;KDQ;CPE;OSM;CTS;OUW;oCLU,yDK;CVI;AWC;CXe"},"hasCjsExports":false},"type":"js/module"}]}