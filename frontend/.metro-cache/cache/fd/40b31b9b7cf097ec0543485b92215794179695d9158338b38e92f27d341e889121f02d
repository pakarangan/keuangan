{"dependencies":[{"name":"./useRouteCache.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":49,"index":64}}],"key":"7Wwgyr1YruLrWKgk0bZ/DNlglOg=","exportNames":["*"],"imports":1}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.getFocusedRouteNameFromRoute = getFocusedRouteNameFromRoute;\n  var _useRouteCacheJs = require(_dependencyMap[0], \"./useRouteCache.js\");\n  function getFocusedRouteNameFromRoute(route) {\n    var _route$CHILD_STATE, _state$index;\n    // @ts-expect-error: this isn't in type definitions coz we want this private\n    var state = (_route$CHILD_STATE = route[_useRouteCacheJs.CHILD_STATE]) != null ? _route$CHILD_STATE : route.state;\n    var params = route.params;\n    var routeName = state ?\n    // Get the currently active route name in the nested navigator\n    state.routes[// If we have a partial state without index, for tab/drawer, first screen will be focused one, and last for stack\n    // The type property will only exist for rehydrated state and not for state from deep link\n    (_state$index = state.index) != null ? _state$index : typeof state.type === 'string' && state.type !== 'stack' ? 0 : state.routes.length - 1].name :\n    // If state doesn't exist, we need to default to `screen` param if available\n    typeof (params == null ? void 0 : params.screen) === 'string' ? params.screen : undefined;\n    return routeName;\n  }\n});","lineCount":23,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,4,0,"exports"],[7,9,4,0],[7,10,4,0,"getFocusedRouteNameFromRoute"],[7,38,4,0],[7,41,4,0,"getFocusedRouteNameFromRoute"],[7,69,4,0],[8,2,3,0],[8,6,3,0,"_useRouteCacheJs"],[8,22,3,0],[8,25,3,0,"require"],[8,32,3,0],[8,33,3,0,"_dependencyMap"],[8,47,3,0],[9,2,4,7],[9,11,4,16,"getFocusedRouteNameFromRoute"],[9,39,4,44,"getFocusedRouteNameFromRoute"],[9,40,4,45,"route"],[9,45,4,50],[9,47,4,52],[10,4,4,52],[10,8,4,52,"_route$CHILD_STATE"],[10,26,4,52],[10,28,4,52,"_state$index"],[10,40,4,52],[11,4,5,2],[12,4,6,2],[12,8,6,8,"state"],[12,13,6,13],[12,17,6,13,"_route$CHILD_STATE"],[12,35,6,13],[12,38,6,16,"route"],[12,43,6,21],[12,44,6,22,"CHILD_STATE"],[12,60,6,33],[12,61,6,33,"CHILD_STATE"],[12,72,6,33],[12,73,6,34],[12,85,6,34,"_route$CHILD_STATE"],[12,103,6,34],[12,106,6,38,"route"],[12,111,6,43],[12,112,6,44,"state"],[12,117,6,49],[13,4,7,2],[13,8,7,8,"params"],[13,14,7,14],[13,17,7,17,"route"],[13,22,7,22],[13,23,7,23,"params"],[13,29,7,29],[14,4,8,2],[14,8,8,8,"routeName"],[14,17,8,17],[14,20,8,20,"state"],[14,25,8,25],[15,4,9,2],[16,4,10,2,"state"],[16,9,10,7],[16,10,10,8,"routes"],[16,16,10,14],[16,17,11,2],[17,4,12,2],[18,4,12,2],[18,5,12,2,"_state$index"],[18,17,12,2],[18,20,13,2,"state"],[18,25,13,7],[18,26,13,8,"index"],[18,31,13,13],[18,43,13,13,"_state$index"],[18,55,13,13],[18,58,13,18],[18,65,13,25,"state"],[18,70,13,30],[18,71,13,31,"type"],[18,75,13,35],[18,80,13,40],[18,88,13,48],[18,92,13,52,"state"],[18,97,13,57],[18,98,13,58,"type"],[18,102,13,62],[18,107,13,67],[18,114,13,74],[18,117,13,77],[18,118,13,78],[18,121,13,81,"state"],[18,126,13,86],[18,127,13,87,"routes"],[18,133,13,93],[18,134,13,94,"length"],[18,140,13,100],[18,143,13,103],[18,144,13,104],[18,145,13,106],[18,146,13,107,"name"],[18,150,13,111],[19,4,14,2],[20,4,15,2],[20,12,15,9,"params"],[20,18,15,15],[20,38,15,9,"params"],[20,44,15,15],[20,45,15,17,"screen"],[20,51,15,23],[20,57,15,28],[20,65,15,36],[20,68,15,39,"params"],[20,74,15,45],[20,75,15,46,"screen"],[20,81,15,52],[20,84,15,55,"undefined"],[20,93,15,64],[21,4,16,2],[21,11,16,9,"routeName"],[21,20,16,18],[22,2,17,0],[23,0,17,1],[23,3]],"functionMap":{"names":["<global>","getFocusedRouteNameFromRoute"],"mappings":"AAA;OCG;CDa"},"hasCjsExports":false},"type":"js/module"}]}